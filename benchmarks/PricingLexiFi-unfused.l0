fun real main() =
  let {num_mc_it_0, num_dates_1, num_und_2, num_bits_3, dir_vs_4} =
    {1000,
     5,
     3,
     30,
     [[536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608,
       4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384,
       8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],
      [536870912, 805306368, 671088640, 1006632960, 570425344, 855638016,
       713031680, 1069547520, 538968064, 808452096, 673710080, 1010565120,
       572653568, 858980352, 715816960, 1073725440, 536879104, 805318656,
       671098880, 1006648320, 570434048, 855651072, 713042560, 1069563840,
       538976288, 808464432, 673720360, 1010580540, 572662306, 858993459],
      [536870912, 805306368, 402653184, 603979776, 973078528, 385875968,
       595591168, 826277888, 438304768, 657457152, 999817216, 358875136,
       538574848, 807862272, 406552576, 605372416, 975183872, 389033984,
       597170176, 828646400, 437926400, 656873216, 1002152832, 357921088,
       536885792, 805312304, 402662296, 603992420, 973085210, 385885991],
      [536870912, 805306368, 939524096, 335544320, 234881024, 721420288,
       411041792, 616562688, 920649728, 1062207488, 381157376, 258736128,
       771883008, 453181440, 545488896, 817971200, 954261504, 340963328,
       238651392, 732843008, 417426944, 609285376, 909831040, 1068349120,
       383778848, 256901168, 783810616, 460062740, 537001998, 805503019],
      [536870912, 805306368, 402653184, 1006632960, 167772160, 285212672,
       713031680, 566231040, 853540864, 489684992, 952631296, 208928768,
       316801024, 758317056, 550076416, 813154304, 417505280, 1009913856,
       172697600, 297131008, 704744960, 553894656, 847291520, 499194688,
       954376224, 204607536, 306915352, 766893116, 536972810, 805552913],
      [536870912, 805306368, 402653184, 469762048, 301989888, 721420288,
       92274688, 264241152, 941621248, 741343232, 169345024, 924581888,
       395444224, 619380736, 1034256384, 603963392, 838868992, 452997120,
       494934016, 331357184, 706744832, 120597248, 261621120, 953946048,
       800208928, 148581424, 935168536, 350484252, 630339474, 1072370923],
      [536870912, 805306368, 134217728, 1006632960, 503316480, 754974720,
       629145600, 440401920, 94371840, 711983104, 229113856, 374079488,
       330694656, 996212736, 907247616, 557531136, 867573760, 190918656,
       1041467392, 490437632, 766918144, 643898624, 462663040, 125527616,
       672545696, 202454896, 373006376, 288845836, 1000351766, 930090001],
      [536870912, 268435456, 402653184, 872415232, 838860800, 956301312,
       612368384, 717225984, 211812352, 386924544, 302514176, 688128000,
       1015414784, 516751360, 1051492352, 773734400, 914432000, 63877120,
       807741440, 165200896, 748683776, 118489344, 168296832, 486802240,
       243663648, 667747216, 439124552, 81674924, 975249610, 350138737],
      [536870912, 268435456, 671088640, 469762048, 973078528, 1023410176,
       713031680, 339738624, 912261120, 797966336, 176685056, 71565312,
       510263296, 865533952, 814120960, 961232896, 887136256, 668078080,
       116070400, 382772224, 1047134720, 597098752, 411468416, 625689024,
       249602976, 449975248, 745216680, 43033924, 134873446, 201786361],
      [536870912, 268435456, 402653184, 67108864, 704643072, 385875968,
       696254464, 205520896, 920649728, 946864128, 359137280, 859045888,
       302907392, 50659328, 462192640, 524599296, 895541248, 590794752,
       168810496, 118033408, 831447552, 138662144, 485185920, 796511296,
       1021313184, 1064304752, 619184920, 997458052, 250479054, 745865975],
      [536870912, 268435456, 939524096, 1006632960, 838860800, 889192448,
       645922816, 46137344, 476053504, 584056832, 210239488, 465829888,
       820903936, 689897472, 73695232, 249118720, 110075904, 315338752,
       610637824, 517665792, 1049494016, 785318144, 376210304, 735921088,
       402760480, 738505552, 168368744, 151499820, 344957894, 936096557],
      [536870912, 805306368, 939524096, 1006632960, 503316480, 922746880,
       41943040, 423624704, 228589568, 651165696, 195559424, 500957184,
       791019520, 261292032, 1040285696, 118407168, 982065152, 625250304,
       329533440, 298984448, 153690624, 76845824, 579619712, 692987840,
       900670432, 450334832, 363187112, 719119956, 765461306, 382730781],
      [536870912, 805306368, 402653184, 603979776, 838860800, 117440512,
       478150656, 658505728, 752877568, 1060110336, 141033472, 209453056,
       244187136, 272957440, 678068224, 1014546432, 377724928, 876875776,
       443160576, 998185984, 168665600, 318837504, 914397568, 71818816,
       40763680, 527762288, 939688008, 335855668, 705536494, 587273091],
      [536870912, 268435456, 671088640, 738197504, 637534208, 150994944,
       813694976, 943718400, 77594624, 179306496, 798490624, 967049216,
       134348800, 1006698496, 235044864, 620937216, 377643008, 826314752,
       874711040, 854819840, 725109248, 856992512, 664336768, 94804544,
       100663328, 419430416, 411041832, 339738668, 580911142, 61865993],
      [536870912, 805306368, 939524096, 603979776, 100663296, 452984832,
       998244352, 188743680, 866123776, 389021696, 287834112, 172228608,
       824836096, 977731584, 153714688, 507854848, 254402560, 88403968,
       883578880, 235160576, 118055424, 422917888, 371224704, 326210368,
       654926368, 691353392, 773877944, 930190180, 554263078, 842348331]]} in
  let val_5 = [-0.0283491736871803, 0.0178771081725381, 0.0043096808044729] in
  let val_6 = [-0.0183841413744211, -0.0044530897672834, 0.0024263805987983] in
  let val_7 = [-0.0172686581005089, 0.0125638544546015, 0.0094452810918001] in
  let val_10 = [-0.0144179417871814, 0.0157411263968213, 0.0125315353728014] in
  let val_11 = [-0.0121497422218761, 0.0182904634062437, 0.0151125070556484] in
  // tmp_lit_13 aliases val_5, val_10, val_6, val_11, val_7
  let tmp_lit_13 = [val_5,
                    val_6,
                    val_7,
                    val_10,
                    val_11] in
  // md_drifts_18 aliases val_5, tmp_lit_13, val_10, val_6, val_11, val_7
  let {md_c_15, md_vols_17, md_drifts_18, md_st_19, md_dv_20, md_disc_21} =
    {[[1.0, 0.6, 0.8],
      [0.6, 0.8, 0.15],
      [0.8, 0.15, 0.5809475019311124]],
     [[0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15]],
     tmp_lit_13,
     [3758.05, 11840.0, 1200.0],
     [0.9997670577741848],
     [0.979786286180593, 0.9505748482484491, 0.9214621679912968,
      0.8906693055891434, 0.8588567633110704]} in
  let {bb_inds_22, bb_data_23} =
    {[[5, 2, 1, 3, 4],
      [0, 0, 0, 2, 3],
      [0, 5, 2, 5, 5]],
     [[2.237292884728058, 1.096095158985383, 0.7075902730592357,
       0.816682804349221, 0.7075902730592357],
      [0.0, 0.5998905309250137, 0.4993160054719562, 0.666970802919708,
       0.5006839945280438],
      [0.0, 0.4001094690749863, 0.5006839945280438, 0.3330291970802919,
       0.4993160054719562]]} in
  let {untuple_33} =
    mapT(fn {int} (int x_31) =>
           let val_32 = x_31 + 1 in
           {val_32},
         iota(1000)) in
  // untuple_83 aliases untuple_33
  let {untuple_83} =
    mapT(fn {[real]} (int param_0_34) =>
           let {untuple_67} =
             mapT(fn {int} ([int] param_0_35) =>
                    let {untuple_48} =
                      filterT(fn {bool} (int param_0_36) =>
                                let n_44 = param_0_34 >> 1 ^ param_0_34 in
                                let t_46 = 1 << param_0_36 in
                                let val_47 = (n_44 & t_46) = t_46 in
                                {val_47},
                              iota(30)) in
                    let {untuple_52} =
                      mapT(fn {int} (int param_0_50) =>
                             {param_0_35[param_0_50]},
                           untuple_48) in
                    let {untuple_64} =
                      reduceT(fn {int} (int x_55, int y_56) =>
                                let val_62 = x_55 ^ y_56 in
                                {val_62},
                              {0}, untuple_52) in
                    {untuple_64},
                  dir_vs_4) in
           let {untuple_81} =
             mapT(fn {real} (int x_71) =>
                    let tmp_call_76 = toReal(x_71) in
                    let val_79 = tmp_call_76 / 1073741824.0 in
                    {val_79},
                  untuple_67) in
           {untuple_81},
         untuple_33) in
  // untuple_119 aliases untuple_33, untuple_83
  let {untuple_119} =
    mapT(fn {[real]} ([real] param_0_84) =>
           let {untuple_118} =
             mapT(fn {real} (real param_0_86) =>
                    let dp_91 = param_0_86 - 0.5 in
                    let val_117 = if dp_91 < 0.0 && 0.0 - dp_91 <= 0.425 || 0.0 <= dp_91 && dp_91 <= 0.425
                                  then let x_92 = 0.180625 - (dp_91 * dp_91) in
                                       let tmp_bop_93 = (x_92 * (x_92 * (x_92 * (x_92 * (x_92 * (x_92 * (x_92 * 2509.0809287301227 + 33430.57558358813) + 67265.7709270087) + 45921.95393154987) + 13731.69376550946) + 1971.5909503065513) + 133.14166789178438) + 3.3871328727963665) / (x_92 * (x_92 * (x_92 * (x_92 * (x_92 * (x_92 * (x_92 * 5226.495278852854 + 28729.085735721943) + 39307.89580009271) + 21213.794301586597) + 5394.196021424751) + 687.1870074920579) + 42.31333070160091) + 1.0) in
                                       dp_91 * tmp_bop_93
                                  else let pp_94 = if dp_91 < 0.0
                                                   then dp_91 + 0.5
                                                   else 0.5 - dp_91 in
                                       let tmp_call_97 = log(pp_94) in
                                       let val_100 = -tmp_call_97 in
                                       let tmp_call_101 = sqrt(val_100) in
                                       let x_112 = if tmp_call_101 <= 5.0
                                                   then let x_107 = tmp_call_101 - 1.6 in
                                                        (x_107 * (x_107 * (x_107 * (x_107 * (x_107 * (x_107 * (x_107 * 0.0007745450142783414 + 0.022723844989269184) + 0.2417807251774506) + 1.2704582524523684) + 3.6478483247632045) + 5.769497221460691) + 4.630337846156546) + 1.4234371107496835) / (x_107 * (x_107 * (x_107 * (x_107 * (x_107 * (x_107 * (x_107 * 0.0000000010507500716444169 + 0.0005475938084995345) + 0.015198666563616457) + 0.14810397642748008) + 0.6897673349851) + 1.6763848301838038) + 2.053191626637759) + 1.0)
                                                   else let x_110 = tmp_call_101 - 5.0 in
                                                        (x_110 * (x_110 * (x_110 * (x_110 * (x_110 * (x_110 * (x_110 * 0.00000020103343992922881 + 0.000027115555687434876) + 0.0012426609473880784) + 0.026532189526576124) + 0.29656057182850487) + 1.7848265399172913) + 5.463784911164114) + 6.657904643501103) / (x_110 * (x_110 * (x_110 * (x_110 * (x_110 * (x_110 * (x_110 * 0.000020442631033899398 + 0.0000001421511758316446) + 0.000018463183175100548) + 0.0007868691311456133) + 0.014875361290850615) + 0.1369298809227358) + 0.599832206555888) + 1.0) in
                                       if dp_91 < 0.0
                                       then 0.0 - x_112
                                       else x_112 in
                    {val_117},
                  param_0_84) in
           {untuple_118},
         untuple_83) in
  // untuple_157 aliases untuple_33, untuple_83, untuple_119
  let {untuple_157} =
    mapT(fn {[[real]]} ([real] param_0_120) =>
           // untuple_152 aliases param_0_120
           let {untuple_152} =
             mapT(fn {[real]} ([real] param_0_121) =>
                    let bbrow_122 = replicate(5, 0.0) in
                    let val_125 = 2.237292884728058 * param_0_121[0] in
                    let letwith_dst_16 = bbrow_122 with [4] <- val_125 in
                    // bbrow_133 aliases letwith_dst_16
                    loop (bbrow_133 = letwith_dst_16) = for i_145 < 4 do
                      let j_146 = bb_inds_22[1, i_145 + 1] - 1 in
                      let k_147 = bb_inds_22[2, i_145 + 1] - 1 in
                      let l_148 = bb_inds_22[0, i_145 + 1] - 1 in
                      let tmp_149 = bb_data_23[2,
                                               i_145 + 1] * bbrow_133[k_147] + bb_data_23[0,
                                                                                          i_145 + 1] * param_0_121[i_145 + 1] in
                      let val_150 = if j_146 + 1 = 0
                                    then tmp_149
                                    else tmp_149 + bb_data_23[1,
                                                              i_145 + 1] * bbrow_133[j_146] in
                      let letwith_dst_24 = bbrow_133 with [l_148] <- val_150 in
                      letwith_dst_24 in
                    // bbrow_134 aliases bbrow_133
                    loop (bbrow_134 = bbrow_133) = for ii_136 < 4 do
                      let i_137 = 5 - (ii_136 + 1) in
                      let val_138 = bbrow_134[i_137] - bbrow_134[i_137 - 1] in
                      let letwith_dst_25 = bbrow_134 with [i_137] <- val_138 in
                      letwith_dst_25 in
                    {bbrow_134},
                  transpose(reshape((5, 3), param_0_120))) in
           {transpose(untuple_152)},
         untuple_119) in
  // untuple_271 aliases untuple_33, untuple_157, untuple_83, untuple_119
  let {untuple_271} =
    mapT(fn {[[real]]} ([[real]] param_0_159) =>
           // untuple_218 aliases param_0_159
           let {untuple_218} =
             mapT(fn {[real]} ([real] param_0_161) =>
                    let {untuple_216} =
                      mapT(fn {real} (int j_164) =>
                             let n_165 = j_164 + 1 in
                             let {first_166, rest_167} = split(n_165,
                                                               param_0_161) in
                             let n_168 = j_164 + 1 in
                             let {first_169, rest_170} = split(n_168,
                                                               md_c_15[j_164]) in
                             let tmp_size_171 = size(0, first_166) in
                             let tmp_size_176 = size(0, first_169) in
                             let tmp_e_178 = tmp_size_171 = tmp_size_176 in
                             let zip_assert_181 = assert(tmp_e_178) in
                             let tmp_size_196 = size(0, first_169) in
                             let tmp_e_197 = tmp_size_196 = j_164 + 1 in
                             let zip_assert_198 = assert(tmp_e_197) in
                             let comb_cert_199 = conjoin(zip_assert_181,
                                                         zip_assert_198) in
                             let {untuple_205} =
                               <comb_cert_199>
                               mapT(fn {real} (real arg_200, real arg_201,
                                               int arg_202) =>
                                      let val_204 = arg_200 * arg_201 in
                                      {val_204},
                                    first_166, first_169, iota(j_164 + 1)) in
                             let {untuple_212} =
                               reduceT(fn {real} (real x_206, real y_207) =>
                                         let val_210 = x_206 + y_207 in
                                         {val_210},
                                       {0.0}, untuple_205) in
                             {untuple_212},
                           iota(3)) in
                    {untuple_216},
                  param_0_159) in
           let tmp_size_221 = size(0, untuple_218) in
           let tmp_e_223 = tmp_size_221 = 5 in
           let zip_assert_225 = assert(tmp_e_223) in
           let tmp_size_227 = size(0, tmp_lit_13) in
           let tmp_e_229 = 5 = tmp_size_227 in
           let zip_assert_230 = assert(tmp_e_229) in
           let comb_cert_231 = conjoin(zip_assert_225, zip_assert_230) in
           // untuple_253 aliases val_5, tmp_lit_13, md_vols_17, val_10, md_drifts_18, untuple_218, val_6, val_11, val_7, param_0_159
           let {untuple_253} =
             <comb_cert_231>
             mapT(fn {[real]} ([real] arg_232, [real] arg_233,
                               [real] arg_234) =>
                    let tmp_size_235 = size(0, arg_232) in
                    let tmp_size_236 = size(0, arg_233) in
                    let tmp_e_237 = tmp_size_235 = tmp_size_236 in
                    let zip_assert_238 = assert(tmp_e_237) in
                    let {untuple_242} =
                      <zip_assert_238>
                      mapT(fn {real} (real arg_239, real arg_240) =>
                             let val_241 = arg_239 * arg_240 in
                             {val_241},
                           arg_232, arg_233) in
                    let tmp_size_243 = size(0, arg_234) in
                    let tmp_size_244 = size(0, untuple_242) in
                    let tmp_e_246 = tmp_size_243 = tmp_size_244 in
                    let zip_assert_247 = assert(tmp_e_246) in
                    let {untuple_252} =
                      <zip_assert_247>
                      mapT(fn {real} (real arg_249, real arg_250) =>
                             let val_251 = arg_249 + arg_250 in
                             {val_251},
                           arg_234, untuple_242) in
                    {untuple_252},
                  untuple_218, md_vols_17, tmp_lit_13) in
           // untuple_258 aliases untuple_253, val_5, tmp_lit_13, md_vols_17, val_10, md_drifts_18, untuple_218, val_6, val_11, val_7, param_0_159
           let {untuple_258} =
             mapT(fn {[real]} ([real] x_254) =>
                    let {untuple_257} =
                      mapT(fn {real} (real param_0_255) =>
                             let tmp_call_256 = exp(param_0_255) in
                             {tmp_call_256},
                           x_254) in
                    {untuple_257},
                  untuple_253) in
           // untuple_270 aliases untuple_253, val_5, tmp_lit_13, md_vols_17, untuple_258, val_10, md_drifts_18, untuple_218, val_6, val_11, val_7, param_0_159
           let {untuple_270} =
             scanT(fn {[real]} ([real] x_259, [real] y_260) =>
                     let tmp_size_261 = size(0, x_259) in
                     let tmp_size_262 = size(0, y_260) in
                     let tmp_e_263 = tmp_size_261 = tmp_size_262 in
                     let zip_assert_264 = assert(tmp_e_263) in
                     let {untuple_269} =
                       <zip_assert_264>
                       mapT(fn {real} (real arg_265, real arg_267) =>
                              let val_268 = arg_265 * arg_267 in
                              {val_268},
                            x_259, y_260) in
                     {untuple_269},
                   {md_st_19}, untuple_258) in
           {untuple_270},
         untuple_157) in
  let {untuple_295} =
    mapT(fn {real} ([[real]] param_0_272) =>
           let divs_273 = [0.00026609544843735446, 0.00008445945945945946,
                           0.0008333333333333334] in
           // untuple_284 aliases param_0_272
           let {untuple_284} =
             mapT(fn {[real]} ([real] xs_274) =>
                    let tmp_size_275 = size(0, xs_274) in
                    let tmp_e_277 = tmp_size_275 = 3 in
                    let zip_assert_278 = assert(tmp_e_277) in
                    let {untuple_282} =
                      <zip_assert_278>
                      mapT(fn {real} (real arg_279, real arg_280) =>
                             let val_281 = arg_279 * arg_280 in
                             {val_281},
                           xs_274, divs_273) in
                    {untuple_282},
                  param_0_272) in
           let {untuple_291} =
             mapT(fn {real} ([real] param_0_286) =>
                    let {untuple_290} =
                      reduceT(fn {real} (real x_287, real y_288) =>
                                let val_289 = if x_287 < y_288
                                              then x_287
                                              else y_288 in
                                {val_289},
                              {param_0_286[0]}, param_0_286) in
                    {untuple_290},
                  untuple_284) in
           let val_294 = if 1.0 <= untuple_291[0]
                         then 1126.754229107682
                         else if 1.0 <= untuple_291[1]
                              then 1235.7473027229837
                              else if 1.0 <= untuple_291[2]
                                   then 1336.1201435873802
                                   else if 1.0 <= untuple_291[3]
                                        then 1425.0708889426294
                                        else if 1.0 <= untuple_291[4]
                                             then 1502.9993357943733
                                             else if 0.75 < untuple_291[4]
                                                  then 858.8567633110704
                                                  else let amount_292 = 1000.0 * untuple_291[4] in
                                                       amount_292 * 0.8588567633110704 in
           {val_294},
         untuple_271) in
  let {untuple_299} =
    reduceT(fn {real} (real x_296, real y_297) =>
              let val_298 = x_296 + y_297 in
              {val_298},
            {0.0}, untuple_295) in
  let payoff_300 = trace(untuple_299) in
  payoff_300 / 1000.0
