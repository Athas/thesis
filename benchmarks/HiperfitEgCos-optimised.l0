fun [real] main() =
  let {untuple_7} =
    mapT(fn {real} (int i_0) =>
           let tmp_call_4 = toReal(i_0) in
           let val_5 = 0.001 * tmp_call_4 in
           {val_5},
         iota(8)) in
  let norm_9 = [0.0] in
  let {zip_cert_Dxxlow_12, Dxxlow_14, Dxxlow_19, Dxxlow_20} =
    {Checked,
     [0.0],
     [0.0],
     [0.0]} in
  let {untuple_803} =
    mapT(fn {real} (real x_21) =>
           let {untuple_27} =
             mapT(fn {real} (int i_22) =>
                    let tmp_call_24 = toReal(i_22) in
                    let bop_25 = 5.0 * tmp_call_24 in
                    let val_26 = bop_25 / 31.0 in
                    {val_26},
                  iota(32)) in
           let {untuple_30} =
             mapT(fn {int} (int y_28) =>
                    let val_29 = 1 + y_28 in
                    {val_29},
                  iota(30)) in
           let {untuple_33} =
             mapT(fn {int} (int y_31) =>
                    let val_32 = 1 + y_31 in
                    {val_32},
                  iota(30)) in
           let {untuple_39} =
             mapT(fn {real} (int i_34) =>
                    let tmp_call_35 = toReal(i_34) in
                    let bop_36 = tmp_call_35 * 0.008385254915624212 in
                    let bop_37 = bop_36 - 0.025155764746872637 in
                    let val_38 = bop_37 + 0.03 in
                    {val_38},
                  iota(32)) in
           let dxu_40 = untuple_39[1] - untuple_39[0] in
           let bop_41 = 1.0 / dxu_40 in
           let negate_42 = -bop_41 in
           let norm_43 = [negate_42] in
           let concat_x_44 = size(0, norm_43) in
           let concat_sz_45 = concat_x_44 + 30 in
           let norm_46 = [bop_41] in
           let concat_x_47 = size(0, norm_46) in
           let concat_sz_48 = concat_x_47 + 30 in
           let concat_sz_49 = concat_sz_48 + 1 in
           let tmp_e_50 = concat_sz_49 = 32 in
           let zip_assert_51 = assert(tmp_e_50) in
           let dxl_52 = untuple_39[31] - untuple_39[30] in
           let bop_53 = 1.0 / dxl_52 in
           let negate_54 = -bop_53 in
           let norm_55 = [negate_54] in
           let concat_y_56 = size(0, norm_55) in
           let concat_sz_57 = 31 + concat_y_56 in
           let norm_58 = [bop_53] in
           let concat_y_59 = size(0, norm_58) in
           let concat_sz_60 = concat_sz_45 + concat_y_59 in
           let tmp_e_61 = concat_sz_57 = concat_sz_60 in
           let zip_assert_62 = assert(tmp_e_61) in
           let tmp_e_63 = concat_sz_60 = concat_sz_49 in
           let zip_assert_64 = assert(tmp_e_63) in
           let {untuple_70} =
             mapT(fn {*[real]} (real xi_65) =>
                    let val_66 = xi_65 - x_21 in
                    let bop_67 = 0.0 < val_66 in
                    let tmp_arr_68 =
                      if bop_67
                      then val_66
                      else 0.0 in
                    let val_69 = replicate(16, tmp_arr_68) in
                    {val_69},
                  untuple_39) in
           let {soac_v_84, soac_v_85, soac_v_86} =
             mapT(fn {real, real, real} (int i_71) =>
                    let bop_72 = i_71 - 1 in
                    let dxl_73 = untuple_39[i_71] - untuple_39[bop_72] in
                    let bop_74 = i_71 + 1 in
                    let dxu_75 = untuple_39[bop_74] - untuple_39[i_71] in
                    let bop_76 = dxu_75 / dxl_73 in
                    let bop_77 = dxl_73 + dxu_75 in
                    let bop_78 = bop_76 / bop_77 in
                    let negate_79 = -bop_78 in
                    let bop_80 = dxl_73 / dxu_75 in
                    let bop_81 = bop_76 - bop_80 in
                    let bop_82 = bop_81 / bop_77 in
                    let bop_83 = bop_80 / bop_77 in
                    {negate_79, bop_82, bop_83},
                  untuple_33) in
           // tmp_conc_87 aliases norm_9
           let tmp_conc_87 = concat(norm_9, soac_v_84) in
           // tmp_conc_88 aliases norm_9, tmp_conc_87
           let tmp_conc_88 = concat(tmp_conc_87, norm_55) in
           // tmp_repl_89 aliases tmp_conc_88, norm_9, tmp_conc_87
           let tmp_repl_89 = replicate(16, tmp_conc_88) in
           // tmp_conc_90 aliases norm_43
           let tmp_conc_90 = concat(norm_43, soac_v_85) in
           // tmp_conc_91 aliases tmp_conc_90, norm_43
           let tmp_conc_91 = concat(tmp_conc_90, norm_58) in
           // tmp_repl_92 aliases tmp_conc_90, tmp_conc_91, norm_43
           let tmp_repl_92 = replicate(16, tmp_conc_91) in
           // tmp_conc_93 aliases norm_46
           let tmp_conc_93 = concat(norm_46, soac_v_86) in
           // tmp_conc_94 aliases tmp_conc_93, norm_46
           let tmp_conc_94 = concat(tmp_conc_93, norm_9) in
           // tmp_repl_95 aliases tmp_conc_93, tmp_conc_94, norm_46
           let tmp_repl_95 = replicate(16, tmp_conc_94) in
           let {soac_v_112, soac_v_113, soac_v_114} =
             mapT(fn {real, real, real} (int i_96) =>
                    let bop_97 = i_96 - 1 in
                    let dxl_98 = untuple_39[i_96] - untuple_39[bop_97] in
                    let bop_99 = 2.0 / dxl_98 in
                    let bop_100 = 1.0 / dxl_98 in
                    let bop_101 = i_96 + 1 in
                    let dxu_102 = untuple_39[bop_101] - untuple_39[i_96] in
                    let bop_103 = dxl_98 + dxu_102 in
                    let bop_104 = bop_99 / bop_103 in
                    let bop_105 = 1.0 / dxu_102 in
                    let bop_106 = bop_100 + bop_105 in
                    let bop_107 = 2.0 * bop_106 in
                    let bop_108 = bop_107 / bop_103 in
                    let negate_109 = -bop_108 in
                    let bop_110 = 2.0 / dxu_102 in
                    let bop_111 = bop_110 / bop_103 in
                    {bop_104, negate_109, bop_111},
                  untuple_30) in
           // tmp_conc_115 aliases Dxxlow_14
           let tmp_conc_115 = concat(Dxxlow_14, soac_v_112) in
           // tmp_conc_116 aliases Dxxlow_14, tmp_conc_115
           let tmp_conc_116 = concat(tmp_conc_115, Dxxlow_14) in
           // tmp_repl_117 aliases tmp_conc_116, Dxxlow_14, tmp_conc_115
           let tmp_repl_117 = replicate(16, tmp_conc_116) in
           // tmp_conc_118 aliases Dxxlow_19
           let tmp_conc_118 = concat(Dxxlow_19, soac_v_113) in
           // tmp_conc_119 aliases tmp_conc_118, Dxxlow_19
           let tmp_conc_119 = concat(tmp_conc_118, Dxxlow_19) in
           // tmp_repl_122 aliases tmp_conc_118, Dxxlow_19, tmp_conc_119
           let tmp_repl_122 = replicate(16, tmp_conc_119) in
           // tmp_conc_123 aliases Dxxlow_20
           let tmp_conc_123 = concat(Dxxlow_20, soac_v_114) in
           // tmp_conc_124 aliases Dxxlow_20, tmp_conc_123
           let tmp_conc_124 = concat(tmp_conc_123, Dxxlow_20) in
           // tmp_repl_125 aliases tmp_conc_124, Dxxlow_20, tmp_conc_123
           let tmp_repl_125 = replicate(16, tmp_conc_124) in
           let {untuple_129} =
             mapT(fn {int} (int y_126) =>
                    let val_127 = 1 + y_126 in
                    {val_127},
                  iota(14)) in
           let {untuple_132} =
             mapT(fn {int} (int y_130) =>
                    let val_131 = 1 + y_130 in
                    {val_131},
                  iota(14)) in
           let {untuple_141} =
             mapT(fn {real} (int i_136) =>
                    let tmp_call_137 = toReal(i_136) in
                    let bop_138 = tmp_call_137 * 0.8385254915624212 in
                    let bop_139 = bop_138 - 6.708203932499369 in
                    let val_140 = bop_139 + -1.6094379124341003 in
                    {val_140},
                  iota(16)) in
           let dxu_145 = untuple_141[1] - untuple_141[0] in
           let bop_149 = 1.0 / dxu_145 in
           let negate_152 = -bop_149 in
           let norm_154 = [negate_152] in
           let concat_x_156 = size(0, norm_154) in
           let concat_sz_157 = concat_x_156 + 14 in
           let norm_158 = [bop_149] in
           let concat_x_160 = size(0, norm_158) in
           let concat_sz_165 = concat_x_160 + 14 in
           let concat_sz_169 = concat_sz_165 + 1 in
           let tmp_e_175 = concat_sz_169 = 16 in
           let zip_assert_182 = assert(tmp_e_175) in
           let dxl_183 = untuple_141[15] - untuple_141[14] in
           let bop_184 = 1.0 / dxl_183 in
           let negate_185 = -bop_184 in
           let norm_189 = [negate_185] in
           let concat_y_190 = size(0, norm_189) in
           let concat_sz_191 = 15 + concat_y_190 in
           let norm_198 = [bop_184] in
           let concat_y_199 = size(0, norm_198) in
           let concat_sz_200 = concat_sz_157 + concat_y_199 in
           let tmp_e_201 = concat_sz_191 = concat_sz_200 in
           let zip_assert_208 = assert(tmp_e_201) in
           let tmp_e_215 = concat_sz_200 = concat_sz_169 in
           let zip_assert_216 = assert(tmp_e_215) in
           let {soac_v_298, soac_v_299, soac_v_300} =
             mapT(fn {real, real, real} (int i_217) =>
                    let bop_218 = i_217 - 1 in
                    let dxl_244 = untuple_141[i_217] - untuple_141[bop_218] in
                    let bop_251 = i_217 + 1 in
                    let dxu_252 = untuple_141[bop_251] - untuple_141[i_217] in
                    let bop_258 = dxu_252 / dxl_244 in
                    let bop_262 = dxl_244 + dxu_252 in
                    let bop_267 = bop_258 / bop_262 in
                    let negate_268 = -bop_267 in
                    let bop_274 = dxl_244 / dxu_252 in
                    let bop_278 = bop_258 - bop_274 in
                    let bop_290 = bop_278 / bop_262 in
                    let bop_297 = bop_274 / bop_262 in
                    {negate_268, bop_290, bop_297},
                  untuple_132) in
           // tmp_conc_323 aliases tmp_conc_88, tmp_repl_89, norm_9, tmp_conc_87
           let tmp_conc_323 = concat(norm_9, soac_v_298) in
           // tmp_conc_330 aliases tmp_conc_88, tmp_repl_89, norm_9, tmp_conc_87, tmp_conc_323
           let tmp_conc_330 = concat(tmp_conc_323, norm_189) in
           // tmp_repl_331 aliases tmp_conc_88, tmp_repl_89, norm_9, tmp_conc_330, tmp_conc_87, tmp_conc_323
           let tmp_repl_331 = replicate(32, tmp_conc_330) in
           // tmp_conc_332 aliases norm_154
           let tmp_conc_332 = concat(norm_154, soac_v_299) in
           // tmp_conc_333 aliases tmp_conc_332, norm_154
           let tmp_conc_333 = concat(tmp_conc_332, norm_198) in
           // tmp_repl_359 aliases tmp_conc_332, tmp_conc_333, norm_154
           let tmp_repl_359 = replicate(32, tmp_conc_333) in
           // tmp_conc_370 aliases norm_158
           let tmp_conc_370 = concat(norm_158, soac_v_300) in
           // tmp_conc_374 aliases tmp_conc_370, norm_158
           let tmp_conc_374 = concat(tmp_conc_370, norm_9) in
           // tmp_repl_375 aliases tmp_conc_370, norm_158, tmp_conc_374
           let tmp_repl_375 = replicate(32, tmp_conc_374) in
           let {soac_v_434, soac_v_446, soac_v_450} =
             mapT(fn {real, real, real} (int i_393) =>
                    let bop_394 = i_393 - 1 in
                    let dxl_396 = untuple_141[i_393] - untuple_141[bop_394] in
                    let bop_402 = 2.0 / dxl_396 in
                    let bop_403 = 1.0 / dxl_396 in
                    let bop_404 = i_393 + 1 in
                    let dxu_407 = untuple_141[bop_404] - untuple_141[i_393] in
                    let bop_408 = dxl_396 + dxu_407 in
                    let bop_409 = bop_402 / bop_408 in
                    let bop_410 = 1.0 / dxu_407 in
                    let bop_414 = bop_403 + bop_410 in
                    let bop_415 = 2.0 * bop_414 in
                    let bop_417 = bop_415 / bop_408 in
                    let negate_423 = -bop_417 in
                    let bop_424 = 2.0 / dxu_407 in
                    let bop_426 = bop_424 / bop_408 in
                    {bop_409, negate_423, bop_426},
                  untuple_129) in
           // tmp_conc_456 aliases tmp_conc_116, tmp_repl_117, Dxxlow_14, tmp_conc_115
           let tmp_conc_456 = concat(Dxxlow_14, soac_v_434) in
           // tmp_conc_457 aliases tmp_conc_456, tmp_conc_116, tmp_repl_117, Dxxlow_14, tmp_conc_115
           let tmp_conc_457 = concat(tmp_conc_456, Dxxlow_14) in
           // tmp_repl_460 aliases tmp_conc_456, tmp_conc_116, tmp_conc_457, tmp_repl_117, Dxxlow_14, tmp_conc_115
           let tmp_repl_460 = replicate(32, tmp_conc_457) in
           // tmp_conc_461 aliases tmp_repl_122, tmp_conc_118, Dxxlow_19, tmp_conc_119
           let tmp_conc_461 = concat(Dxxlow_19, soac_v_446) in
           // tmp_conc_462 aliases tmp_conc_461, tmp_repl_122, tmp_conc_118, Dxxlow_19, tmp_conc_119
           let tmp_conc_462 = concat(tmp_conc_461, Dxxlow_19) in
           // tmp_repl_463 aliases tmp_conc_461, tmp_repl_122, tmp_conc_118, tmp_conc_462, Dxxlow_19, tmp_conc_119
           let tmp_repl_463 = replicate(32, tmp_conc_462) in
           // tmp_conc_467 aliases tmp_conc_124, Dxxlow_20, tmp_repl_125, tmp_conc_123
           let tmp_conc_467 = concat(Dxxlow_20, soac_v_450) in
           // tmp_conc_468 aliases tmp_conc_124, Dxxlow_20, tmp_repl_125, tmp_conc_467, tmp_conc_123
           let tmp_conc_468 = concat(tmp_conc_467, Dxxlow_20) in
           // tmp_repl_470 aliases tmp_conc_124, tmp_conc_468, Dxxlow_20, tmp_repl_125, tmp_conc_467, tmp_conc_123
           let tmp_repl_470 = replicate(32, tmp_conc_468) in
           let tmp_repl_476 = replicate(16, 0.0) in
           // xXy_477 aliases tmp_repl_476
           let xXy_477 = replicate(32, tmp_repl_476) in
           // myResult_479 aliases untuple_70
           // myMuX_485 aliases tmp_repl_476, xXy_477
           // myVarX_486 aliases tmp_repl_476, xXy_477
           // myMuY_510 aliases tmp_repl_476, xXy_477
           // myVarY_514 aliases tmp_repl_476, xXy_477
           loop ({myResult_479, myMuX_485, myVarX_486, myMuY_510,
                  myVarY_514} = {untuple_70, xXy_477, xXy_477, xXy_477,
                                 xXy_477}) = for i_515 < 31 do
             let i_516 = 30 - i_515 in
             let bop_518 = i_516 + 1 in
             let bop_519 = 0.18 * untuple_27[i_516] in
             let {soac_v_545, soac_v_546, soac_v_547, soac_v_548} =
               mapT(fn {*[real], *[real], *[real], *[real]} (real xi_521) =>
                      let tmp_call_522 = log(xi_521) in
                      let bop_523 = 0.5 * tmp_call_522 in
                      let {soac_v_541, soac_v_542, soac_v_543, soac_v_544} =
                        mapT(fn {real, real, real, real} (real yj_527) =>
                               let bop_528 = bop_523 + yj_527 in
                               let bop_533 = bop_528 - bop_519 in
                               let val_539 = 2.0 * bop_533 in
                               let tmp_call_540 = exp(val_539) in
                               {0.0, tmp_call_540, 0.0, 0.36},
                             untuple_141) in
                      {soac_v_541, soac_v_542, soac_v_543, soac_v_544},
                    untuple_39) in
             let {untuple_573} =
               mapT(fn {[real]} (int i_549) =>
                      let {untuple_572} =
                        mapT(fn {real} (int j_550) =>
                               let bop_551 = soac_v_547[i_549, j_550]
                                             * tmp_conc_333[j_550] in
                               let bop_552 = 0.5 * soac_v_548[i_549, j_550] in
                               let bop_553 = bop_552 * tmp_conc_462[j_550] in
                               let bop_554 = bop_551 + bop_553 in
                               let bop_555 = bop_554 * myResult_479[i_549,
                                                                    j_550] in
                               let bop_556 = j_550 = 0 in
                               let bop_557 = j_550 - 1 in
                               let tmp_bop_562 =
                                 if bop_556
                                 then 0.0
                                 else let bop_558 = soac_v_547[i_549, j_550]
                                                    * tmp_conc_330[j_550] in
                                      let bop_559 = bop_552
                                                    * tmp_conc_457[j_550] in
                                      let bop_560 = bop_558 + bop_559 in
                                      let bop_561 = bop_560
                                                    * myResult_479[i_549,
                                                                   bop_557] in
                                      bop_561 in
                               let res_563 = tmp_bop_562 + bop_555 in
                               let bop_564 = j_550 = 15 in
                               let bop_565 = j_550 + 1 in
                               let tmp_bop_570 =
                                 if bop_564
                                 then 0.0
                                 else let bop_566 = soac_v_547[i_549, j_550]
                                                    * tmp_conc_374[j_550] in
                                      let bop_567 = bop_552
                                                    * tmp_conc_468[j_550] in
                                      let bop_568 = bop_566 + bop_567 in
                                      let bop_569 = bop_568
                                                    * myResult_479[i_549,
                                                                   bop_565] in
                                      bop_569 in
                               let res_571 = res_563 + tmp_bop_570 in
                               {res_571},
                             iota(16)) in
                      {untuple_572},
                    iota(32)) in
             let tmp_size_574 = size(1, soac_v_545) in
             let tmp_e_575 = 16 = tmp_size_574 in
             let zip_assert_576 = assert(tmp_e_575) in
             let tmp_size_577 = size(1, soac_v_546) in
             let tmp_e_578 = tmp_size_574 = tmp_size_577 in
             let zip_assert_579 = assert(tmp_e_578) in
             let comb_cert_580 = conjoin(zip_assert_576, zip_assert_579) in
             let comb_cert_581 = conjoin(zip_assert_51, zip_assert_62,
                                         zip_assert_64, zip_assert_576,
                                         zip_assert_579) in
             let bop_582 = untuple_27[bop_518] - untuple_27[i_516] in
             let dtInv_583 = 1.0 / bop_582 in
             let {untuple_613} =
               mapT(fn {[real]} (int j_584) =>
                      let {untuple_612} =
                        mapT(fn {real} (int i_585) =>
                               let res_586 = dtInv_583 * myResult_479[i_585,
                                                                      j_584] in
                               let bop_587 = soac_v_545[i_585, j_584]
                                             * tmp_conc_91[i_585] in
                               let bop_588 = 0.5 * soac_v_546[i_585, j_584] in
                               let bop_589 = bop_588 * tmp_conc_119[i_585] in
                               let bop_590 = bop_587 + bop_589 in
                               let bop_591 = 0.5 * bop_590 in
                               let bop_592 = bop_591 * myResult_479[i_585,
                                                                    j_584] in
                               let bop_593 = i_585 = 0 in
                               let bop_594 = i_585 - 1 in
                               let tmp_bop_600 =
                                 if bop_593
                                 then 0.0
                                 else let bop_595 = soac_v_545[i_585, j_584]
                                                    * tmp_conc_88[i_585] in
                                      let bop_596 = bop_588
                                                    * tmp_conc_116[i_585] in
                                      let bop_597 = bop_595 + bop_596 in
                                      let bop_598 = 0.5 * bop_597 in
                                      let bop_599 = bop_598
                                                    * myResult_479[bop_594,
                                                                   j_584] in
                                      bop_599 in
                               let res_601 = res_586 + tmp_bop_600 in
                               let res_602 = res_601 + bop_592 in
                               let bop_603 = i_585 = 31 in
                               let bop_604 = i_585 + 1 in
                               let tmp_bop_610 =
                                 if bop_603
                                 then 0.0
                                 else let bop_605 = soac_v_545[i_585, j_584]
                                                    * tmp_conc_94[i_585] in
                                      let bop_606 = bop_588
                                                    * tmp_conc_124[i_585] in
                                      let bop_607 = bop_605 + bop_606 in
                                      let bop_608 = 0.5 * bop_607 in
                                      let bop_609 = bop_608
                                                    * myResult_479[bop_604,
                                                                   j_584] in
                                      bop_609 in
                               let res_611 = res_602 + tmp_bop_610 in
                               {res_611},
                             iota(32)) in
                      {untuple_612},
                    iota(16)) in
             // untuple_620 aliases untuple_573, untuple_613
             let {untuple_620} =
               mapT(fn {[real]} ([real] arg_614, [real] arg_615) =>
                      let {untuple_619} =
                        mapT(fn {real} (real arg_616, real arg_617) =>
                               let val_618 = arg_616 + arg_617 in
                               {val_618},
                             arg_614, arg_615) in
                      {untuple_619},
                    untuple_613, transpose(untuple_573)) in
             // untuple_697 aliases tmp_conc_456, untuple_620, tmp_conc_116, tmp_conc_88, tmp_conc_124, tmp_repl_460, tmp_conc_468, Dxxlow_20, tmp_repl_92, tmp_repl_89, tmp_repl_125, untuple_573, soac_v_545, tmp_conc_461, tmp_conc_93, untuple_613, tmp_conc_457, norm_9, tmp_repl_117, tmp_repl_470, tmp_repl_122, tmp_conc_94, tmp_conc_330, norm_46, tmp_conc_118, tmp_conc_90, soac_v_546, tmp_conc_462, Dxxlow_14, tmp_repl_331, tmp_conc_467, Dxxlow_19, tmp_conc_119, tmp_conc_91, norm_43, tmp_repl_463, tmp_conc_115, tmp_conc_87, tmp_conc_123, tmp_repl_95, tmp_conc_323
             let {untuple_697} =
               <comb_cert_580>
               mapT(fn {[real]} ([real] arg_621, [real] arg_622, [real] arg_623,
                                 [real] arg_624, [real] arg_625, [real] arg_626,
                                 [real] arg_627, [real] arg_628,
                                 [real] arg_629) =>
                      let tmp_repl_630 = replicate(32, 0.0) in
                      let tmp_repl_631 = replicate(32, 0.0) in
                      // u_632 aliases tmp_repl_630
                      // uu_633 aliases tmp_repl_631
                      let {u_632, uu_633} = {tmp_repl_630, tmp_repl_631} in
                      let bop_634 = 0.5 * <comb_cert_581>arg_629[0] in
                      let bop_635 = bop_634 * <comb_cert_581>arg_626[0] in
                      let bop_636 = <comb_cert_581>arg_628[0]
                                    * <comb_cert_581>arg_623[0] in
                      let bop_637 = bop_636 + bop_635 in
                      let bop_638 = 0.5 * bop_637 in
                      let bop_639 = dtInv_583 - bop_638 in
                      let bet_640 = 1.0 / bop_639 in
                      let val_641 = arg_621[0] * bet_640 in
                      let letwith_dst_3 = u_632 with [0] <- val_641 in
                      // u_643 aliases letwith_dst_3
                      // uu_644 aliases uu_633, tmp_repl_631
                      loop ({u_643, uu_644, bet_645} = {letwith_dst_3,
                                                        tmp_repl_631,
                                                        bet_640}) = for j_654 < 31 do
                        let j_655 = j_654 + 1 in
                        let bop_656 = j_655 - 1 in
                        let bop_657 = 0.5 * <comb_cert_581>arg_629[bop_656] in
                        let bop_658 = bop_657
                                      * <comb_cert_581>arg_627[bop_656] in
                        let bop_659 = <comb_cert_581>arg_628[bop_656]
                                      * <comb_cert_581>arg_624[bop_656] in
                        let bop_660 = bop_659 + bop_658 in
                        let bop_661 = 0.5 * bop_660 in
                        let negate_662 = -bop_661 in
                        let val_663 = negate_662 * bet_645 in
                        let bop_664 = <comb_cert_581>arg_628[j_655]
                                      * <comb_cert_581>arg_622[j_655] in
                        let bop_665 = 0.5 * <comb_cert_581>arg_629[j_655] in
                        let bop_666 = bop_665 * <comb_cert_581>arg_625[j_655] in
                        let bop_667 = bop_664 + bop_666 in
                        let bop_668 = 0.5 * bop_667 in
                        let negate_669 = -bop_668 in
                        let bop_670 = negate_669 * u_643[bop_656] in
                        let bop_671 = arg_621[j_655] - bop_670 in
                        let letwith_dst_10 = uu_644 with [j_655] <- val_663 in
                        let bop_674 = <comb_cert_581>arg_628[j_655]
                                      * <comb_cert_581>arg_622[j_655] in
                        let bop_675 = 0.5 * <comb_cert_581>arg_629[j_655] in
                        let bop_676 = bop_675 * <comb_cert_581>arg_625[j_655] in
                        let bop_681 = bop_674 + bop_676 in
                        let bop_682 = 0.5 * bop_681 in
                        let negate_683 = -bop_682 in
                        let bop_684 = negate_683 * letwith_dst_10[j_655] in
                        let bop_685 = 0.5 * <comb_cert_581>arg_629[j_655] in
                        let bop_686 = bop_685 * <comb_cert_581>arg_626[j_655] in
                        let bop_687 = <comb_cert_581>arg_628[j_655]
                                      * <comb_cert_581>arg_623[j_655] in
                        let bop_688 = bop_687 + bop_686 in
                        let bop_689 = 0.5 * bop_688 in
                        let bop_690 = dtInv_583 - bop_689 in
                        let bop_691 = bop_690 - bop_684 in
                        let bet_693 = 1.0 / bop_691 in
                        let val_694 = bop_671 * bet_693 in
                        let letwith_dst_120 = u_643 with [j_655] <- val_694 in
                        {letwith_dst_120, letwith_dst_10, bet_693} in
                      // u_646 aliases u_643
                      loop (u_646 = u_643) = for j_647 < 31 do
                        let j_648 = 30 - j_647 in
                        let bop_649 = j_648 + 1 in
                        let bop_651 = uu_644[bop_649] * u_646[bop_649] in
                        let val_652 = u_646[j_648] - bop_651 in
                        let letwith_dst_121 = u_646 with [j_648] <- val_652 in
                        letwith_dst_121 in
                      {u_646},
                    untuple_620, tmp_repl_89, tmp_repl_92, tmp_repl_95,
                    tmp_repl_117, tmp_repl_122, tmp_repl_125,
                    transpose(soac_v_545), transpose(soac_v_546)) in
             let tmp_size_699 = size(1, untuple_697) in
             let tmp_e_700 = tmp_size_699 = 32 in
             let zip_assert_702 = assert(tmp_e_700) in
             let tmp_size_706 = <zip_assert_702>size(1, soac_v_547) in
             let tmp_e_707 = 16 = tmp_size_706 in
             let zip_assert_708 = assert(tmp_e_707) in
             let tmp_size_711 = <zip_assert_702>size(1, soac_v_548) in
             let tmp_e_712 = tmp_size_706 = tmp_size_711 in
             let zip_assert_713 = assert(tmp_e_712) in
             let comb_cert_714 = conjoin(zip_assert_182, zip_assert_208,
                                         zip_assert_216, zip_assert_702,
                                         zip_assert_708, zip_assert_713) in
             let {untuple_802} =
               <zip_assert_702>
               mapT(fn {*[real]} ([real] arg_715, [real] arg_718,
                                  [real] arg_719, [real] arg_720,
                                  [real] arg_721, [real] arg_725,
                                  [real] arg_726, [real] arg_727,
                                  [real] arg_728, [real] arg_729) =>
                      let tmp_repl_730 = replicate(16, 0.0) in
                      let tmp_repl_731 = replicate(16, 0.0) in
                      // u_732 aliases tmp_repl_730
                      // uu_733 aliases tmp_repl_731
                      let {u_732, uu_733} = {tmp_repl_730, tmp_repl_731} in
                      let bop_734 = 0.5 * <comb_cert_714>arg_729[0] in
                      let bop_735 = bop_734 * <comb_cert_714>arg_726[0] in
                      let bop_736 = <comb_cert_714>arg_728[0]
                                    * <comb_cert_714>arg_720[0] in
                      let bop_737 = bop_736 + bop_735 in
                      let bop_738 = 0.5 * bop_737 in
                      let bop_739 = dtInv_583 - bop_738 in
                      let bet_740 = 1.0 / bop_739 in
                      let bop_741 = dtInv_583 * arg_715[0] in
                      let bop_742 = 0.5 * arg_718[0] in
                      let val_743 = bop_741 - bop_742 in
                      let val_744 = val_743 * bet_740 in
                      let letwith_dst_128 = u_732 with [0] <- val_744 in
                      // u_746 aliases letwith_dst_128
                      // uu_747 aliases uu_733, tmp_repl_731
                      loop ({u_746, uu_747, bet_748} = {letwith_dst_128,
                                                        tmp_repl_731,
                                                        bet_740}) = for j_757 < 15 do
                        let j_758 = j_757 + 1 in
                        let bop_759 = j_758 - 1 in
                        let bop_760 = 0.5 * <comb_cert_714>arg_729[bop_759] in
                        let bop_761 = bop_760
                                      * <comb_cert_714>arg_727[bop_759] in
                        let bop_762 = <comb_cert_714>arg_728[bop_759]
                                      * <comb_cert_714>arg_721[bop_759] in
                        let bop_763 = bop_762 + bop_761 in
                        let bop_764 = 0.5 * bop_763 in
                        let negate_765 = -bop_764 in
                        let val_766 = negate_765 * bet_748 in
                        let bop_767 = <comb_cert_714>arg_728[j_758]
                                      * <comb_cert_714>arg_719[j_758] in
                        let bop_768 = 0.5 * <comb_cert_714>arg_729[j_758] in
                        let bop_769 = bop_768 * <comb_cert_714>arg_725[j_758] in
                        let bop_771 = bop_767 + bop_769 in
                        let bop_772 = 0.5 * bop_771 in
                        let negate_773 = -bop_772 in
                        let bop_774 = negate_773 * u_746[bop_759] in
                        let bop_775 = dtInv_583 * arg_715[j_758] in
                        let bop_776 = 0.5 * arg_718[j_758] in
                        let val_778 = bop_775 - bop_776 in
                        let bop_779 = val_778 - bop_774 in
                        let letwith_dst_133 = uu_747 with [j_758] <- val_766 in
                        let bop_783 = <comb_cert_714>arg_728[j_758]
                                      * <comb_cert_714>arg_719[j_758] in
                        let bop_784 = 0.5 * <comb_cert_714>arg_729[j_758] in
                        let bop_785 = bop_784 * <comb_cert_714>arg_725[j_758] in
                        let bop_786 = bop_783 + bop_785 in
                        let bop_788 = 0.5 * bop_786 in
                        let negate_789 = -bop_788 in
                        let bop_790 = negate_789 * letwith_dst_133[j_758] in
                        let bop_791 = 0.5 * <comb_cert_714>arg_729[j_758] in
                        let bop_792 = bop_791 * <comb_cert_714>arg_726[j_758] in
                        let bop_793 = <comb_cert_714>arg_728[j_758]
                                      * <comb_cert_714>arg_720[j_758] in
                        let bop_794 = bop_793 + bop_792 in
                        let bop_795 = 0.5 * bop_794 in
                        let bop_796 = dtInv_583 - bop_795 in
                        let bop_797 = bop_796 - bop_790 in
                        let bet_798 = 1.0 / bop_797 in
                        let val_799 = bop_779 * bet_798 in
                        let letwith_dst_134 = u_746 with [j_758] <- val_799 in
                        {letwith_dst_134, letwith_dst_133, bet_798} in
                      // u_750 aliases u_746
                      loop (u_750 = u_746) = for j_751 < 15 do
                        let j_752 = 14 - j_751 in
                        let bop_753 = j_752 + 1 in
                        let bop_754 = uu_747[bop_753] * u_750[bop_753] in
                        let val_755 = u_750[j_752] - bop_754 in
                        let letwith_dst_135 = u_750 with [j_752] <- val_755 in
                        letwith_dst_135 in
                      {u_750},
                    transpose(untuple_697), untuple_573, tmp_repl_331,
                    tmp_repl_359, tmp_repl_375, tmp_repl_460, tmp_repl_463,
                    tmp_repl_470, soac_v_547, soac_v_548) in
             {untuple_802, soac_v_545, soac_v_546, soac_v_547, soac_v_548} in
           {myResult_479[3, 8]},
         untuple_7) in
  untuple_803
