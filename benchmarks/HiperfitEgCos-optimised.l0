fun [real] main() =
  let {untuple_7} =
    mapT(fn {real} (int i_0) =>
           let tmp_call_4 = toReal(i_0) in
           let val_5 = 0.001 * tmp_call_4 in
           {val_5},
         iota(8)) in
  let norm_9 = [0.0] in
  let {zip_cert_Dxxlow_12, Dxxlow_14, Dxxlow_19, Dxxlow_20} =
    {Checked,
     [0.0],
     [0.0],
     [0.0]} in
  let {untuple_776} =
    mapT(fn {real} (real x_21) =>
           let {untuple_27} =
             mapT(fn {real} (int i_22) =>
                    let tmp_call_24 = toReal(i_22) in
                    let bop_25 = 5.0 * tmp_call_24 in
                    let val_26 = bop_25 / 31.0 in
                    {val_26},
                  iota(32)) in
           let {untuple_30} =
             mapT(fn {int} (int y_28) =>
                    let val_29 = 1 + y_28 in
                    {val_29},
                  iota(30)) in
           let {untuple_33} =
             mapT(fn {int} (int y_31) =>
                    let val_32 = 1 + y_31 in
                    {val_32},
                  iota(30)) in
           let {untuple_39} =
             mapT(fn {real} (int i_34) =>
                    let tmp_call_35 = toReal(i_34) in
                    let bop_36 = tmp_call_35 * 0.008385254915624212 in
                    let bop_37 = bop_36 - 0.025155764746872637 in
                    let val_38 = bop_37 + 0.03 in
                    {val_38},
                  iota(32)) in
           let dxu_40 = untuple_39[1] - untuple_39[0] in
           let bop_41 = 1.0 / dxu_40 in
           let negate_42 = -bop_41 in
           let norm_43 = [negate_42] in
           let concat_x_44 = size(0, norm_43) in
           let concat_sz_45 = concat_x_44 + 30 in
           let norm_46 = [bop_41] in
           let concat_x_47 = size(0, norm_46) in
           let concat_sz_48 = concat_x_47 + 30 in
           let concat_sz_49 = concat_sz_48 + 1 in
           let tmp_e_50 = concat_sz_49 = 32 in
           let zip_assert_51 = assert(tmp_e_50) in
           let dxl_52 = untuple_39[31] - untuple_39[30] in
           let bop_53 = 1.0 / dxl_52 in
           let negate_54 = -bop_53 in
           let norm_55 = [negate_54] in
           let concat_y_56 = size(0, norm_55) in
           let concat_sz_57 = 31 + concat_y_56 in
           let norm_58 = [bop_53] in
           let concat_y_59 = size(0, norm_58) in
           let concat_sz_60 = concat_sz_45 + concat_y_59 in
           let tmp_e_61 = concat_sz_57 = concat_sz_60 in
           let zip_assert_62 = assert(tmp_e_61) in
           let tmp_e_63 = concat_sz_60 = concat_sz_49 in
           let zip_assert_64 = assert(tmp_e_63) in
           let {untuple_70} =
             mapT(fn {*[real]} (real xi_65) =>
                    let val_66 = xi_65 - x_21 in
                    let bop_67 = 0.0 < val_66 in
                    let tmp_arr_68 = if bop_67
                                     then val_66
                                     else 0.0 in
                    let val_69 = replicate(16, tmp_arr_68) in
                    {val_69},
                  untuple_39) in
           let {soac_v_84, soac_v_85, soac_v_86} =
             mapT(fn {real, real, real} (int i_71) =>
                    let bop_72 = i_71 - 1 in
                    let dxl_73 = untuple_39[i_71] - untuple_39[bop_72] in
                    let bop_74 = i_71 + 1 in
                    let dxu_75 = untuple_39[bop_74] - untuple_39[i_71] in
                    let bop_76 = dxu_75 / dxl_73 in
                    let bop_77 = dxl_73 + dxu_75 in
                    let bop_78 = bop_76 / bop_77 in
                    let negate_79 = -bop_78 in
                    let bop_80 = dxl_73 / dxu_75 in
                    let bop_81 = bop_76 - bop_80 in
                    let bop_82 = bop_81 / bop_77 in
                    let bop_83 = bop_80 / bop_77 in
                    {negate_79, bop_82, bop_83},
                  untuple_33) in
           // tmp_conc_87 aliases norm_9
           let tmp_conc_87 = concat(norm_9, soac_v_84) in
           // tmp_conc_88 aliases norm_9, tmp_conc_87
           let tmp_conc_88 = concat(tmp_conc_87, norm_55) in
           // tmp_repl_89 aliases tmp_conc_88, norm_9, tmp_conc_87
           let tmp_repl_89 = replicate(16, tmp_conc_88) in
           // tmp_conc_90 aliases norm_43
           let tmp_conc_90 = concat(norm_43, soac_v_85) in
           // tmp_conc_91 aliases tmp_conc_90, norm_43
           let tmp_conc_91 = concat(tmp_conc_90, norm_58) in
           // tmp_repl_92 aliases tmp_conc_90, tmp_conc_91, norm_43
           let tmp_repl_92 = replicate(16, tmp_conc_91) in
           // tmp_conc_93 aliases norm_46
           let tmp_conc_93 = concat(norm_46, soac_v_86) in
           // tmp_conc_94 aliases tmp_conc_93, norm_46
           let tmp_conc_94 = concat(tmp_conc_93, norm_9) in
           // tmp_repl_95 aliases tmp_conc_93, tmp_conc_94, norm_46
           let tmp_repl_95 = replicate(16, tmp_conc_94) in
           let {soac_v_114, soac_v_116, soac_v_117} =
             mapT(fn {real, real, real} (int i_96) =>
                    let bop_97 = i_96 - 1 in
                    let dxl_98 = untuple_39[i_96] - untuple_39[bop_97] in
                    let bop_99 = 2.0 / dxl_98 in
                    let bop_100 = 1.0 / dxl_98 in
                    let bop_101 = i_96 + 1 in
                    let dxu_102 = untuple_39[bop_101] - untuple_39[i_96] in
                    let bop_103 = dxl_98 + dxu_102 in
                    let bop_104 = bop_99 / bop_103 in
                    let bop_105 = 1.0 / dxu_102 in
                    let bop_106 = bop_100 + bop_105 in
                    let bop_107 = 2.0 * bop_106 in
                    let bop_108 = bop_107 / bop_103 in
                    let negate_111 = -bop_108 in
                    let bop_112 = 2.0 / dxu_102 in
                    let bop_113 = bop_112 / bop_103 in
                    {bop_104, negate_111, bop_113},
                  untuple_30) in
           // tmp_conc_118 aliases Dxxlow_14
           let tmp_conc_118 = concat(Dxxlow_14, soac_v_114) in
           // tmp_conc_119 aliases tmp_conc_118, Dxxlow_14
           let tmp_conc_119 = concat(tmp_conc_118, Dxxlow_14) in
           // tmp_repl_123 aliases tmp_conc_118, Dxxlow_14, tmp_conc_119
           let tmp_repl_123 = replicate(16, tmp_conc_119) in
           // tmp_conc_124 aliases Dxxlow_19
           let tmp_conc_124 = concat(Dxxlow_19, soac_v_116) in
           // tmp_conc_125 aliases tmp_conc_124, Dxxlow_19
           let tmp_conc_125 = concat(tmp_conc_124, Dxxlow_19) in
           // tmp_repl_126 aliases tmp_conc_124, tmp_conc_125, Dxxlow_19
           let tmp_repl_126 = replicate(16, tmp_conc_125) in
           // tmp_conc_127 aliases Dxxlow_20
           let tmp_conc_127 = concat(Dxxlow_20, soac_v_117) in
           // tmp_conc_128 aliases Dxxlow_20, tmp_conc_127
           let tmp_conc_128 = concat(tmp_conc_127, Dxxlow_20) in
           // tmp_repl_133 aliases tmp_conc_128, Dxxlow_20, tmp_conc_127
           let tmp_repl_133 = replicate(16, tmp_conc_128) in
           let {untuple_141} =
             mapT(fn {int} (int y_136) =>
                    let val_139 = 1 + y_136 in
                    {val_139},
                  iota(14)) in
           let {untuple_148} =
             mapT(fn {int} (int y_143) =>
                    let val_144 = 1 + y_143 in
                    {val_144},
                  iota(14)) in
           let {untuple_173} =
             mapT(fn {real} (int i_159) =>
                    let tmp_call_166 = toReal(i_159) in
                    let bop_167 = tmp_call_166 * 0.8385254915624212 in
                    let bop_168 = bop_167 - 6.708203932499369 in
                    let val_169 = bop_168 + -1.6094379124341003 in
                    {val_169},
                  iota(16)) in
           let dxu_174 = untuple_173[1] - untuple_173[0] in
           let bop_175 = 1.0 / dxu_174 in
           let negate_182 = -bop_175 in
           let norm_183 = [negate_182] in
           let concat_x_184 = size(0, norm_183) in
           let concat_sz_185 = concat_x_184 + 14 in
           let norm_192 = [bop_175] in
           let concat_x_199 = size(0, norm_192) in
           let concat_sz_200 = concat_x_199 + 14 in
           let concat_sz_201 = concat_sz_200 + 1 in
           let tmp_e_202 = concat_sz_201 = 16 in
           let zip_assert_211 = assert(tmp_e_202) in
           let dxl_212 = untuple_173[15] - untuple_173[14] in
           let bop_213 = 1.0 / dxl_212 in
           let negate_214 = -bop_213 in
           let norm_215 = [negate_214] in
           let concat_y_216 = size(0, norm_215) in
           let concat_sz_217 = 15 + concat_y_216 in
           let norm_221 = [bop_213] in
           let concat_y_222 = size(0, norm_221) in
           let concat_sz_223 = concat_sz_185 + concat_y_222 in
           let tmp_e_224 = concat_sz_217 = concat_sz_223 in
           let zip_assert_225 = assert(tmp_e_224) in
           let tmp_e_227 = concat_sz_223 = concat_sz_201 in
           let zip_assert_228 = assert(tmp_e_227) in
           let {soac_v_246, soac_v_247, soac_v_248} =
             mapT(fn {real, real, real} (int i_229) =>
                    let bop_231 = i_229 - 1 in
                    let dxl_232 = untuple_173[i_229] - untuple_173[bop_231] in
                    let bop_233 = i_229 + 1 in
                    let dxu_235 = untuple_173[bop_233] - untuple_173[i_229] in
                    let bop_236 = dxu_235 / dxl_232 in
                    let bop_237 = dxl_232 + dxu_235 in
                    let bop_238 = bop_236 / bop_237 in
                    let negate_239 = -bop_238 in
                    let bop_240 = dxl_232 / dxu_235 in
                    let bop_243 = bop_236 - bop_240 in
                    let bop_244 = bop_243 / bop_237 in
                    let bop_245 = bop_240 / bop_237 in
                    {negate_239, bop_244, bop_245},
                  untuple_148) in
           // tmp_conc_249 aliases tmp_conc_88, tmp_repl_89, norm_9, tmp_conc_87
           let tmp_conc_249 = concat(norm_9, soac_v_246) in
           // tmp_conc_252 aliases tmp_conc_88, tmp_repl_89, tmp_conc_249, norm_9, tmp_conc_87
           let tmp_conc_252 = concat(tmp_conc_249, norm_215) in
           // tmp_repl_253 aliases tmp_conc_88, tmp_conc_252, tmp_repl_89, tmp_conc_249, norm_9, tmp_conc_87
           let tmp_repl_253 = replicate(32, tmp_conc_252) in
           // tmp_conc_254 aliases norm_183
           let tmp_conc_254 = concat(norm_183, soac_v_247) in
           // tmp_conc_255 aliases tmp_conc_254, norm_183
           let tmp_conc_255 = concat(tmp_conc_254, norm_221) in
           // tmp_repl_256 aliases tmp_conc_254, norm_183, tmp_conc_255
           let tmp_repl_256 = replicate(32, tmp_conc_255) in
           // tmp_conc_257 aliases norm_192
           let tmp_conc_257 = concat(norm_192, soac_v_248) in
           // tmp_conc_258 aliases norm_192, tmp_conc_257
           let tmp_conc_258 = concat(tmp_conc_257, norm_9) in
           // tmp_repl_259 aliases norm_192, tmp_conc_257, tmp_conc_258
           let tmp_repl_259 = replicate(32, tmp_conc_258) in
           let {soac_v_280, soac_v_281, soac_v_282} =
             mapT(fn {real, real, real} (int i_260) =>
                    let bop_261 = i_260 - 1 in
                    let dxl_266 = untuple_173[i_260] - untuple_173[bop_261] in
                    let bop_267 = 2.0 / dxl_266 in
                    let bop_268 = 1.0 / dxl_266 in
                    let bop_269 = i_260 + 1 in
                    let dxu_270 = untuple_173[bop_269] - untuple_173[i_260] in
                    let bop_271 = dxl_266 + dxu_270 in
                    let bop_272 = bop_267 / bop_271 in
                    let bop_273 = 1.0 / dxu_270 in
                    let bop_274 = bop_268 + bop_273 in
                    let bop_275 = 2.0 * bop_274 in
                    let bop_276 = bop_275 / bop_271 in
                    let negate_277 = -bop_276 in
                    let bop_278 = 2.0 / dxu_270 in
                    let bop_279 = bop_278 / bop_271 in
                    {bop_272, negate_277, bop_279},
                  untuple_141) in
           // tmp_conc_284 aliases tmp_conc_118, Dxxlow_14, tmp_conc_119, tmp_repl_123
           let tmp_conc_284 = concat(Dxxlow_14, soac_v_280) in
           // tmp_conc_285 aliases tmp_conc_284, tmp_conc_118, Dxxlow_14, tmp_conc_119, tmp_repl_123
           let tmp_conc_285 = concat(tmp_conc_284, Dxxlow_14) in
           // tmp_repl_286 aliases tmp_conc_284, tmp_conc_285, tmp_conc_118, Dxxlow_14, tmp_conc_119, tmp_repl_123
           let tmp_repl_286 = replicate(32, tmp_conc_285) in
           // tmp_conc_288 aliases tmp_conc_124, tmp_conc_125, tmp_repl_126, Dxxlow_19
           let tmp_conc_288 = concat(Dxxlow_19, soac_v_281) in
           // tmp_conc_290 aliases tmp_conc_124, tmp_conc_288, tmp_conc_125, tmp_repl_126, Dxxlow_19
           let tmp_conc_290 = concat(tmp_conc_288, Dxxlow_19) in
           // tmp_repl_291 aliases tmp_conc_124, tmp_conc_288, tmp_conc_125, tmp_repl_126, tmp_conc_290, Dxxlow_19
           let tmp_repl_291 = replicate(32, tmp_conc_290) in
           // tmp_conc_292 aliases tmp_conc_128, Dxxlow_20, tmp_repl_133, tmp_conc_127
           let tmp_conc_292 = concat(Dxxlow_20, soac_v_282) in
           // tmp_conc_293 aliases tmp_conc_128, tmp_conc_292, Dxxlow_20, tmp_repl_133, tmp_conc_127
           let tmp_conc_293 = concat(tmp_conc_292, Dxxlow_20) in
           // tmp_repl_294 aliases tmp_conc_128, tmp_conc_292, Dxxlow_20, tmp_repl_133, tmp_conc_293, tmp_conc_127
           let tmp_repl_294 = replicate(32, tmp_conc_293) in
           let tmp_repl_295 = replicate(16, 0.0) in
           // xXy_296 aliases tmp_repl_295
           let xXy_296 = replicate(32, tmp_repl_295) in
           // myResult_298 aliases untuple_70
           // myMuX_299 aliases xXy_296, tmp_repl_295
           // myVarX_300 aliases xXy_296, tmp_repl_295
           // myMuY_301 aliases xXy_296, tmp_repl_295
           // myVarY_302 aliases xXy_296, tmp_repl_295
           loop ({myResult_298, myMuX_299, myVarX_300, myMuY_301,
                  myVarY_302} = {untuple_70, xXy_296, xXy_296, xXy_296,
                                 xXy_296}) = for i_303 < 31 do
             let i_304 = 30 - i_303 in
             let bop_309 = i_304 + 1 in
             let bop_310 = 0.18 * untuple_27[i_304] in
             let {soac_v_323, soac_v_324, soac_v_325, soac_v_326} =
               mapT(fn {*[real], *[real], *[real], *[real]} (real xi_311) =>
                      let tmp_call_312 = log(xi_311) in
                      let bop_313 = 0.5 * tmp_call_312 in
                      let {soac_v_319, soac_v_320, soac_v_321, soac_v_322} =
                        mapT(fn {real, real, real, real} (real yj_314) =>
                               let bop_315 = bop_313 + yj_314 in
                               let bop_316 = bop_315 - bop_310 in
                               let val_317 = 2.0 * bop_316 in
                               let tmp_call_318 = exp(val_317) in
                               {0.0, tmp_call_318, 0.0, 0.36},
                             untuple_173) in
                      {soac_v_319, soac_v_320, soac_v_321, soac_v_322},
                    untuple_39) in
             let {untuple_352} =
               mapT(fn {[real]} (int i_327) =>
                      let {untuple_351} =
                        mapT(fn {real} (int j_328) =>
                               let bop_329 = soac_v_325[i_327,
                                                        j_328] * tmp_conc_255[j_328] in
                               let bop_330 = 0.5 * soac_v_326[i_327, j_328] in
                               let bop_331 = bop_330 * tmp_conc_290[j_328] in
                               let bop_332 = bop_329 + bop_331 in
                               let bop_333 = bop_332 * myResult_298[i_327,
                                                                    j_328] in
                               let bop_334 = j_328 = 0 in
                               let bop_335 = j_328 - 1 in
                               let tmp_bop_340 = if bop_334
                                                 then 0.0
                                                 else let bop_336 = soac_v_325[i_327,
                                                                               j_328] * tmp_conc_252[j_328] in
                                                      let bop_337 = bop_330 * tmp_conc_285[j_328] in
                                                      let bop_338 = bop_336 + bop_337 in
                                                      let bop_339 = bop_338 * myResult_298[i_327,
                                                                                           bop_335] in
                                                      bop_339 in
                               let res_341 = tmp_bop_340 + bop_333 in
                               let bop_343 = j_328 = 15 in
                               let bop_344 = j_328 + 1 in
                               let tmp_bop_349 = if bop_343
                                                 then 0.0
                                                 else let bop_345 = soac_v_325[i_327,
                                                                               j_328] * tmp_conc_258[j_328] in
                                                      let bop_346 = bop_330 * tmp_conc_293[j_328] in
                                                      let bop_347 = bop_345 + bop_346 in
                                                      let bop_348 = bop_347 * myResult_298[i_327,
                                                                                           bop_344] in
                                                      bop_348 in
                               let res_350 = res_341 + tmp_bop_349 in
                               {res_350},
                             iota(16)) in
                      {untuple_351},
                    iota(32)) in
             let tmp_size_353 = size(1, soac_v_323) in
             let tmp_e_354 = 16 = tmp_size_353 in
             let zip_assert_355 = assert(tmp_e_354) in
             let tmp_size_356 = size(1, soac_v_324) in
             let tmp_e_359 = tmp_size_353 = tmp_size_356 in
             let zip_assert_360 = assert(tmp_e_359) in
             let comb_cert_361 = conjoin(zip_assert_355, zip_assert_360) in
             let comb_cert_362 = conjoin(zip_assert_51, zip_assert_62,
                                         zip_assert_64, zip_assert_355,
                                         zip_assert_360) in
             let bop_363 = untuple_27[bop_309] - untuple_27[i_304] in
             let dtInv_364 = 1.0 / bop_363 in
             let {untuple_401} =
               mapT(fn {[real]} (int j_365) =>
                      let {untuple_400} =
                        mapT(fn {real} (int i_368) =>
                               let res_369 = dtInv_364 * myResult_298[i_368,
                                                                      j_365] in
                               let bop_370 = soac_v_323[i_368,
                                                        j_365] * tmp_conc_91[i_368] in
                               let bop_371 = 0.5 * soac_v_324[i_368, j_365] in
                               let bop_372 = bop_371 * tmp_conc_125[i_368] in
                               let bop_373 = bop_370 + bop_372 in
                               let bop_374 = 0.5 * bop_373 in
                               let bop_375 = bop_374 * myResult_298[i_368,
                                                                    j_365] in
                               let bop_376 = i_368 = 0 in
                               let bop_377 = i_368 - 1 in
                               let tmp_bop_387 = if bop_376
                                                 then 0.0
                                                 else let bop_382 = soac_v_323[i_368,
                                                                               j_365] * tmp_conc_88[i_368] in
                                                      let bop_383 = bop_371 * tmp_conc_119[i_368] in
                                                      let bop_384 = bop_382 + bop_383 in
                                                      let bop_385 = 0.5 * bop_384 in
                                                      let bop_386 = bop_385 * myResult_298[bop_377,
                                                                                           j_365] in
                                                      bop_386 in
                               let res_388 = res_369 + tmp_bop_387 in
                               let res_389 = res_388 + bop_375 in
                               let bop_390 = i_368 = 31 in
                               let bop_391 = i_368 + 1 in
                               let tmp_bop_397 = if bop_390
                                                 then 0.0
                                                 else let bop_392 = soac_v_323[i_368,
                                                                               j_365] * tmp_conc_94[i_368] in
                                                      let bop_393 = bop_371 * tmp_conc_128[i_368] in
                                                      let bop_394 = bop_392 + bop_393 in
                                                      let bop_395 = 0.5 * bop_394 in
                                                      let bop_396 = bop_395 * myResult_298[bop_391,
                                                                                           j_365] in
                                                      bop_396 in
                               let res_398 = res_389 + tmp_bop_397 in
                               {res_398},
                             iota(32)) in
                      {untuple_400},
                    iota(16)) in
             // untuple_410 aliases untuple_352, untuple_401
             let {untuple_410} =
               mapT(fn {[real]} ([real] arg_402, [real] arg_404) =>
                      let {untuple_409} =
                        mapT(fn {real} (real arg_406, real arg_407) =>
                               let val_408 = arg_406 + arg_407 in
                               {val_408},
                             arg_402, arg_404) in
                      {untuple_409},
                    untuple_401, transpose(untuple_352)) in
             // untuple_506 aliases tmp_conc_128, tmp_conc_292, tmp_conc_88, tmp_conc_252, tmp_conc_124, untuple_352, tmp_conc_288, soac_v_324, Dxxlow_20, tmp_conc_284, tmp_repl_92, tmp_repl_89, tmp_conc_125, tmp_repl_253, tmp_repl_133, tmp_conc_249, tmp_conc_285, tmp_conc_93, tmp_conc_293, norm_9, untuple_401, tmp_repl_286, tmp_conc_94, tmp_repl_294, norm_46, tmp_conc_118, untuple_410, tmp_conc_90, tmp_repl_126, tmp_conc_290, Dxxlow_14, Dxxlow_19, tmp_conc_119, tmp_conc_91, tmp_conc_127, tmp_repl_291, norm_43, tmp_conc_87, tmp_repl_123, tmp_repl_95, soac_v_323
             let {untuple_506} =
               <comb_cert_361>
               mapT(fn {[real]} ([real] arg_412, [real] arg_413, [real] arg_414,
                                 [real] arg_415, [real] arg_416, [real] arg_417,
                                 [real] arg_418, [real] arg_419,
                                 [real] arg_420) =>
                      let tmp_repl_421 = replicate(32, 0.0) in
                      let tmp_repl_425 = replicate(32, 0.0) in
                      // u_426 aliases tmp_repl_421
                      // uu_427 aliases tmp_repl_425
                      let {u_426, uu_427} = {tmp_repl_421, tmp_repl_425} in
                      let bop_428 = 0.5 * <comb_cert_362>arg_420[0] in
                      let bop_429 = bop_428 * <comb_cert_362>arg_417[0] in
                      let bop_430 = <comb_cert_362>arg_419[0] * <comb_cert_362>arg_414[0] in
                      let bop_431 = bop_430 + bop_429 in
                      let bop_432 = 0.5 * bop_431 in
                      let bop_433 = dtInv_364 - bop_432 in
                      let bet_434 = 1.0 / bop_433 in
                      let val_435 = arg_412[0] * bet_434 in
                      let letwith_dst_3 = u_426 with [0] <- val_435 in
                      // u_437 aliases letwith_dst_3
                      // uu_438 aliases tmp_repl_425, uu_427
                      loop ({u_437, uu_438, bet_439} = {letwith_dst_3,
                                                        tmp_repl_425,
                                                        bet_434}) = for j_447 < 31 do
                        let j_448 = j_447 + 1 in
                        let bop_449 = j_448 - 1 in
                        let bop_450 = 0.5 * <comb_cert_362>arg_420[bop_449] in
                        let bop_451 = bop_450 * <comb_cert_362>arg_418[bop_449] in
                        let bop_452 = <comb_cert_362>arg_419[bop_449] * <comb_cert_362>arg_415[bop_449] in
                        let bop_453 = bop_452 + bop_451 in
                        let bop_454 = 0.5 * bop_453 in
                        let negate_459 = -bop_454 in
                        let val_460 = negate_459 * bet_439 in
                        let bop_462 = <comb_cert_362>arg_419[j_448] * <comb_cert_362>arg_413[j_448] in
                        let bop_463 = 0.5 * <comb_cert_362>arg_420[j_448] in
                        let bop_464 = bop_463 * <comb_cert_362>arg_416[j_448] in
                        let bop_467 = bop_462 + bop_464 in
                        let bop_468 = 0.5 * bop_467 in
                        let negate_469 = -bop_468 in
                        let bop_470 = negate_469 * u_437[bop_449] in
                        let bop_472 = arg_412[j_448] - bop_470 in
                        let letwith_dst_10 = uu_438 with [j_448] <- val_460 in
                        let bop_474 = <comb_cert_362>arg_419[j_448] * <comb_cert_362>arg_413[j_448] in
                        let bop_475 = 0.5 * <comb_cert_362>arg_420[j_448] in
                        let bop_476 = bop_475 * <comb_cert_362>arg_416[j_448] in
                        let bop_477 = bop_474 + bop_476 in
                        let bop_478 = 0.5 * bop_477 in
                        let negate_479 = -bop_478 in
                        let bop_480 = negate_479 * letwith_dst_10[j_448] in
                        let bop_482 = 0.5 * <comb_cert_362>arg_420[j_448] in
                        let bop_483 = bop_482 * <comb_cert_362>arg_417[j_448] in
                        let bop_486 = <comb_cert_362>arg_419[j_448] * <comb_cert_362>arg_414[j_448] in
                        let bop_488 = bop_486 + bop_483 in
                        let bop_490 = 0.5 * bop_488 in
                        let bop_491 = dtInv_364 - bop_490 in
                        let bop_498 = bop_491 - bop_480 in
                        let bet_500 = 1.0 / bop_498 in
                        let val_502 = bop_472 * bet_500 in
                        let letwith_dst_109 = u_437 with [j_448] <- val_502 in
                        {letwith_dst_109, letwith_dst_10, bet_500} in
                      // u_440 aliases u_437
                      loop (u_440 = u_437) = for j_441 < 31 do
                        let j_442 = 30 - j_441 in
                        let bop_443 = j_442 + 1 in
                        let bop_444 = uu_438[bop_443] * u_440[bop_443] in
                        let val_445 = u_440[j_442] - bop_444 in
                        let letwith_dst_110 = u_440 with [j_442] <- val_445 in
                        letwith_dst_110 in
                      {u_440},
                    untuple_410, tmp_repl_89, tmp_repl_92, tmp_repl_95,
                    tmp_repl_123, tmp_repl_126, tmp_repl_133,
                    transpose(soac_v_323), transpose(soac_v_324)) in
             let tmp_size_512 = size(1, untuple_506) in
             let tmp_e_513 = tmp_size_512 = 32 in
             let zip_assert_514 = assert(tmp_e_513) in
             let tmp_size_517 = <zip_assert_514>size(1, soac_v_325) in
             let tmp_e_525 = 16 = tmp_size_517 in
             let zip_assert_529 = assert(tmp_e_525) in
             let tmp_size_531 = <zip_assert_514>size(1, soac_v_326) in
             let tmp_e_532 = tmp_size_517 = tmp_size_531 in
             let zip_assert_537 = assert(tmp_e_532) in
             let comb_cert_539 = conjoin(zip_assert_211, zip_assert_225,
                                         zip_assert_228, zip_assert_514,
                                         zip_assert_529, zip_assert_537) in
             let {untuple_775} =
               <zip_assert_514>
               mapT(fn {*[real]} ([real] arg_546, [real] arg_547,
                                  [real] arg_548, [real] arg_552,
                                  [real] arg_553, [real] arg_554,
                                  [real] arg_558, [real] arg_559,
                                  [real] arg_560, [real] arg_561) =>
                      let tmp_repl_562 = replicate(16, 0.0) in
                      let tmp_repl_563 = replicate(16, 0.0) in
                      // u_564 aliases tmp_repl_562
                      // uu_565 aliases tmp_repl_563
                      let {u_564, uu_565} = {tmp_repl_562, tmp_repl_563} in
                      let bop_566 = 0.5 * <comb_cert_539>arg_561[0] in
                      let bop_567 = bop_566 * <comb_cert_539>arg_558[0] in
                      let bop_568 = <comb_cert_539>arg_560[0] * <comb_cert_539>arg_552[0] in
                      let bop_569 = bop_568 + bop_567 in
                      let bop_570 = 0.5 * bop_569 in
                      let bop_573 = dtInv_364 - bop_570 in
                      let bet_577 = 1.0 / bop_573 in
                      let bop_582 = dtInv_364 * arg_546[0] in
                      let bop_584 = 0.5 * arg_547[0] in
                      let val_585 = bop_582 - bop_584 in
                      let val_598 = val_585 * bet_577 in
                      let letwith_dst_115 = u_564 with [0] <- val_598 in
                      // u_601 aliases letwith_dst_115
                      // uu_602 aliases uu_565, tmp_repl_563
                      loop ({u_601, uu_602, bet_605} = {letwith_dst_115,
                                                        tmp_repl_563,
                                                        bet_577}) = for j_643 < 15 do
                        let j_644 = j_643 + 1 in
                        let bop_646 = j_644 - 1 in
                        let bop_648 = 0.5 * <comb_cert_539>arg_561[bop_646] in
                        let bop_649 = bop_648 * <comb_cert_539>arg_559[bop_646] in
                        let bop_650 = <comb_cert_539>arg_560[bop_646] * <comb_cert_539>arg_553[bop_646] in
                        let bop_651 = bop_650 + bop_649 in
                        let bop_652 = 0.5 * bop_651 in
                        let negate_657 = -bop_652 in
                        let val_658 = negate_657 * bet_605 in
                        let bop_659 = <comb_cert_539>arg_560[j_644] * <comb_cert_539>arg_548[j_644] in
                        let bop_662 = 0.5 * <comb_cert_539>arg_561[j_644] in
                        let bop_663 = bop_662 * <comb_cert_539>arg_554[j_644] in
                        let bop_665 = bop_659 + bop_663 in
                        let bop_669 = 0.5 * bop_665 in
                        let negate_670 = -bop_669 in
                        let bop_671 = negate_670 * u_601[bop_646] in
                        let bop_673 = dtInv_364 * arg_546[j_644] in
                        let bop_674 = 0.5 * arg_547[j_644] in
                        let val_675 = bop_673 - bop_674 in
                        let bop_677 = val_675 - bop_671 in
                        let letwith_dst_120 = uu_602 with [j_644] <- val_658 in
                        let bop_680 = <comb_cert_539>arg_560[j_644] * <comb_cert_539>arg_548[j_644] in
                        let bop_681 = 0.5 * <comb_cert_539>arg_561[j_644] in
                        let bop_686 = bop_681 * <comb_cert_539>arg_554[j_644] in
                        let bop_688 = bop_680 + bop_686 in
                        let bop_690 = 0.5 * bop_688 in
                        let negate_692 = -bop_690 in
                        let bop_697 = negate_692 * letwith_dst_120[j_644] in
                        let bop_701 = 0.5 * <comb_cert_539>arg_561[j_644] in
                        let bop_702 = bop_701 * <comb_cert_539>arg_558[j_644] in
                        let bop_703 = <comb_cert_539>arg_560[j_644] * <comb_cert_539>arg_552[j_644] in
                        let bop_720 = bop_703 + bop_702 in
                        let bop_721 = 0.5 * bop_720 in
                        let bop_770 = dtInv_364 - bop_721 in
                        let bop_771 = bop_770 - bop_697 in
                        let bet_772 = 1.0 / bop_771 in
                        let val_773 = bop_677 * bet_772 in
                        let letwith_dst_121 = u_601 with [j_644] <- val_773 in
                        {letwith_dst_121, letwith_dst_120, bet_772} in
                      // u_609 aliases u_601
                      loop (u_609 = u_601) = for j_617 < 15 do
                        let j_619 = 14 - j_617 in
                        let bop_622 = j_619 + 1 in
                        let bop_623 = uu_602[bop_622] * u_609[bop_622] in
                        let val_624 = u_609[j_619] - bop_623 in
                        let letwith_dst_122 = u_609 with [j_619] <- val_624 in
                        letwith_dst_122 in
                      {u_609},
                    transpose(untuple_506), untuple_352, tmp_repl_253,
                    tmp_repl_256, tmp_repl_259, tmp_repl_286, tmp_repl_291,
                    tmp_repl_294, soac_v_325, soac_v_326) in
             {untuple_775, soac_v_323, soac_v_324, soac_v_325, soac_v_326} in
           {myResult_298[3, 8]},
         untuple_7) in
  untuple_776
