fun real main() =
  let {tup_arr_cert_0, tup_arr_elem_1, tup_arr_elem_2, tup_arr_elem_3,
       tup_arr_elem_4} =
    {Checked,
     [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0,
      30.0],
     [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0,
      2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0,
      3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0,
      5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0,
      7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0,
      8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
      9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
      10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 15.0, 15.0, 15.0, 15.0, 15.0,
      15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 20.0, 20.0, 20.0,
      20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 25.0,
      25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,
      25.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0,
      30.0, 30.0, 30.0],
     [1.052, 0.81485, 0.6165, 0.46995, 0.38295, 0.3325, 0.3016, 0.2815, 0.26435,
      0.2496, 0.2516, 0.28835, 0.27155, 0.23465, 0.61445, 0.54805, 0.46795,
      0.3919, 0.3434, 0.3083, 0.28655, 0.2697, 0.25775, 0.2443, 0.26495,
      0.28195, 0.26845, 0.20995, 0.5835, 0.49255, 0.42825, 0.3695, 0.329,
      0.3022, 0.28165, 0.26615, 0.25485, 0.24375, 0.2718, 0.28135, 0.26865,
      0.2131, 0.5415, 0.46235, 0.403, 0.3559, 0.3232, 0.29675, 0.27715, 0.26385,
      0.254, 0.2454, 0.27845, 0.2821, 0.2678, 0.2131, 0.517, 0.446, 0.3903,
      0.34755, 0.3166, 0.29305, 0.2745, 0.2639, 0.2534, 0.2499, 0.28315, 0.2825,
      0.277, 0.21175, 0.478, 0.42105, 0.37715, 0.3378, 0.311, 0.2895, 0.2745,
      0.264, 0.2573, 0.25475, 0.28815, 0.28195, 0.26015, 0.2097, 0.452, 0.4074,
      0.368, 0.3307, 0.30645, 0.2877, 0.27475, 0.2664, 0.26155, 0.26035, 0.292,
      0.2825, 0.25685, 0.2081, 0.43395, 0.39445, 0.35885, 0.3281, 0.30395,
      0.28745, 0.2767, 0.27065, 0.26625, 0.26625, 0.2921, 0.2814, 0.25265,
      0.2083, 0.42285, 0.3857, 0.3521, 0.3239, 0.30285, 0.2895, 0.2799, 0.27485,
      0.2712, 0.27205, 0.29205, 0.27855, 0.24945, 0.219, 0.41765, 0.38095,
      0.34795, 0.3217, 0.30365, 0.2916, 0.2842, 0.27985, 0.2769, 0.2775, 0.306,
      0.2763, 0.2458, 0.22, 0.37905, 0.35465, 0.33505, 0.31725, 0.3008, 0.29075,
      0.28365, 0.2787, 0.27385, 0.2709, 0.2689, 0.24225, 0.2096, 0.18285,
      0.37975, 0.3605, 0.3407, 0.321, 0.3063, 0.29315, 0.28395, 0.2777, 0.27205,
      0.26675, 0.24875, 0.21735, 0.1939, 0.17205, 0.38115, 0.3627, 0.34425,
      0.3222, 0.3084, 0.2941, 0.28285, 0.2751, 0.2663, 0.26055, 0.2338, 0.20735,
      0.1823, 0.1686, 0.38285, 0.3633, 0.34125, 0.3188, 0.30305, 0.2888, 0.2748,
      0.26725, 0.25985, 0.25165, 0.2267, 0.1989, 0.18115, 0.16355]} in
  let tmp_lit_5 = [0.0, 0.6568095668820999, -0.6568095668820998,
                   -1.3265570844949335, 1.326557084494933, 2.025948015825757,
                   -2.025948015825756, -2.7832900997816497, 2.7832900997816474,
                   3.6684708465595857, -3.668470846559584] in
  let norm_6 = [0.6547592869145917, 0.6609604194409607, 0.6609604194409606,
                0.6812118810666693, 0.681211881066669, 0.7219536247283848,
                0.7219536247283852, 0.8025168688510406, 0.8025168688510397,
                1.0065267861723648, 1.0065267861723775] in
  let {untuple_3586} =
    mapT(fn {real} (real arg_7, real arg_8, real arg_9, real arg_10) =>
           let bop_11 = 12.0 * arg_9 in
           let val_12 = bop_11 / arg_8 in
           let tmp_call_13 = trunc(val_12) in
           let val_14 = replicate(tmp_call_13, 0.0) in
           let val_15 = replicate(tmp_call_13, 0.0) in
           let bop_16 = tmp_call_13 - 1 in
           let bop_17 = tmp_call_13 = 1 in
           let val_18 = replicate(tmp_call_13, 0.0) in
           let val_19 = arg_7 * 12.0 in
           let nbmonths_20 = trunc(val_19) in
           let m_21 = 1 + nbmonths_20 in
           let val_334 = m_21 - 1 in
           let bop_709 = val_334 / 12 in
           let bop_710 = bop_709 * 12 in
           let bop_942 = 2012 + bop_709 in
           let bop_943 = bop_942 - 1 in
           let tmp_bop_1090 = val_334 - bop_710 in
           let bop_1093 = tmp_bop_1090 + 1 in
           let bop_1297 = bop_1093 <= 0 in
           let bop_1300 = bop_1093 + 12 in
           let {y_1504, m_1507} =
             if bop_1297
             then {bop_943, bop_1300}
             else {bop_942, bop_1093} in
           let bop_1598 = y_1504 / 4 in
           let bop_1599 = bop_1598 * 4 in
           let bop_1607 = y_1504 / 100 in
           let bop_1608 = bop_1607 * 100 in
           let bop_1609 = y_1504 / 400 in
           let bop_1612 = bop_1609 * 400 in
           let bop_1613 = m_1507 = 2 in
           let bop_1617 = m_1507 = 4 in
           let bop_1618 = m_1507 = 6 in
           let bop_1619 = m_1507 = 9 in
           let bop_1622 = m_1507 = 11 in
           let bop_1623 = m_1507 = 1 in
           let norm_1624 = bop_1623 || bop_1613 in
           let bop_1625 = y_1504 + 4800 in
           let bop_1640 = bop_1625 - 1 in
           let bop_1641 = 1461 * bop_1640 in
           let bop_1642 = bop_1641 / 4 in
           let bop_1644 = 1461 * bop_1625 in
           let bop_1650 = bop_1644 / 4 in
           let bop_1652 = m_1507 + 10 in
           let bop_1653 = 367 * bop_1652 in
           let bop_1654 = bop_1653 / 12 in
           let bop_1655 = bop_1642 + bop_1654 in
           let bop_1662 = y_1504 + 4900 in
           let bop_1665 = bop_1662 - 1 in
           let bop_1667 = bop_1665 / 100 in
           let bop_1668 = 3 * bop_1667 in
           let bop_1669 = bop_1668 / 4 in
           let bop_1670 = bop_1655 - bop_1669 in
           let bop_1672 = bop_1662 / 100 in
           let bop_1673 = 3 * bop_1672 in
           let bop_1674 = bop_1673 / 4 in
           let bop_1675 = m_1507 - 2 in
           let bop_1676 = 367 * bop_1675 in
           let bop_1677 = bop_1676 / 12 in
           let bop_1678 = bop_1650 + bop_1677 in
           let bop_1681 = bop_1678 - bop_1674 in
           let ym_1682 =
             if norm_1624
             then bop_1670
             else bop_1681 in
           let tmp_bop_1683 = y_1504 - bop_1599 in
           let bop_1684 = tmp_bop_1683 = 0 in
           let tmp_bop_1685 = y_1504 - bop_1608 in
           let bop_1688 = tmp_bop_1685 = 0 in
           let not_1689 = not bop_1688 in
           let tmp_bop_1692 = y_1504 - bop_1612 in
           let bop_1693 = tmp_bop_1692 = 0 in
           let norm_1694 = not_1689 || bop_1693 in
           let tmp_and_1696 = bop_1684 && norm_1694 in
           let norm_1699 = bop_1613 && tmp_and_1696 in
           let val_1706 =
             if norm_1699
             then 29
             else if bop_1613
                  then 28
                  else let norm_1700 = bop_1617 || bop_1618 in
                       let norm_1701 = norm_1700 || bop_1619 in
                       let norm_1703 = norm_1701 || bop_1622 in
                       if norm_1703
                       then 30
                       else 31 in
           let bop_1707 = 1 < val_1706 in
           let tmp_lit_1708 =
             if bop_1707
             then 1
             else val_1706 in
           let bop_1714 = ym_1682 + tmp_lit_1708 in
           let bop_1715 = bop_1714 - 32075 in
           let tmp_1717 = bop_1715 - 2444238 in
           let bop_1718 = tmp_1717 * 1440 in
           let resmin_1719 = bop_1718 + 720 in
           let tmp_call_1720 = toReal(resmin_1719) in
           let bop_1721 = tmp_call_1720 - 16834320.0 in
           let tmp_bop_1722 = bop_1721 / 1440.0 in
           let tmat0_1725 = tmp_bop_1722 / 365.0 in
           let bop_1726 = 0.02453 * tmat0_1725 in
           let val_1727 = -bop_1726 in
           let tmp_call_1728 = exp(val_1727) in
           let bop_1729 = 1.0 - tmp_call_1728 in
           let bop_1730 = 0.858792992801827 * bop_1729 in
           let ba_1731 = bop_1729 / 0.02453 in
           let bop_1732 = 81.53281695882593 * tmp_call_1728 in
           let exp2xtau_1733 = tmp_call_1728 * tmp_call_1728 in
           let bop_1734 = 20.383204239706483 * exp2xtau_1733 in
           let bop_1735 = 0.98376 * tmat0_1725 in
           let val_1736 = -bop_1735 in
           let tmp_call_1737 = exp(val_1736) in
           let bop_1740 = 1.0 - tmp_call_1737 in
           let bop_1741 = -0.08240592094585045 * bop_1740 in
           let bb_1744 = bop_1740 / 0.98376 in
           let bop_1745 = 2.033016182808815 * tmp_call_1737 in
           let exp2xtau_1746 = tmp_call_1737 * tmp_call_1737 in
           let bop_1748 = 0.5082540457022038 * exp2xtau_1746 in
           let val_1751 = val_1736 - bop_1726 in
           let tmp_call_1752 = exp(val_1751) in
           let val_1753 = val_1727 - bop_1735 in
           let tmp_call_1755 = exp(val_1753) in
           let bop_1758 = tmat0_1725 + bop_1732 in
           let bop_1759 = bop_1758 - bop_1734 in
           let bop_1760 = bop_1759 - 61.149612719119446 in
           let t1_1766 = 0.9556596754408898 * bop_1760 in
           let bop_1767 = tmat0_1725 + bop_1745 in
           let bop_1777 = bop_1767 - bop_1748 in
           let bop_1787 = bop_1777 - 1.5247621371066113 in
           let t2_1788 = 0.014460761693212401 * bop_1787 in
           let bop_1802 = t1_1766 + t2_1788 in
           let bop_1804 = 1.00829 * tmat0_1725 in
           let val_1805 = -bop_1804 in
           let tmp_call_1806 = exp(val_1805) in
           let bop_1813 = 1.0 - tmp_call_1806 in
           let tmp_bop_1815 = bop_1813 / 1.00829 in
           let bop_1818 = tmat0_1725 - ba_1731 in
           let bop_1819 = bop_1818 - bb_1744 in
           let bop_1822 = bop_1819 + tmp_bop_1815 in
           let t3_1827 = -0.19373336527812574 * bop_1822 in
           let bop_1829 = bop_1802 + t3_1827 in
           let bop_1830 = 0.03 * tmat0_1725 in
           let val_1831 = -bop_1830 in
           let tmp_call_1832 = exp(val_1831) in
           let bop_1834 = 0.04906 * tmat0_1725 in
           let val_1837 = -bop_1834 in
           let tmp_call_1838 = exp(val_1837) in
           let bop_1840 = 1.0 - tmp_call_1838 in
           let val_1841 = bop_1840 / 0.04906 in
           let tmp_call_1843 = sqrt(val_1841) in
           let sigmax_1844 = 0.02398 * tmp_call_1843 in
           let eps_1845 = 0.5 * sigmax_1844 in
           let sqrt2sigmax_1846 = 1.4142135623730951 * sigmax_1844 in
           let bop_1847 = 1.96752 * tmat0_1725 in
           let val_1848 = -bop_1847 in
           let tmp_call_1849 = exp(val_1848) in
           let bop_1850 = 1.0 - tmp_call_1849 in
           let val_1851 = bop_1850 / 1.96752 in
           let tmp_call_1852 = sqrt(val_1851) in
           let sigmay_1853 = 0.1183 * tmp_call_1852 in
           let bop_1855 = sigmax_1844 * sigmay_1853 in
           let bop_1857 = -0.0023375512159999998 / bop_1855 in
           let rhoxy_1858 = bop_1857 * tmp_bop_1815 in
           let bop_1860 = rhoxy_1858 * rhoxy_1858 in
           let rhoxyc_1862 = 1.0 - bop_1860 in
           let bop_1868 = 0.5 * rhoxyc_1862 in
           let bop_1869 = rhoxyc_1862 / 0.98376 in
           let rhoxycs_1870 = sqrt(rhoxyc_1862) in
           let bop_1871 = sigmax_1844 * rhoxycs_1870 in
           let bop_1872 = -3.71901648545568 * rhoxycs_1870 in
           let t2_1876 = rhoxy_1858 / bop_1871 in
           let bop_1877 = rhoxy_1858 * sigmay_1853 in
           let t4_1878 = bop_1877 / sigmax_1844 in
           let bop_1879 = bop_1868 * sigmay_1853 in
           let bop_1880 = bop_1879 * sigmay_1853 in
           let sigmay_rhoxycs_1881 = sigmay_1853 * rhoxycs_1870 in
           let bop_1882 = tmat0_1725 + tmat0_1725 in
           let bop_1883 = 0.02453 * bop_1882 in
           let val_1884 = -bop_1883 in
           let tmp_call_1885 = exp(val_1884) in
           let bop_1886 = 0.98376 * bop_1882 in
           let val_1887 = -bop_1886 in
           let tmp_call_1888 = exp(val_1887) in
           let val_1889 = trunc(tmp_call_1720) in
           let jul_1890 = val_1889 / 1440 in
           let bop_1891 = jul_1890 + 68569 in
           let l_1892 = bop_1891 + 2444238 in
           let bop_1893 = 4 * l_1892 in
           let n_1894 = bop_1893 / 146097 in
           let bop_1896 = 146097 * n_1894 in
           let bop_1897 = bop_1896 + 3 in
           let bop_1898 = bop_1897 / 4 in
           let bop_1899 = n_1894 - 49 in
           let bop_1900 = 100 * bop_1899 in
           let l_1901 = l_1892 - bop_1898 in
           let bop_1902 = l_1901 + 1 in
           let bop_1905 = 4000 * bop_1902 in
           let i_1906 = bop_1905 / 1461001 in
           let bop_1907 = 1461 * i_1906 in
           let bop_1913 = bop_1907 / 4 in
           let bop_1914 = bop_1900 + i_1906 in
           let bop_1915 = l_1901 - bop_1913 in
           let l_1916 = bop_1915 + 31 in
           let bop_1917 = 80 * l_1916 in
           let j_1918 = bop_1917 / 2447 in
           let bop_1919 = 2447 * j_1918 in
           let bop_1920 = bop_1919 / 80 in
           let bop_1921 = j_1918 + 2 in
           let l_1922 = j_1918 / 11 in
           let bop_1924 = 12 * l_1922 in
           let m_1925 = bop_1921 - bop_1924 in
           let y_1926 = bop_1914 + l_1922 in
           let d_1936 = l_1916 - bop_1920 in
           let bop_1937 = jul_1890 * 1440 in
           let daytime_1938 = val_1889 - bop_1937 in
           let bop_1939 = daytime_1938 = 720 in
           let bop_1940 = daytime_1938 / 60 in
           let bop_1941 = bop_1940 * 60 in
           let tmp_lit_1942 = daytime_1938 - bop_1941 in
           let {y_1943, m_1944, d_1945, h_1946, min_1947} =
             if bop_1939
             then {y_1926, m_1925, d_1936, 12, 0}
             else {y_1926, m_1925, d_1936, bop_1940, tmp_lit_1942} in
           let bop_1948 = tmp_call_1720 - tmp_call_1720 in
           let tmp_bop_1949 = bop_1948 / 1440.0 in
           let tmatt_1950 = tmp_bop_1949 / 365.0 in
           let bop_1951 = 0.02453 * tmatt_1950 in
           let val_1952 = -bop_1951 in
           let tmp_call_1953 = exp(val_1952) in
           let tmp5_1958 = tmp_call_1953 - tmp_call_1885 in
           let bop_1959 = 0.4778298377204449 * tmp5_1958 in
           let bop_1960 = bop_1730 - bop_1959 in
           let tmp6_1961 = tmp_call_1953 - tmp_call_1755 in
           let bop_1962 = -0.09451007915679466 * tmp6_1961 in
           let bop_1963 = 0.98376 * tmatt_1950 in
           let val_1964 = -bop_1963 in
           let tmp_call_1965 = exp(val_1964) in
           let tmp6_1972 = tmp_call_1965 - tmp_call_1752 in
           let bop_1973 = -0.0023566034822682085 * tmp6_1972 in
           let tmp_neg_1974 = bop_1960 - bop_1973 in
           let mux_1975 = -tmp_neg_1974 in
           let bop_1977 = mux_1975 * t4_1878 in
           let bop_1978 = mux_1975 - mux_1975 in
           let bop_1979 = rhoxy_1858 * bop_1978 in
           let val_1980 = mux_1975 + eps_1845 in
           let bop_1981 = val_1980 - mux_1975 in
           let bop_1983 = rhoxy_1858 * bop_1981 in
           let val_1984 = mux_1975 - eps_1845 in
           let bop_1985 = val_1984 - mux_1975 in
           let bop_1986 = rhoxy_1858 * bop_1985 in
           let tmp5_1987 = tmp_call_1965 - tmp_call_1888 in
           let bop_1988 = 0.007230380846606201 * tmp5_1987 in
           let bop_1989 = bop_1741 - bop_1988 in
           let tmp_neg_1990 = bop_1989 - bop_1962 in
           let muy_1991 = -tmp_neg_1990 in
           let val_1999 =
             if norm_1699
             then 29
             else if bop_1613
                  then 28
                  else let norm_1992 = bop_1617 || bop_1618 in
                       let norm_1996 = norm_1992 || bop_1619 in
                       let norm_1997 = norm_1996 || bop_1622 in
                       if norm_1997
                       then 30
                       else 31 in
           let bop_2000 = 1 < val_1999 in
           let tmp_lit_2004 =
             if bop_2000
             then 1
             else val_1999 in
           let bop_2007 = ym_1682 + tmp_lit_2004 in
           let bop_2009 = bop_2007 - 32075 in
           let tmp_2012 = bop_2009 - 2444238 in
           let bop_2013 = tmp_2012 * 1440 in
           let resmin_2014 = bop_2013 + 720 in
           let tmp_call_2015 = toReal(resmin_2014) in
           let bop_2016 = tmp_call_2015 - 16834320.0 in
           let tmp_bop_2017 = bop_2016 / 1440.0 in
           let sqrtt_2018 = tmp_bop_2017 / 365.0 in
           let bop_2019 = arg_10 * sqrtt_2018 in
           let val_2020 = trunc(tmp_call_2015) in
           let jul_2021 = val_2020 / 1440 in
           let bop_2022 = jul_2021 + 68569 in
           let l_2024 = bop_2022 + 2444238 in
           let bop_2032 = 4 * l_2024 in
           let n_2033 = bop_2032 / 146097 in
           let bop_2034 = 146097 * n_2033 in
           let bop_2035 = bop_2034 + 3 in
           let bop_2036 = bop_2035 / 4 in
           let bop_2037 = n_2033 - 49 in
           let bop_2038 = 100 * bop_2037 in
           let l_2041 = l_2024 - bop_2036 in
           let bop_2042 = l_2041 + 1 in
           let bop_2044 = 4000 * bop_2042 in
           let i_2045 = bop_2044 / 1461001 in
           let bop_2046 = 1461 * i_2045 in
           let bop_2047 = bop_2046 / 4 in
           let bop_2048 = bop_2038 + i_2045 in
           let bop_2049 = l_2041 - bop_2047 in
           let l_2050 = bop_2049 + 31 in
           let bop_2053 = 80 * l_2050 in
           let j_2054 = bop_2053 / 2447 in
           let bop_2055 = 2447 * j_2054 in
           let bop_2056 = bop_2055 / 80 in
           let bop_2060 = j_2054 + 2 in
           let l_2062 = j_2054 / 11 in
           let bop_2063 = 12 * l_2062 in
           let m_2064 = bop_2060 - bop_2063 in
           let y_2065 = bop_2048 + l_2062 in
           let d_2067 = l_2050 - bop_2056 in
           let bop_2070 = jul_2021 * 1440 in
           let daytime_2071 = val_2020 - bop_2070 in
           let bop_2072 = daytime_2071 = 720 in
           let bop_2074 = daytime_2071 / 60 in
           let bop_2075 = bop_2074 * 60 in
           let tmp_lit_2076 = daytime_2071 - bop_2075 in
           let {y_2077, m_2078, d_2079, h_2080, min_2081} =
             if bop_2072
             then {y_2065, m_2064, d_2067, 12, 0}
             else {y_2065, m_2064, d_2067, bop_2074, tmp_lit_2076} in
           let bop_2082 = 0.5 * arg_10 in
           let bop_2083 = bop_2082 * sqrtt_2018 in
           let nbmonths_2084 = trunc(arg_8) in
           let {soac_v_2296, soac_v_2297} =
             mapT(fn {real, real} (int i_2085) =>
                    let tmp_call_2086 = toReal(i_2085) in
                    let val_2087 = tmp_call_2086 * arg_8 in
                    let nbmonths_2088 = trunc(val_2087) in
                    let m_2089 = m_2078 + nbmonths_2088 in
                    let val_2090 = m_2089 - 1 in
                    let bop_2091 = val_2090 / 12 in
                    let bop_2092 = bop_2091 * 12 in
                    let bop_2093 = y_2077 + bop_2091 in
                    let bop_2094 = bop_2093 - 1 in
                    let tmp_bop_2095 = val_2090 - bop_2092 in
                    let bop_2096 = tmp_bop_2095 + 1 in
                    let bop_2097 = bop_2096 <= 0 in
                    let bop_2098 = bop_2096 + 12 in
                    let {y_2099, m_2100} =
                      if bop_2097
                      then {bop_2094, bop_2098}
                      else {bop_2093, bop_2096} in
                    let bop_2101 = y_2099 / 4 in
                    let bop_2102 = bop_2101 * 4 in
                    let bop_2103 = y_2099 / 100 in
                    let bop_2104 = bop_2103 * 100 in
                    let bop_2105 = y_2099 / 400 in
                    let bop_2106 = bop_2105 * 400 in
                    let bop_2107 = m_2100 = 2 in
                    let bop_2110 = m_2100 = 4 in
                    let bop_2111 = m_2100 = 6 in
                    let bop_2112 = m_2100 = 9 in
                    let bop_2113 = m_2100 = 11 in
                    let bop_2117 = m_2100 = 1 in
                    let norm_2118 = bop_2117 || bop_2107 in
                    let bop_2119 = y_2099 + 4800 in
                    let bop_2123 = bop_2119 - 1 in
                    let bop_2125 = 1461 * bop_2123 in
                    let bop_2126 = bop_2125 / 4 in
                    let bop_2127 = 1461 * bop_2119 in
                    let bop_2128 = bop_2127 / 4 in
                    let bop_2129 = m_2100 + 10 in
                    let bop_2130 = 367 * bop_2129 in
                    let bop_2131 = bop_2130 / 12 in
                    let bop_2132 = bop_2126 + bop_2131 in
                    let bop_2133 = y_2099 + 4900 in
                    let bop_2134 = bop_2133 - 1 in
                    let bop_2135 = bop_2134 / 100 in
                    let bop_2138 = 3 * bop_2135 in
                    let bop_2140 = bop_2138 / 4 in
                    let bop_2141 = bop_2132 - bop_2140 in
                    let bop_2145 = bop_2133 / 100 in
                    let bop_2146 = 3 * bop_2145 in
                    let bop_2147 = bop_2146 / 4 in
                    let bop_2153 = m_2100 - 2 in
                    let bop_2154 = 367 * bop_2153 in
                    let bop_2155 = bop_2154 / 12 in
                    let bop_2156 = bop_2128 + bop_2155 in
                    let bop_2159 = bop_2156 - bop_2147 in
                    let ym_2160 =
                      if norm_2118
                      then bop_2141
                      else bop_2159 in
                    let tmp_bop_2161 = y_2099 - bop_2106 in
                    let bop_2162 = tmp_bop_2161 = 0 in
                    let tmp_bop_2163 = y_2099 - bop_2104 in
                    let bop_2164 = tmp_bop_2163 = 0 in
                    let not_2165 = not bop_2164 in
                    let norm_2166 = not_2165 || bop_2162 in
                    let tmp_bop_2167 = y_2099 - bop_2102 in
                    let bop_2168 = tmp_bop_2167 = 0 in
                    let tmp_and_2169 = bop_2168 && norm_2166 in
                    let norm_2170 = bop_2107 && tmp_and_2169 in
                    let val_2174 =
                      if norm_2170
                      then 29
                      else if bop_2107
                           then 28
                           else let norm_2171 = bop_2110 || bop_2111 in
                                let norm_2172 = norm_2171 || bop_2112 in
                                let norm_2173 = norm_2172 || bop_2113 in
                                if norm_2173
                                then 30
                                else 31 in
                    let bop_2175 = d_2079 < val_2174 in
                    let tmp_lit_2176 =
                      if bop_2175
                      then d_2079
                      else val_2174 in
                    let bop_2177 = ym_2160 + tmp_lit_2176 in
                    let bop_2178 = bop_2177 - 32075 in
                    let tmp_2179 = bop_2178 - 2444238 in
                    let bop_2180 = tmp_2179 * 1440 in
                    let resmin_2181 = bop_2180 + 720 in
                    let tmp_call_2182 = toReal(resmin_2181) in
                    let val_2183 = trunc(tmp_call_2182) in
                    let jul_2184 = val_2183 / 1440 in
                    let bop_2185 = jul_2184 + 68569 in
                    let l_2186 = bop_2185 + 2444238 in
                    let bop_2187 = 4 * l_2186 in
                    let n_2188 = bop_2187 / 146097 in
                    let bop_2189 = 146097 * n_2188 in
                    let bop_2190 = bop_2189 + 3 in
                    let bop_2191 = bop_2190 / 4 in
                    let bop_2192 = n_2188 - 49 in
                    let bop_2193 = 100 * bop_2192 in
                    let l_2194 = l_2186 - bop_2191 in
                    let bop_2195 = l_2194 + 1 in
                    let bop_2196 = 4000 * bop_2195 in
                    let i_2197 = bop_2196 / 1461001 in
                    let bop_2198 = 1461 * i_2197 in
                    let bop_2199 = bop_2198 / 4 in
                    let bop_2200 = bop_2193 + i_2197 in
                    let bop_2201 = l_2194 - bop_2199 in
                    let l_2202 = bop_2201 + 31 in
                    let bop_2203 = 80 * l_2202 in
                    let j_2204 = bop_2203 / 2447 in
                    let bop_2205 = 2447 * j_2204 in
                    let bop_2206 = bop_2205 / 80 in
                    let bop_2207 = j_2204 + 2 in
                    let l_2208 = j_2204 / 11 in
                    let bop_2209 = 12 * l_2208 in
                    let m_2210 = bop_2207 - bop_2209 in
                    let y_2211 = bop_2200 + l_2208 in
                    let d_2212 = l_2202 - bop_2206 in
                    let bop_2213 = jul_2184 * 1440 in
                    let daytime_2214 = val_2183 - bop_2213 in
                    let bop_2215 = daytime_2214 = 720 in
                    let bop_2216 = daytime_2214 / 60 in
                    let bop_2217 = bop_2216 * 60 in
                    let tmp_lit_2218 = daytime_2214 - bop_2217 in
                    let {y_2219, m_2220, d_2221, h_2222, min_2223} =
                      if bop_2215
                      then {y_2211, m_2210, d_2212, 12, 0}
                      else {y_2211, m_2210, d_2212, bop_2216, tmp_lit_2218} in
                    let m_2224 = m_2220 + nbmonths_2084 in
                    let val_2225 = m_2224 - 1 in
                    let bop_2226 = val_2225 / 12 in
                    let bop_2227 = bop_2226 * 12 in
                    let tmp_bop_2228 = val_2225 - bop_2227 in
                    let bop_2229 = tmp_bop_2228 + 1 in
                    let bop_2230 = bop_2229 <= 0 in
                    let bop_2231 = bop_2229 + 12 in
                    let bop_2232 = y_2219 + bop_2226 in
                    let bop_2233 = bop_2232 - 1 in
                    let {y_2234, m_2235} =
                      if bop_2230
                      then {bop_2233, bop_2231}
                      else {bop_2232, bop_2229} in
                    let bop_2236 = y_2234 / 4 in
                    let bop_2237 = bop_2236 * 4 in
                    let bop_2238 = y_2234 / 100 in
                    let bop_2239 = bop_2238 * 100 in
                    let bop_2240 = y_2234 / 400 in
                    let bop_2241 = bop_2240 * 400 in
                    let bop_2242 = m_2235 = 2 in
                    let bop_2243 = m_2235 = 4 in
                    let bop_2244 = m_2235 = 6 in
                    let bop_2245 = m_2235 = 9 in
                    let bop_2246 = m_2235 = 11 in
                    let bop_2247 = m_2235 = 1 in
                    let norm_2248 = bop_2247 || bop_2242 in
                    let bop_2249 = y_2234 + 4800 in
                    let bop_2250 = bop_2249 - 1 in
                    let bop_2251 = 1461 * bop_2250 in
                    let bop_2252 = bop_2251 / 4 in
                    let bop_2253 = 1461 * bop_2249 in
                    let bop_2254 = bop_2253 / 4 in
                    let bop_2255 = m_2235 + 10 in
                    let bop_2256 = 367 * bop_2255 in
                    let bop_2257 = bop_2256 / 12 in
                    let bop_2258 = bop_2252 + bop_2257 in
                    let bop_2259 = y_2234 + 4900 in
                    let bop_2260 = bop_2259 - 1 in
                    let bop_2261 = bop_2260 / 100 in
                    let bop_2262 = 3 * bop_2261 in
                    let bop_2263 = bop_2262 / 4 in
                    let bop_2264 = bop_2258 - bop_2263 in
                    let bop_2265 = bop_2259 / 100 in
                    let bop_2266 = 3 * bop_2265 in
                    let bop_2267 = bop_2266 / 4 in
                    let bop_2268 = m_2235 - 2 in
                    let bop_2269 = 367 * bop_2268 in
                    let bop_2270 = bop_2269 / 12 in
                    let bop_2271 = bop_2254 + bop_2270 in
                    let bop_2272 = bop_2271 - bop_2267 in
                    let ym_2273 =
                      if norm_2248
                      then bop_2264
                      else bop_2272 in
                    let tmp_bop_2274 = y_2234 - bop_2241 in
                    let bop_2275 = tmp_bop_2274 = 0 in
                    let tmp_bop_2276 = y_2234 - bop_2239 in
                    let bop_2277 = tmp_bop_2276 = 0 in
                    let not_2278 = not bop_2277 in
                    let norm_2279 = not_2278 || bop_2275 in
                    let tmp_bop_2280 = y_2234 - bop_2237 in
                    let bop_2281 = tmp_bop_2280 = 0 in
                    let tmp_and_2282 = bop_2281 && norm_2279 in
                    let norm_2283 = bop_2242 && tmp_and_2282 in
                    let val_2287 =
                      if norm_2283
                      then 29
                      else if bop_2242
                           then 28
                           else let norm_2284 = bop_2243 || bop_2244 in
                                let norm_2285 = norm_2284 || bop_2245 in
                                let norm_2286 = norm_2285 || bop_2246 in
                                if norm_2286
                                then 30
                                else 31 in
                    let bop_2288 = d_2221 < val_2287 in
                    let tmp_lit_2289 =
                      if bop_2288
                      then d_2221
                      else val_2287 in
                    let bop_2290 = ym_2273 + tmp_lit_2289 in
                    let bop_2291 = bop_2290 - 32075 in
                    let tmp_2292 = bop_2291 - 2444238 in
                    let bop_2293 = tmp_2292 * 1440 in
                    let resmin_2294 = bop_2293 + 720 in
                    let tmp_call_2295 = toReal(resmin_2294) in
                    {tmp_call_2182, tmp_call_2295},
                  iota(tmp_call_13)) in
           let {tmp_red2_2319, tmp_red2_2320, tmp_red2_2321} =
             reduceT(fn {real, real, real} (real arg_2298, real arg_2299,
                                            real arg_2300, real arg_2301,
                                            real arg_2302, real arg_2303) =>
                       let bop_2304 = arg_2303 - 16834320.0 in
                       let tmp_bop_2305 = bop_2304 / 1440.0 in
                       let tmp_bop_2306 = tmp_bop_2305 / 365.0 in
                       let bop_2307 = 0.03 * tmp_bop_2306 in
                       let val_2308 = -bop_2307 in
                       let tmp_call_2309 = exp(val_2308) in
                       let bop_2310 = arg_2303 - arg_2302 in
                       let tmp_bop_2311 = bop_2310 / 1440.0 in
                       let tmp_bop_2312 = tmp_bop_2311 / 365.0 in
                       let bop_2313 = tmp_call_2309 * tmp_bop_2312 in
                       let bop_2314 = arg_2298 + bop_2313 in
                       let bop_2315 = arg_2299 < arg_2302 in
                       let tmp_lit_2316 =
                         if bop_2315
                         then arg_2299
                         else arg_2302 in
                       let bop_2317 = arg_2300 < arg_2303 in
                       let tmp_lit_2318 =
                         if bop_2317
                         then arg_2303
                         else arg_2300 in
                       {bop_2314, tmp_lit_2316, tmp_lit_2318},
                     {0.0, 168307199.0, 3600.0}, val_15, soac_v_2296,
                     soac_v_2297) in
           let bop_2322 = tmp_red2_2320 - 16834320.0 in
           let tmp_bop_2323 = bop_2322 / 1440.0 in
           let tmp_bop_2324 = tmp_bop_2323 / 365.0 in
           let bop_2325 = 0.03 * tmp_bop_2324 in
           let val_2326 = -bop_2325 in
           let tmp_call_2327 = exp(val_2326) in
           let bop_2328 = tmp_red2_2321 - 16834320.0 in
           let tmp_bop_2329 = bop_2328 / 1440.0 in
           let tmp_bop_2330 = tmp_bop_2329 / 365.0 in
           let bop_2331 = 0.03 * tmp_bop_2330 in
           let val_2332 = -bop_2331 in
           let tmp_call_2333 = exp(val_2332) in
           let bop_2334 = tmp_call_2327 - tmp_call_2333 in
           let strike_2335 = bop_2334 / tmp_red2_2319 in
           let {tmp_red2_2357, tmp_red2_2358, tmp_red2_2361} =
             reduceT(fn {real, real, real} (real arg_2336, real arg_2337,
                                            real arg_2338, real arg_2339,
                                            real arg_2340, real arg_2341) =>
                       let bop_2342 = arg_2341 - 16834320.0 in
                       let tmp_bop_2343 = bop_2342 / 1440.0 in
                       let tmp_bop_2344 = tmp_bop_2343 / 365.0 in
                       let bop_2345 = 0.03 * tmp_bop_2344 in
                       let val_2346 = -bop_2345 in
                       let tmp_call_2347 = exp(val_2346) in
                       let bop_2348 = arg_2341 - arg_2340 in
                       let tmp_bop_2349 = bop_2348 / 1440.0 in
                       let tmp_bop_2350 = tmp_bop_2349 / 365.0 in
                       let bop_2351 = tmp_call_2347 * tmp_bop_2350 in
                       let bop_2352 = arg_2336 + bop_2351 in
                       let bop_2353 = arg_2337 < arg_2340 in
                       let tmp_lit_2354 =
                         if bop_2353
                         then arg_2337
                         else arg_2340 in
                       let bop_2355 = arg_2338 < arg_2341 in
                       let tmp_lit_2356 =
                         if bop_2355
                         then arg_2341
                         else arg_2338 in
                       {bop_2352, tmp_lit_2354, tmp_lit_2356},
                     {0.0, 168307199.0, 3600.0}, val_18, soac_v_2296,
                     soac_v_2297) in
           let bop_2362 = tmp_red2_2358 - 16834320.0 in
           let tmp_bop_2363 = bop_2362 / 1440.0 in
           let tmp_bop_2364 = tmp_bop_2363 / 365.0 in
           let bop_2365 = 0.03 * tmp_bop_2364 in
           let val_2366 = -bop_2365 in
           let tmp_call_2367 = exp(val_2366) in
           let bop_2368 = tmp_red2_2361 - 16834320.0 in
           let tmp_bop_2369 = bop_2368 / 1440.0 in
           let tmp_bop_2370 = tmp_bop_2369 / 365.0 in
           let bop_2371 = 0.03 * tmp_bop_2370 in
           let val_2372 = -bop_2371 in
           let tmp_call_2373 = exp(val_2372) in
           let bop_2374 = tmp_call_2367 - tmp_call_2373 in
           let s0_2375 = bop_2374 / tmp_red2_2357 in
           let val_2376 = s0_2375 / strike_2335 in
           let tmp_call_2377 = log(val_2376) in
           let bop_2378 = tmp_call_2377 / bop_2019 in
           let d1_2379 = bop_2378 + bop_2083 in
           let d2_2380 = d1_2379 - bop_2019 in
           let u_2381 = d2_2380 / 1.4142135623730951 in
           let bop_2382 = u_2381 < 0.0 in
           let bop_2383 = 0.3275911 * u_2381 in
           let bop_2384 = 1.0 + bop_2383 in
           let bop_2385 = u_2381 * u_2381 in
           let val_2386 = -bop_2385 in
           let val_2387 = -u_2381 in
           let bop_2388 = 0.3275911 * val_2387 in
           let bop_2389 = 1.0 + bop_2388 in
           let bop_2390 = val_2387 * val_2387 in
           let val_2391 = -bop_2390 in
           let e_2427 =
             if bop_2382
             then let tmp_call_2392 = exp(val_2391) in
                  let t_2393 = 1.0 / bop_2389 in
                  let bop_2394 = 0.254829592 * t_2393 in
                  let t2_2395 = t_2393 * t_2393 in
                  let bop_2396 = -0.284496736 * t2_2395 in
                  let bop_2397 = bop_2394 + bop_2396 in
                  let t4_2398 = t2_2395 * t2_2395 in
                  let bop_2399 = -1.453152027 * t4_2398 in
                  let t3_2400 = t_2393 * t2_2395 in
                  let bop_2401 = 1.421413741 * t3_2400 in
                  let bop_2402 = bop_2397 + bop_2401 in
                  let bop_2403 = bop_2402 + bop_2399 in
                  let t5_2404 = t2_2395 * t3_2400 in
                  let bop_2405 = 1.061405429 * t5_2404 in
                  let bop_2406 = bop_2403 + bop_2405 in
                  let bop_2407 = bop_2406 * tmp_call_2392 in
                  let tmp_neg_2408 = 1.0 - bop_2407 in
                  let negate_2409 = -tmp_neg_2408 in
                  negate_2409
             else let tmp_call_2410 = exp(val_2386) in
                  let t_2411 = 1.0 / bop_2384 in
                  let bop_2412 = 0.254829592 * t_2411 in
                  let t2_2413 = t_2411 * t_2411 in
                  let bop_2414 = -0.284496736 * t2_2413 in
                  let bop_2415 = bop_2412 + bop_2414 in
                  let t4_2416 = t2_2413 * t2_2413 in
                  let bop_2417 = -1.453152027 * t4_2416 in
                  let t3_2418 = t_2411 * t2_2413 in
                  let bop_2419 = 1.421413741 * t3_2418 in
                  let bop_2420 = bop_2415 + bop_2419 in
                  let bop_2421 = bop_2420 + bop_2417 in
                  let t5_2422 = t2_2413 * t3_2418 in
                  let bop_2423 = 1.061405429 * t5_2422 in
                  let bop_2424 = bop_2421 + bop_2423 in
                  let bop_2425 = bop_2424 * tmp_call_2410 in
                  let bop_2426 = 1.0 - bop_2425 in
                  bop_2426 in
           let bop_2428 = 1.0 + e_2427 in
           let tmp_bop_2429 = 0.5 * bop_2428 in
           let bop_2430 = strike_2335 * tmp_bop_2429 in
           let u_2431 = d1_2379 / 1.4142135623730951 in
           let bop_2432 = u_2431 < 0.0 in
           let bop_2433 = 0.3275911 * u_2431 in
           let bop_2434 = 1.0 + bop_2433 in
           let bop_2435 = u_2431 * u_2431 in
           let val_2436 = -bop_2435 in
           let val_2437 = -u_2431 in
           let bop_2438 = 0.3275911 * val_2437 in
           let bop_2439 = 1.0 + bop_2438 in
           let bop_2440 = val_2437 * val_2437 in
           let val_2441 = -bop_2440 in
           let e_2477 =
             if bop_2432
             then let tmp_call_2442 = exp(val_2441) in
                  let t_2443 = 1.0 / bop_2439 in
                  let bop_2444 = 0.254829592 * t_2443 in
                  let t2_2445 = t_2443 * t_2443 in
                  let bop_2446 = -0.284496736 * t2_2445 in
                  let bop_2447 = bop_2444 + bop_2446 in
                  let t4_2448 = t2_2445 * t2_2445 in
                  let bop_2449 = -1.453152027 * t4_2448 in
                  let t3_2450 = t_2443 * t2_2445 in
                  let bop_2451 = 1.421413741 * t3_2450 in
                  let bop_2452 = bop_2447 + bop_2451 in
                  let bop_2453 = bop_2452 + bop_2449 in
                  let t5_2454 = t2_2445 * t3_2450 in
                  let bop_2455 = 1.061405429 * t5_2454 in
                  let bop_2456 = bop_2453 + bop_2455 in
                  let bop_2457 = bop_2456 * tmp_call_2442 in
                  let tmp_neg_2458 = 1.0 - bop_2457 in
                  let negate_2459 = -tmp_neg_2458 in
                  negate_2459
             else let tmp_call_2460 = exp(val_2436) in
                  let t_2461 = 1.0 / bop_2434 in
                  let bop_2462 = 0.254829592 * t_2461 in
                  let t2_2463 = t_2461 * t_2461 in
                  let bop_2464 = -0.284496736 * t2_2463 in
                  let bop_2465 = bop_2462 + bop_2464 in
                  let t4_2466 = t2_2463 * t2_2463 in
                  let bop_2467 = -1.453152027 * t4_2466 in
                  let t3_2468 = t_2461 * t2_2463 in
                  let bop_2469 = 1.421413741 * t3_2468 in
                  let bop_2470 = bop_2465 + bop_2469 in
                  let bop_2471 = bop_2470 + bop_2467 in
                  let t5_2472 = t2_2463 * t3_2468 in
                  let bop_2473 = 1.061405429 * t5_2472 in
                  let bop_2474 = bop_2471 + bop_2473 in
                  let bop_2475 = bop_2474 * tmp_call_2460 in
                  let bop_2476 = 1.0 - bop_2475 in
                  bop_2476 in
           let bop_2478 = 1.0 + e_2477 in
           let tmp_bop_2479 = 0.5 * bop_2478 in
           let bop_2480 = s0_2375 * tmp_bop_2479 in
           let bop_2481 = bop_2480 - bop_2430 in
           let market_price_2482 = tmp_red2_2357 * bop_2481 in
           let {soac_v_2672, soac_v_2673} =
             mapT(fn {real, real} (int i_2483) =>
                    let tmp_call_2484 = toReal(i_2483) in
                    let val_2485 = tmp_call_2484 * arg_8 in
                    let nbmonths_2486 = trunc(val_2485) in
                    let m_2487 = m_1944 + nbmonths_2486 in
                    let val_2488 = m_2487 - 1 in
                    let bop_2489 = val_2488 / 12 in
                    let bop_2490 = bop_2489 * 12 in
                    let bop_2491 = y_1943 + bop_2489 in
                    let bop_2492 = bop_2491 - 1 in
                    let tmp_bop_2493 = val_2488 - bop_2490 in
                    let bop_2494 = tmp_bop_2493 + 1 in
                    let bop_2495 = bop_2494 <= 0 in
                    let bop_2496 = bop_2494 + 12 in
                    let {y_2497, m_2498} =
                      if bop_2495
                      then {bop_2492, bop_2496}
                      else {bop_2491, bop_2494} in
                    let bop_2499 = y_2497 / 4 in
                    let bop_2500 = bop_2499 * 4 in
                    let bop_2501 = y_2497 / 100 in
                    let bop_2502 = bop_2501 * 100 in
                    let bop_2503 = y_2497 / 400 in
                    let bop_2504 = bop_2503 * 400 in
                    let bop_2505 = m_2498 = 2 in
                    let bop_2506 = m_2498 = 4 in
                    let bop_2507 = m_2498 = 6 in
                    let bop_2508 = m_2498 = 9 in
                    let bop_2509 = m_2498 = 11 in
                    let bop_2510 = m_2498 = 1 in
                    let norm_2511 = bop_2510 || bop_2505 in
                    let bop_2512 = y_2497 + 4800 in
                    let bop_2513 = bop_2512 - 1 in
                    let bop_2514 = 1461 * bop_2513 in
                    let bop_2515 = bop_2514 / 4 in
                    let bop_2516 = 1461 * bop_2512 in
                    let bop_2517 = bop_2516 / 4 in
                    let bop_2518 = m_2498 + 10 in
                    let bop_2519 = 367 * bop_2518 in
                    let bop_2520 = bop_2519 / 12 in
                    let bop_2521 = bop_2515 + bop_2520 in
                    let bop_2522 = y_2497 + 4900 in
                    let bop_2523 = bop_2522 - 1 in
                    let bop_2524 = bop_2523 / 100 in
                    let bop_2525 = 3 * bop_2524 in
                    let bop_2526 = bop_2525 / 4 in
                    let bop_2527 = bop_2521 - bop_2526 in
                    let bop_2528 = bop_2522 / 100 in
                    let bop_2529 = 3 * bop_2528 in
                    let bop_2530 = bop_2529 / 4 in
                    let bop_2531 = m_2498 - 2 in
                    let bop_2532 = 367 * bop_2531 in
                    let bop_2533 = bop_2532 / 12 in
                    let bop_2534 = bop_2517 + bop_2533 in
                    let bop_2535 = bop_2534 - bop_2530 in
                    let ym_2536 =
                      if norm_2511
                      then bop_2527
                      else bop_2535 in
                    let tmp_bop_2537 = y_2497 - bop_2500 in
                    let bop_2538 = tmp_bop_2537 = 0 in
                    let tmp_bop_2539 = y_2497 - bop_2502 in
                    let bop_2540 = tmp_bop_2539 = 0 in
                    let not_2541 = not bop_2540 in
                    let tmp_bop_2542 = y_2497 - bop_2504 in
                    let bop_2543 = tmp_bop_2542 = 0 in
                    let norm_2544 = not_2541 || bop_2543 in
                    let tmp_and_2545 = bop_2538 && norm_2544 in
                    let norm_2546 = bop_2505 && tmp_and_2545 in
                    let val_2550 =
                      if norm_2546
                      then 29
                      else if bop_2505
                           then 28
                           else let norm_2547 = bop_2506 || bop_2507 in
                                let norm_2548 = norm_2547 || bop_2508 in
                                let norm_2549 = norm_2548 || bop_2509 in
                                if norm_2549
                                then 30
                                else 31 in
                    let bop_2551 = d_1945 < val_2550 in
                    let tmp_lit_2552 =
                      if bop_2551
                      then d_1945
                      else val_2550 in
                    let bop_2553 = ym_2536 + tmp_lit_2552 in
                    let bop_2554 = bop_2553 - 32075 in
                    let tmp_2555 = bop_2554 - 2444238 in
                    let bop_2556 = tmp_2555 * 1440 in
                    let resmin_2557 = bop_2556 + 720 in
                    let tmp_call_2558 = toReal(resmin_2557) in
                    let val_2559 = trunc(tmp_call_2558) in
                    let jul_2560 = val_2559 / 1440 in
                    let bop_2561 = jul_2560 + 68569 in
                    let l_2562 = bop_2561 + 2444238 in
                    let bop_2563 = 4 * l_2562 in
                    let n_2564 = bop_2563 / 146097 in
                    let bop_2565 = 146097 * n_2564 in
                    let bop_2566 = bop_2565 + 3 in
                    let bop_2567 = bop_2566 / 4 in
                    let bop_2568 = n_2564 - 49 in
                    let bop_2569 = 100 * bop_2568 in
                    let l_2570 = l_2562 - bop_2567 in
                    let bop_2571 = l_2570 + 1 in
                    let bop_2572 = 4000 * bop_2571 in
                    let i_2573 = bop_2572 / 1461001 in
                    let bop_2574 = 1461 * i_2573 in
                    let bop_2575 = bop_2574 / 4 in
                    let bop_2576 = bop_2569 + i_2573 in
                    let bop_2577 = l_2570 - bop_2575 in
                    let l_2578 = bop_2577 + 31 in
                    let bop_2579 = 80 * l_2578 in
                    let j_2580 = bop_2579 / 2447 in
                    let bop_2581 = 2447 * j_2580 in
                    let bop_2582 = bop_2581 / 80 in
                    let bop_2583 = j_2580 + 2 in
                    let l_2584 = j_2580 / 11 in
                    let bop_2585 = 12 * l_2584 in
                    let m_2586 = bop_2583 - bop_2585 in
                    let y_2587 = bop_2576 + l_2584 in
                    let d_2588 = l_2578 - bop_2582 in
                    let bop_2589 = jul_2560 * 1440 in
                    let daytime_2590 = val_2559 - bop_2589 in
                    let bop_2591 = daytime_2590 = 720 in
                    let bop_2592 = daytime_2590 / 60 in
                    let bop_2593 = bop_2592 * 60 in
                    let tmp_lit_2594 = daytime_2590 - bop_2593 in
                    let {y_2595, m_2596, d_2597, h_2598, min_2599} =
                      if bop_2591
                      then {y_2587, m_2586, d_2588, 12, 0}
                      else {y_2587, m_2586, d_2588, bop_2592, tmp_lit_2594} in
                    let m_2600 = m_2596 + nbmonths_2084 in
                    let val_2601 = m_2600 - 1 in
                    let bop_2602 = val_2601 / 12 in
                    let bop_2603 = bop_2602 * 12 in
                    let tmp_bop_2604 = val_2601 - bop_2603 in
                    let bop_2605 = tmp_bop_2604 + 1 in
                    let bop_2606 = bop_2605 <= 0 in
                    let bop_2607 = bop_2605 + 12 in
                    let bop_2608 = y_2595 + bop_2602 in
                    let bop_2609 = bop_2608 - 1 in
                    let {y_2610, m_2611} =
                      if bop_2606
                      then {bop_2609, bop_2607}
                      else {bop_2608, bop_2605} in
                    let bop_2612 = y_2610 / 4 in
                    let bop_2613 = bop_2612 * 4 in
                    let bop_2614 = y_2610 / 100 in
                    let bop_2615 = bop_2614 * 100 in
                    let bop_2616 = y_2610 / 400 in
                    let bop_2617 = bop_2616 * 400 in
                    let bop_2618 = m_2611 = 2 in
                    let bop_2619 = m_2611 = 4 in
                    let bop_2620 = m_2611 = 6 in
                    let bop_2621 = m_2611 = 9 in
                    let bop_2622 = m_2611 = 11 in
                    let bop_2623 = m_2611 = 1 in
                    let norm_2624 = bop_2623 || bop_2618 in
                    let bop_2625 = y_2610 + 4800 in
                    let bop_2626 = bop_2625 - 1 in
                    let bop_2627 = 1461 * bop_2626 in
                    let bop_2628 = bop_2627 / 4 in
                    let bop_2629 = 1461 * bop_2625 in
                    let bop_2630 = bop_2629 / 4 in
                    let bop_2631 = m_2611 + 10 in
                    let bop_2632 = 367 * bop_2631 in
                    let bop_2633 = bop_2632 / 12 in
                    let bop_2634 = bop_2628 + bop_2633 in
                    let bop_2635 = y_2610 + 4900 in
                    let bop_2636 = bop_2635 - 1 in
                    let bop_2637 = bop_2636 / 100 in
                    let bop_2638 = 3 * bop_2637 in
                    let bop_2639 = bop_2638 / 4 in
                    let bop_2640 = bop_2634 - bop_2639 in
                    let bop_2641 = bop_2635 / 100 in
                    let bop_2642 = 3 * bop_2641 in
                    let bop_2643 = bop_2642 / 4 in
                    let bop_2644 = m_2611 - 2 in
                    let bop_2645 = 367 * bop_2644 in
                    let bop_2646 = bop_2645 / 12 in
                    let bop_2647 = bop_2630 + bop_2646 in
                    let bop_2648 = bop_2647 - bop_2643 in
                    let ym_2649 =
                      if norm_2624
                      then bop_2640
                      else bop_2648 in
                    let tmp_bop_2650 = y_2610 - bop_2613 in
                    let bop_2651 = tmp_bop_2650 = 0 in
                    let tmp_bop_2652 = y_2610 - bop_2615 in
                    let bop_2653 = tmp_bop_2652 = 0 in
                    let not_2654 = not bop_2653 in
                    let tmp_bop_2655 = y_2610 - bop_2617 in
                    let bop_2656 = tmp_bop_2655 = 0 in
                    let norm_2657 = not_2654 || bop_2656 in
                    let tmp_and_2658 = bop_2651 && norm_2657 in
                    let norm_2659 = bop_2618 && tmp_and_2658 in
                    let val_2663 =
                      if norm_2659
                      then 29
                      else if bop_2618
                           then 28
                           else let norm_2660 = bop_2619 || bop_2620 in
                                let norm_2661 = norm_2660 || bop_2621 in
                                let norm_2662 = norm_2661 || bop_2622 in
                                if norm_2662
                                then 30
                                else 31 in
                    let bop_2664 = d_2597 < val_2663 in
                    let tmp_lit_2665 =
                      if bop_2664
                      then d_2597
                      else val_2663 in
                    let bop_2666 = ym_2649 + tmp_lit_2665 in
                    let bop_2667 = bop_2666 - 32075 in
                    let tmp_2668 = bop_2667 - 2444238 in
                    let bop_2669 = tmp_2668 * 1440 in
                    let resmin_2670 = bop_2669 + 720 in
                    let tmp_call_2671 = toReal(resmin_2670) in
                    {tmp_call_2558, tmp_call_2671},
                  iota(tmp_call_13)) in
           let {tmp_red2_2695, tmp_red2_2696, tmp_red2_2697} =
             reduceT(fn {real, real, real} (real arg_2674, real arg_2675,
                                            real arg_2676, real arg_2677,
                                            real arg_2678, real arg_2679) =>
                       let bop_2680 = arg_2679 - 16834320.0 in
                       let tmp_bop_2681 = bop_2680 / 1440.0 in
                       let tmp_bop_2682 = tmp_bop_2681 / 365.0 in
                       let bop_2683 = 0.03 * tmp_bop_2682 in
                       let val_2684 = -bop_2683 in
                       let tmp_call_2685 = exp(val_2684) in
                       let bop_2686 = arg_2679 - arg_2678 in
                       let tmp_bop_2687 = bop_2686 / 1440.0 in
                       let tmp_bop_2688 = tmp_bop_2687 / 365.0 in
                       let bop_2689 = tmp_call_2685 * tmp_bop_2688 in
                       let bop_2690 = arg_2674 + bop_2689 in
                       let bop_2691 = arg_2675 < arg_2678 in
                       let tmp_lit_2692 =
                         if bop_2691
                         then arg_2675
                         else arg_2678 in
                       let bop_2693 = arg_2676 < arg_2679 in
                       let tmp_lit_2694 =
                         if bop_2693
                         then arg_2679
                         else arg_2676 in
                       {bop_2690, tmp_lit_2692, tmp_lit_2694},
                     {0.0, 168307199.0, 3600.0}, val_14, soac_v_2672,
                     soac_v_2673) in
           let bop_2698 = tmp_red2_2696 - 16834320.0 in
           let tmp_bop_2699 = bop_2698 / 1440.0 in
           let tmp_bop_2700 = tmp_bop_2699 / 365.0 in
           let bop_2701 = 0.03 * tmp_bop_2700 in
           let val_2702 = -bop_2701 in
           let tmp_call_2703 = exp(val_2702) in
           let bop_2704 = tmp_red2_2697 - 16834320.0 in
           let tmp_bop_2705 = bop_2704 / 1440.0 in
           let tmp_bop_2706 = tmp_bop_2705 / 365.0 in
           let bop_2707 = 0.03 * tmp_bop_2706 in
           let val_2708 = -bop_2707 in
           let tmp_call_2709 = exp(val_2708) in
           let bop_2710 = tmp_call_2703 - tmp_call_2709 in
           let strike_2711 = bop_2710 / tmp_red2_2695 in
           let {untuple_2720} =
             mapT(fn {real} (int i_2712) =>
                    let bop_2713 = soac_v_2673[i_2712] - soac_v_2672[i_2712] in
                    let tmp_bop_2714 = bop_2713 / 1440.0 in
                    let tau_2715 = tmp_bop_2714 / 365.0 in
                    let bop_2716 = tau_2715 * strike_2711 in
                    let bop_2717 = 1.0 + bop_2716 in
                    let bop_2718 = i_2712 = bop_16 in
                    let val_2719 =
                      if bop_2718
                      then bop_2717
                      else bop_2716 in
                    {val_2719},
                  iota(tmp_call_13)) in
           let {soac_v_2819, soac_v_2820, soac_v_2821, soac_v_2822, soac_v_2823,
                soac_v_2824} =
             mapT(fn {real, real, real, real, real, real} (real arg_2721,
                                                           real arg_2722) =>
                    let bop_2723 = arg_2721 - 16834320.0 in
                    let tmp_bop_2724 = bop_2723 / 1440.0 in
                    let val_2725 = tmp_bop_2724 / 365.0 in
                    let bop_2726 = 0.02453 * val_2725 in
                    let val_2727 = -bop_2726 in
                    let tmp_call_2728 = exp(val_2727) in
                    let bop_2729 = 1.0 - tmp_call_2728 in
                    let ba_2730 = bop_2729 / 0.02453 in
                    let bop_2731 = 81.53281695882593 * tmp_call_2728 in
                    let exp2xtau_2732 = tmp_call_2728 * tmp_call_2728 in
                    let bop_2733 = 20.383204239706483 * exp2xtau_2732 in
                    let bop_2734 = 0.98376 * val_2725 in
                    let val_2735 = -bop_2734 in
                    let tmp_call_2736 = exp(val_2735) in
                    let bop_2737 = 1.0 - tmp_call_2736 in
                    let bb_2738 = bop_2737 / 0.98376 in
                    let bop_2739 = 2.033016182808815 * tmp_call_2736 in
                    let exp2xtau_2740 = tmp_call_2736 * tmp_call_2736 in
                    let bop_2741 = 0.5082540457022038 * exp2xtau_2740 in
                    let bop_2742 = 1.00829 * val_2725 in
                    let val_2743 = -bop_2742 in
                    let tmp_call_2744 = exp(val_2743) in
                    let bop_2745 = 1.0 - tmp_call_2744 in
                    let tmp_bop_2746 = bop_2745 / 1.00829 in
                    let bop_2747 = 0.03 * val_2725 in
                    let val_2748 = -bop_2747 in
                    let tmp_call_2749 = exp(val_2748) in
                    let bop_2750 = tmp_call_2749 / tmp_call_1832 in
                    let bop_2751 = val_2725 - ba_2730 in
                    let bop_2752 = bop_2751 - bb_2738 in
                    let bop_2753 = bop_2752 + tmp_bop_2746 in
                    let t3_2754 = -0.19373336527812574 * bop_2753 in
                    let bop_2755 = val_2725 + bop_2731 in
                    let bop_2756 = bop_2755 - bop_2733 in
                    let bop_2757 = bop_2756 - 61.149612719119446 in
                    let t1_2758 = 0.9556596754408898 * bop_2757 in
                    let bop_2759 = val_2725 + bop_2739 in
                    let bop_2760 = bop_2759 - bop_2741 in
                    let bop_2761 = bop_2760 - 1.5247621371066113 in
                    let t2_2762 = 0.014460761693212401 * bop_2761 in
                    let bop_2763 = t1_2758 + t2_2762 in
                    let bop_2764 = bop_2763 + t3_2754 in
                    let bop_2765 = arg_2721 - tmp_call_1720 in
                    let tmp_bop_2766 = bop_2765 / 1440.0 in
                    let val_2767 = tmp_bop_2766 / 365.0 in
                    let bop_2768 = 0.02453 * val_2767 in
                    let val_2769 = -bop_2768 in
                    let tmp_call_2770 = exp(val_2769) in
                    let bop_2771 = 1.0 - tmp_call_2770 in
                    let ba_2772 = bop_2771 / 0.02453 in
                    let bop_2773 = 81.53281695882593 * tmp_call_2770 in
                    let exp2xtau_2774 = tmp_call_2770 * tmp_call_2770 in
                    let bop_2775 = 20.383204239706483 * exp2xtau_2774 in
                    let bop_2776 = 0.98376 * val_2767 in
                    let val_2777 = -bop_2776 in
                    let tmp_call_2778 = exp(val_2777) in
                    let bop_2779 = 1.0 - tmp_call_2778 in
                    let bb_2780 = bop_2779 / 0.98376 in
                    let bop_2781 = bop_1880 * bb_2780 in
                    let t3_2782 = muy_1991 - bop_2781 in
                    let bop_2783 = bop_1977 - t3_2782 in
                    let bop_2784 = bb_2780 * t4_1878 in
                    let bop_2785 = ba_2772 + bop_2784 in
                    let scale_2786 = -bop_2785 in
                    let cst_2787 = bb_2780 * bop_2783 in
                    let tmp_call_2788 = exp(cst_2787) in
                    let bop_2789 = 2.033016182808815 * tmp_call_2778 in
                    let exp2xtau_2790 = tmp_call_2778 * tmp_call_2778 in
                    let bop_2791 = 0.5082540457022038 * exp2xtau_2790 in
                    let bop_2792 = 1.00829 * val_2767 in
                    let val_2793 = -bop_2792 in
                    let tmp_call_2794 = exp(val_2793) in
                    let bop_2795 = 1.0 - tmp_call_2794 in
                    let tmp_bop_2796 = bop_2795 / 1.00829 in
                    let bop_2797 = val_2767 - ba_2772 in
                    let bop_2798 = bop_2797 - bb_2780 in
                    let bop_2799 = bop_2798 + tmp_bop_2796 in
                    let t3_2800 = -0.19373336527812574 * bop_2799 in
                    let bop_2801 = val_2767 + bop_2773 in
                    let bop_2802 = bop_2801 - bop_2775 in
                    let bop_2803 = bop_2802 - 61.149612719119446 in
                    let t1_2804 = 0.9556596754408898 * bop_2803 in
                    let bop_2805 = val_2767 + bop_2789 in
                    let bop_2806 = bop_2805 - bop_2791 in
                    let bop_2807 = bop_2806 - 1.5247621371066113 in
                    let t2_2808 = 0.014460761693212401 * bop_2807 in
                    let bop_2809 = t1_2804 + t2_2808 in
                    let bop_2810 = bop_2809 + t3_2800 in
                    let bop_2811 = bop_2810 - bop_2764 in
                    let bop_2812 = bop_2811 + bop_1829 in
                    let val_2813 = 0.5 * bop_2812 in
                    let tmp_call_2814 = exp(val_2813) in
                    let aa_2815 = bop_2750 * tmp_call_2814 in
                    let aici_2816 = arg_2722 * aa_2815 in
                    let log_aici_2817 = log(aici_2816) in
                    let t1_cst_2818 = aici_2816 * tmp_call_2788 in
                    {ba_2772, bb_2780, aici_2816, log_aici_2817, t1_cst_2818,
                     scale_2786},
                  soac_v_2673, untuple_2720) in
           let {soac_v_2835, soac_v_2836} =
             mapT(fn {real, real} (real arg_2825, real arg_2826, real arg_2827,
                                   real arg_2828) =>
                    let baix_2829 = arg_2825 * mux_1975 in
                    let val_2830 = -baix_2829 in
                    let tmp_call_2831 = exp(val_2830) in
                    let bop_2832 = arg_2827 * tmp_call_2831 in
                    let bop_2833 = arg_2828 - baix_2829 in
                    let bop_2834 = bop_2833 / arg_2826 in
                    {bop_2832, bop_2834},
                  soac_v_2819, soac_v_2820, soac_v_2821, soac_v_2822) in
           let {untuple_2840} =
             reduceT(fn {real} (real x_2837, real y_2838) =>
                       let val_2839 = x_2837 + y_2838 in
                       {val_2839},
                     {0.0}, soac_v_2835) in
           let {untuple_2845} =
             reduceT(fn {real} (real param_0_2841, real param_1_2842) =>
                       let bop_2843 = param_0_2841 < param_1_2842 in
                       let val_2844 =
                         if bop_2843
                         then param_1_2842
                         else param_0_2841 in
                       {val_2844},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_2836) in
           let yl_2846 = untuple_2845 - 0.00001 in
           let f_3029 =
             if bop_17
             then untuple_2845
             else let bop_2847 = bop_1979 / sigmax_1844 in
                  let bop_2848 = bop_2847 + bop_1872 in
                  let bop_2849 = sigmay_1853 * bop_2848 in
                  let bop_2850 = bop_2849 - bop_1869 in
                  let y0_2851 = bop_2850 + muy_1991 in
                  let bop_2852 = y0_2851 - 1.0 in
                  let bop_2853 = yl_2846 < y0_2851 in
                  let bop_2854 = bop_2847 - bop_1872 in
                  let bop_2855 = sigmay_1853 * bop_2854 in
                  let y1_2856 = bop_2855 + muy_1991 in
                  let bop_2857 = y1_2856 <= yl_2846 in
                  let bop_2858 = y1_2856 + 1.0 in
                  let log_s_2859 = log(untuple_2840) in
                  let tmp_2860 = log_s_2859 / soac_v_2820[bop_16] in
                  let bop_2861 = tmp_2860 <= 0.0 in
                  let up_2864 =
                    if bop_2861
                    then tmp_2860
                    else let tmp_2862 = log_s_2859 / soac_v_2820[0] in
                         let bop_2863 = 0.0 <= tmp_2862 in
                         if bop_2863
                         then tmp_2862
                         else -10000000000000000000000000000000000000000000000000.0 in
                  let yu_2865 = up_2864 + 0.00001 in
                  let bop_2866 = yu_2865 <= y0_2851 in
                  let bop_2867 = yu_2865 < y1_2856 in
                  if bop_2857
                  then bop_2858
                  else if bop_2866
                       then bop_2852
                       else let {untuple_2874} =
                              mapT(fn {real} (real arg_2868, real arg_2869) =>
                                     let bop_2870 = arg_2868 * mux_1975 in
                                     let val_2871 = -bop_2870 in
                                     let tmp_call_2872 = exp(val_2871) in
                                     let val_2873 = arg_2869 * tmp_call_2872 in
                                     {val_2873},
                                   soac_v_2819, soac_v_2821) in
                            let root_lb_2875 =
                              if bop_2853
                              then y0_2851
                              else yl_2846 in
                            let bop_2876 = 0.0 <= root_lb_2875 in
                            let {untuple_2883} =
                              mapT(fn {real} (real arg_2877, real arg_2878) =>
                                     let bop_2879 = arg_2878 * root_lb_2875 in
                                     let val_2880 = -bop_2879 in
                                     let tmp_call_2881 = exp(val_2880) in
                                     let val_2882 = arg_2877 * tmp_call_2881 in
                                     {val_2882},
                                   untuple_2874, soac_v_2820) in
                            let {untuple_2887} =
                              reduceT(fn {real} (real x_2884, real y_2885) =>
                                        let val_2886 = x_2884 + y_2885 in
                                        {val_2886},
                                      {0.0}, untuple_2883) in
                            let tmp_lit_2888 = untuple_2887 - 1.0 in
                            let bop_2889 = tmp_lit_2888 < 0.0 in
                            let negate_2890 = -tmp_lit_2888 in
                            let root_ub_2891 =
                              if bop_2867
                              then yu_2865
                              else y1_2856 in
                            let {untuple_2898} =
                              mapT(fn {real} (real arg_2892, real arg_2893) =>
                                     let bop_2894 = arg_2893 * root_ub_2891 in
                                     let val_2895 = -bop_2894 in
                                     let tmp_call_2896 = exp(val_2895) in
                                     let val_2897 = arg_2892 * tmp_call_2896 in
                                     {val_2897},
                                   untuple_2874, soac_v_2820) in
                            let {untuple_2902} =
                              reduceT(fn {real} (real x_2899, real y_2900) =>
                                        let val_2901 = x_2899 + y_2900 in
                                        {val_2901},
                                      {0.0}, untuple_2898) in
                            let tmp_lit_2903 = untuple_2902 - 1.0 in
                            let bop_2904 = tmp_lit_2903 < 0.0 in
                            let negate_2905 = -tmp_lit_2903 in
                            let bop_2906 = tmp_lit_2888 * tmp_lit_2903 in
                            let bop_2907 = 0.0 <= bop_2906 in
                            let {root_3024, iteration_3025, error_3026} =
                              if bop_2907
                              then if bop_2876
                                   then {0.0, 0,
                                         10000000000000000000000000000000000000000000000000.0}
                                   else {0.0, 0,
                                         -10000000000000000000000000000000000000000000000000.0}
                              else let tmp_bop_2908 =
                                     if bop_2889
                                     then negate_2890
                                     else tmp_lit_2888 in
                                   let tmp_bop_2909 =
                                     if bop_2904
                                     then negate_2905
                                     else tmp_lit_2903 in
                                   let bop_2910 = tmp_bop_2908 < tmp_bop_2909 in
                                   let {fa_2911, fb_2912} =
                                     if bop_2910
                                     then {tmp_lit_2903, tmp_lit_2888}
                                     else {tmp_lit_2888, tmp_lit_2903} in
                                   loop ({a_2913, b_2914, c_2915, d_2916,
                                          fa_2917, fb_2918, fc_2919, mflag_2920,
                                          it_2921} = {root_lb_2875,
                                                      root_ub_2891,
                                                      root_lb_2875, 0.0,
                                                      fa_2911, fb_2912, fa_2911,
                                                      True,
                                                      0}) = for i_2922 < 1000 do
                                     let bop_2923 = fb_2918 = 0.0 in
                                     let bop_2924 = fa_2917 = fc_2919 in
                                     let bop_2925 = fb_2918 = fc_2919 in
                                     let bop_2926 = a_2913 * fb_2918 in
                                     let bop_2927 = bop_2926 * fc_2919 in
                                     let bop_2928 = fa_2917 - fb_2918 in
                                     let bop_2929 = fa_2917 - fc_2919 in
                                     let bop_2930 = bop_2928 * bop_2929 in
                                     let bop_2931 = b_2914 * fa_2917 in
                                     let bop_2932 = bop_2931 * fc_2919 in
                                     let bop_2933 = fb_2918 - fa_2917 in
                                     let bop_2934 = fb_2918 - fc_2919 in
                                     let bop_2935 = bop_2933 * bop_2934 in
                                     let bop_2936 = c_2915 * fa_2917 in
                                     let bop_2937 = bop_2936 * fb_2918 in
                                     let bop_2938 = fc_2919 - fa_2917 in
                                     let bop_2939 = fc_2919 - fb_2918 in
                                     let bop_2940 = bop_2938 * bop_2939 in
                                     let bop_2941 = 3.0 * a_2913 in
                                     let bop_2942 = bop_2941 + b_2914 in
                                     let bop_2943 = bop_2942 / 4.0 in
                                     let not_2944 = not mflag_2920 in
                                     let bop_2945 = a_2913 + b_2914 in
                                     let bop_2946 = bop_2945 / 2.0 in
                                     let val_2947 = b_2914 - a_2913 in
                                     let bop_2948 = fb_2918 * val_2947 in
                                     let negate_2949 = -val_2947 in
                                     let bop_2950 = val_2947 < 0.0 in
                                     let tmp_bop_2951 =
                                       if bop_2950
                                       then negate_2949
                                       else val_2947 in
                                     let bop_2952 = tmp_bop_2951 < 0.0001 in
                                     let norm_2953 = bop_2923 || bop_2952 in
                                     let val_2954 = b_2914 - c_2915 in
                                     let negate_2955 = -val_2954 in
                                     let bop_2956 = val_2954 < 0.0 in
                                     let val_2957 = c_2915 - d_2916 in
                                     let negate_2958 = -val_2957 in
                                     let bop_2959 = val_2957 < 0.0 in
                                     if norm_2953
                                     then {a_2913, b_2914, c_2915, d_2916,
                                           fa_2917, fb_2918, fc_2919,
                                           mflag_2920, it_2921}
                                     else let tmp_bop_2960 =
                                            if bop_2956
                                            then negate_2955
                                            else val_2954 in
                                          let bop_2961 = tmp_bop_2960
                                                         <= 0.0001 in
                                          let norm_2962 = mflag_2920
                                                          && bop_2961 in
                                          let bop_2963 = tmp_bop_2960 / 2.0 in
                                          let tmp_bop_2964 =
                                            if bop_2959
                                            then negate_2958
                                            else val_2957 in
                                          let bop_2965 = tmp_bop_2964
                                                         <= 0.0001 in
                                          let norm_2966 = not_2944
                                                          && bop_2965 in
                                          let bop_2967 = tmp_bop_2964 / 2.0 in
                                          let norm_2968 = bop_2924
                                                          || bop_2925 in
                                          let s_2976 =
                                            if norm_2968
                                            then let bop_2969 = bop_2948
                                                                / bop_2933 in
                                                 let bop_2970 = b_2914
                                                                - bop_2969 in
                                                 bop_2970
                                            else let s1_2971 = bop_2927
                                                               / bop_2930 in
                                                 let s2_2972 = bop_2932
                                                               / bop_2935 in
                                                 let bop_2973 = s1_2971
                                                                + s2_2972 in
                                                 let s3_2974 = bop_2937
                                                               / bop_2940 in
                                                 let bop_2975 = bop_2973
                                                                + s3_2974 in
                                                 bop_2975 in
                                          let bop_2977 = bop_2943 <= s_2976 in
                                          let bop_2978 = s_2976 <= b_2914 in
                                          let norm_2979 = bop_2977
                                                          && bop_2978 in
                                          let not_2980 = not norm_2979 in
                                          let val_2981 = s_2976 - b_2914 in
                                          let bop_2982 = val_2981 < 0.0 in
                                          let negate_2983 = -val_2981 in
                                          let tmp_bop_2984 =
                                            if bop_2982
                                            then negate_2983
                                            else val_2981 in
                                          let bop_2985 = bop_2967
                                                         <= tmp_bop_2984 in
                                          let norm_2986 = not_2944
                                                          && bop_2985 in
                                          let bop_2987 = bop_2963
                                                         <= tmp_bop_2984 in
                                          let norm_2988 = mflag_2920
                                                          && bop_2987 in
                                          let norm_2989 = not_2980
                                                          || norm_2988 in
                                          let norm_2990 = norm_2989
                                                          || norm_2986 in
                                          let norm_2991 = norm_2990
                                                          || norm_2962 in
                                          let norm_2992 = norm_2991
                                                          || norm_2966 in
                                          let {mflag_2993, s_2994} =
                                            if norm_2992
                                            then {True, bop_2946}
                                            else {False, s_2976} in
                                          let {untuple_3001} =
                                            mapT(fn {real} (real arg_2995,
                                                            real arg_2996) =>
                                                   let bop_2997 = arg_2996
                                                                  * s_2994 in
                                                   let val_2998 = -bop_2997 in
                                                   let tmp_call_2999 = exp(val_2998) in
                                                   let val_3000 = arg_2995
                                                                  * tmp_call_2999 in
                                                   {val_3000},
                                                 untuple_2874, soac_v_2820) in
                                          let {untuple_3005} =
                                            reduceT(fn {real} (real x_3002,
                                                               real y_3003) =>
                                                      let val_3004 = x_3002
                                                                     + y_3003 in
                                                      {val_3004},
                                                    {0.0}, untuple_3001) in
                                          let fs_3006 = untuple_3005 - 1.0 in
                                          let bop_3007 = fa_2917 * fs_3006 in
                                          let bop_3008 = bop_3007 < 0.0 in
                                          let {a_3009, b_3010, fa_3011,
                                               fb_3012} =
                                            if bop_3008
                                            then {a_2913, s_2994, fa_2917,
                                                  fs_3006}
                                            else {s_2994, b_2914, fs_3006,
                                                  fb_2918} in
                                          let bop_3013 = fa_3011 < 0.0 in
                                          let negate_3014 = -fa_3011 in
                                          let bop_3015 = fb_3012 < 0.0 in
                                          let negate_3016 = -fb_3012 in
                                          let tmp_bop_3017 =
                                            if bop_3015
                                            then negate_3016
                                            else fb_3012 in
                                          let tmp_bop_3018 =
                                            if bop_3013
                                            then negate_3014
                                            else fa_3011 in
                                          let bop_3019 = tmp_bop_3018
                                                         < tmp_bop_3017 in
                                          let {a_3020, b_3021, fa_3022,
                                               fb_3023} =
                                            if bop_3019
                                            then {b_3010, a_3009, fb_3012,
                                                  fa_3011}
                                            else {a_3009, b_3010, fa_3011,
                                                  fb_3012} in
                                          {a_3020, b_3021, b_2914, c_2915,
                                           fa_3022, fb_3023, fb_2918,
                                           mflag_2993, i_2922} in
                                   {b_2914, it_2921, fb_2918} in
                            let bop_3027 = error_3026
                                           = -10000000000000000000000000000000000000000000000000.0 in
                            let bop_3028 = error_3026
                                           = 10000000000000000000000000000000000000000000000000.0 in
                            if bop_3027
                            then bop_2852
                            else if bop_3028
                                 then bop_2858
                                 else root_3024 in
           let {soac_v_3040, soac_v_3041} =
             mapT(fn {real, real} (real arg_3030, real arg_3031, real arg_3032,
                                   real arg_3033) =>
                    let baix_3034 = arg_3030 * val_1980 in
                    let val_3035 = -baix_3034 in
                    let tmp_call_3036 = exp(val_3035) in
                    let bop_3037 = arg_3032 * tmp_call_3036 in
                    let bop_3038 = arg_3033 - baix_3034 in
                    let bop_3039 = bop_3038 / arg_3031 in
                    {bop_3037, bop_3039},
                  soac_v_2819, soac_v_2820, soac_v_2821, soac_v_2822) in
           let {untuple_3045} =
             reduceT(fn {real} (real x_3042, real y_3043) =>
                       let val_3044 = x_3042 + y_3043 in
                       {val_3044},
                     {0.0}, soac_v_3040) in
           let {untuple_3050} =
             reduceT(fn {real} (real param_0_3046, real param_1_3047) =>
                       let bop_3048 = param_0_3046 < param_1_3047 in
                       let val_3049 =
                         if bop_3048
                         then param_1_3047
                         else param_0_3046 in
                       {val_3049},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_3041) in
           let yl_3051 = untuple_3050 - 0.00001 in
           let g_3234 =
             if bop_17
             then untuple_3050
             else let bop_3052 = bop_1983 / sigmax_1844 in
                  let bop_3053 = bop_3052 + bop_1872 in
                  let bop_3054 = sigmay_1853 * bop_3053 in
                  let bop_3055 = bop_3054 - bop_1869 in
                  let y0_3056 = bop_3055 + muy_1991 in
                  let bop_3057 = y0_3056 - 1.0 in
                  let bop_3058 = yl_3051 < y0_3056 in
                  let bop_3059 = bop_3052 - bop_1872 in
                  let bop_3060 = sigmay_1853 * bop_3059 in
                  let y1_3061 = bop_3060 + muy_1991 in
                  let bop_3062 = y1_3061 <= yl_3051 in
                  let bop_3063 = y1_3061 + 1.0 in
                  let log_s_3064 = log(untuple_3045) in
                  let tmp_3065 = log_s_3064 / soac_v_2820[bop_16] in
                  let bop_3066 = tmp_3065 <= 0.0 in
                  let up_3069 =
                    if bop_3066
                    then tmp_3065
                    else let tmp_3067 = log_s_3064 / soac_v_2820[0] in
                         let bop_3068 = 0.0 <= tmp_3067 in
                         if bop_3068
                         then tmp_3067
                         else -10000000000000000000000000000000000000000000000000.0 in
                  let yu_3070 = up_3069 + 0.00001 in
                  let bop_3071 = yu_3070 <= y0_3056 in
                  let bop_3072 = yu_3070 < y1_3061 in
                  if bop_3062
                  then bop_3063
                  else if bop_3071
                       then bop_3057
                       else let {untuple_3079} =
                              mapT(fn {real} (real arg_3073, real arg_3074) =>
                                     let bop_3075 = arg_3073 * val_1980 in
                                     let val_3076 = -bop_3075 in
                                     let tmp_call_3077 = exp(val_3076) in
                                     let val_3078 = arg_3074 * tmp_call_3077 in
                                     {val_3078},
                                   soac_v_2819, soac_v_2821) in
                            let root_lb_3080 =
                              if bop_3058
                              then y0_3056
                              else yl_3051 in
                            let bop_3081 = 0.0 <= root_lb_3080 in
                            let {untuple_3088} =
                              mapT(fn {real} (real arg_3082, real arg_3083) =>
                                     let bop_3084 = arg_3083 * root_lb_3080 in
                                     let val_3085 = -bop_3084 in
                                     let tmp_call_3086 = exp(val_3085) in
                                     let val_3087 = arg_3082 * tmp_call_3086 in
                                     {val_3087},
                                   untuple_3079, soac_v_2820) in
                            let {untuple_3092} =
                              reduceT(fn {real} (real x_3089, real y_3090) =>
                                        let val_3091 = x_3089 + y_3090 in
                                        {val_3091},
                                      {0.0}, untuple_3088) in
                            let tmp_lit_3093 = untuple_3092 - 1.0 in
                            let bop_3094 = tmp_lit_3093 < 0.0 in
                            let negate_3095 = -tmp_lit_3093 in
                            let root_ub_3096 =
                              if bop_3072
                              then yu_3070
                              else y1_3061 in
                            let {untuple_3103} =
                              mapT(fn {real} (real arg_3097, real arg_3098) =>
                                     let bop_3099 = arg_3098 * root_ub_3096 in
                                     let val_3100 = -bop_3099 in
                                     let tmp_call_3101 = exp(val_3100) in
                                     let val_3102 = arg_3097 * tmp_call_3101 in
                                     {val_3102},
                                   untuple_3079, soac_v_2820) in
                            let {untuple_3107} =
                              reduceT(fn {real} (real x_3104, real y_3105) =>
                                        let val_3106 = x_3104 + y_3105 in
                                        {val_3106},
                                      {0.0}, untuple_3103) in
                            let tmp_lit_3108 = untuple_3107 - 1.0 in
                            let bop_3109 = tmp_lit_3108 < 0.0 in
                            let negate_3110 = -tmp_lit_3108 in
                            let bop_3111 = tmp_lit_3093 * tmp_lit_3108 in
                            let bop_3112 = 0.0 <= bop_3111 in
                            let {root_3229, iteration_3230, error_3231} =
                              if bop_3112
                              then if bop_3081
                                   then {0.0, 0,
                                         10000000000000000000000000000000000000000000000000.0}
                                   else {0.0, 0,
                                         -10000000000000000000000000000000000000000000000000.0}
                              else let tmp_bop_3113 =
                                     if bop_3094
                                     then negate_3095
                                     else tmp_lit_3093 in
                                   let tmp_bop_3114 =
                                     if bop_3109
                                     then negate_3110
                                     else tmp_lit_3108 in
                                   let bop_3115 = tmp_bop_3113 < tmp_bop_3114 in
                                   let {fa_3116, fb_3117} =
                                     if bop_3115
                                     then {tmp_lit_3108, tmp_lit_3093}
                                     else {tmp_lit_3093, tmp_lit_3108} in
                                   loop ({a_3118, b_3119, c_3120, d_3121,
                                          fa_3122, fb_3123, fc_3124, mflag_3125,
                                          it_3126} = {root_lb_3080,
                                                      root_ub_3096,
                                                      root_lb_3080, 0.0,
                                                      fa_3116, fb_3117, fa_3116,
                                                      True,
                                                      0}) = for i_3127 < 1000 do
                                     let bop_3128 = fb_3123 = 0.0 in
                                     let bop_3129 = fa_3122 = fc_3124 in
                                     let bop_3130 = fb_3123 = fc_3124 in
                                     let bop_3131 = a_3118 * fb_3123 in
                                     let bop_3132 = bop_3131 * fc_3124 in
                                     let bop_3133 = fa_3122 - fb_3123 in
                                     let bop_3134 = fa_3122 - fc_3124 in
                                     let bop_3135 = bop_3133 * bop_3134 in
                                     let bop_3136 = b_3119 * fa_3122 in
                                     let bop_3137 = bop_3136 * fc_3124 in
                                     let bop_3138 = fb_3123 - fa_3122 in
                                     let bop_3139 = fb_3123 - fc_3124 in
                                     let bop_3140 = bop_3138 * bop_3139 in
                                     let bop_3141 = c_3120 * fa_3122 in
                                     let bop_3142 = bop_3141 * fb_3123 in
                                     let bop_3143 = fc_3124 - fa_3122 in
                                     let bop_3144 = fc_3124 - fb_3123 in
                                     let bop_3145 = bop_3143 * bop_3144 in
                                     let bop_3146 = 3.0 * a_3118 in
                                     let bop_3147 = bop_3146 + b_3119 in
                                     let bop_3148 = bop_3147 / 4.0 in
                                     let not_3149 = not mflag_3125 in
                                     let bop_3150 = a_3118 + b_3119 in
                                     let bop_3151 = bop_3150 / 2.0 in
                                     let val_3152 = b_3119 - a_3118 in
                                     let bop_3153 = fb_3123 * val_3152 in
                                     let negate_3154 = -val_3152 in
                                     let bop_3155 = val_3152 < 0.0 in
                                     let tmp_bop_3156 =
                                       if bop_3155
                                       then negate_3154
                                       else val_3152 in
                                     let bop_3157 = tmp_bop_3156 < 0.0001 in
                                     let norm_3158 = bop_3128 || bop_3157 in
                                     let val_3159 = b_3119 - c_3120 in
                                     let negate_3160 = -val_3159 in
                                     let bop_3161 = val_3159 < 0.0 in
                                     let val_3162 = c_3120 - d_3121 in
                                     let negate_3163 = -val_3162 in
                                     let bop_3164 = val_3162 < 0.0 in
                                     if norm_3158
                                     then {a_3118, b_3119, c_3120, d_3121,
                                           fa_3122, fb_3123, fc_3124,
                                           mflag_3125, it_3126}
                                     else let tmp_bop_3165 =
                                            if bop_3161
                                            then negate_3160
                                            else val_3159 in
                                          let bop_3166 = tmp_bop_3165
                                                         <= 0.0001 in
                                          let norm_3167 = mflag_3125
                                                          && bop_3166 in
                                          let bop_3168 = tmp_bop_3165 / 2.0 in
                                          let tmp_bop_3169 =
                                            if bop_3164
                                            then negate_3163
                                            else val_3162 in
                                          let bop_3170 = tmp_bop_3169
                                                         <= 0.0001 in
                                          let norm_3171 = not_3149
                                                          && bop_3170 in
                                          let bop_3172 = tmp_bop_3169 / 2.0 in
                                          let norm_3173 = bop_3129
                                                          || bop_3130 in
                                          let s_3181 =
                                            if norm_3173
                                            then let bop_3174 = bop_3153
                                                                / bop_3138 in
                                                 let bop_3175 = b_3119
                                                                - bop_3174 in
                                                 bop_3175
                                            else let s1_3176 = bop_3132
                                                               / bop_3135 in
                                                 let s2_3177 = bop_3137
                                                               / bop_3140 in
                                                 let bop_3178 = s1_3176
                                                                + s2_3177 in
                                                 let s3_3179 = bop_3142
                                                               / bop_3145 in
                                                 let bop_3180 = bop_3178
                                                                + s3_3179 in
                                                 bop_3180 in
                                          let bop_3182 = bop_3148 <= s_3181 in
                                          let bop_3183 = s_3181 <= b_3119 in
                                          let norm_3184 = bop_3182
                                                          && bop_3183 in
                                          let not_3185 = not norm_3184 in
                                          let val_3186 = s_3181 - b_3119 in
                                          let bop_3187 = val_3186 < 0.0 in
                                          let negate_3188 = -val_3186 in
                                          let tmp_bop_3189 =
                                            if bop_3187
                                            then negate_3188
                                            else val_3186 in
                                          let bop_3190 = bop_3172
                                                         <= tmp_bop_3189 in
                                          let norm_3191 = not_3149
                                                          && bop_3190 in
                                          let bop_3192 = bop_3168
                                                         <= tmp_bop_3189 in
                                          let norm_3193 = mflag_3125
                                                          && bop_3192 in
                                          let norm_3194 = not_3185
                                                          || norm_3193 in
                                          let norm_3195 = norm_3194
                                                          || norm_3191 in
                                          let norm_3196 = norm_3195
                                                          || norm_3167 in
                                          let norm_3197 = norm_3196
                                                          || norm_3171 in
                                          let {mflag_3198, s_3199} =
                                            if norm_3197
                                            then {True, bop_3151}
                                            else {False, s_3181} in
                                          let {untuple_3206} =
                                            mapT(fn {real} (real arg_3200,
                                                            real arg_3201) =>
                                                   let bop_3202 = arg_3201
                                                                  * s_3199 in
                                                   let val_3203 = -bop_3202 in
                                                   let tmp_call_3204 = exp(val_3203) in
                                                   let val_3205 = arg_3200
                                                                  * tmp_call_3204 in
                                                   {val_3205},
                                                 untuple_3079, soac_v_2820) in
                                          let {untuple_3210} =
                                            reduceT(fn {real} (real x_3207,
                                                               real y_3208) =>
                                                      let val_3209 = x_3207
                                                                     + y_3208 in
                                                      {val_3209},
                                                    {0.0}, untuple_3206) in
                                          let fs_3211 = untuple_3210 - 1.0 in
                                          let bop_3212 = fa_3122 * fs_3211 in
                                          let bop_3213 = bop_3212 < 0.0 in
                                          let {a_3214, b_3215, fa_3216,
                                               fb_3217} =
                                            if bop_3213
                                            then {a_3118, s_3199, fa_3122,
                                                  fs_3211}
                                            else {s_3199, b_3119, fs_3211,
                                                  fb_3123} in
                                          let bop_3218 = fa_3216 < 0.0 in
                                          let negate_3219 = -fa_3216 in
                                          let bop_3220 = fb_3217 < 0.0 in
                                          let negate_3221 = -fb_3217 in
                                          let tmp_bop_3222 =
                                            if bop_3220
                                            then negate_3221
                                            else fb_3217 in
                                          let tmp_bop_3223 =
                                            if bop_3218
                                            then negate_3219
                                            else fa_3216 in
                                          let bop_3224 = tmp_bop_3223
                                                         < tmp_bop_3222 in
                                          let {a_3225, b_3226, fa_3227,
                                               fb_3228} =
                                            if bop_3224
                                            then {b_3215, a_3214, fb_3217,
                                                  fa_3216}
                                            else {a_3214, b_3215, fa_3216,
                                                  fb_3217} in
                                          {a_3225, b_3226, b_3119, c_3120,
                                           fa_3227, fb_3228, fb_3123,
                                           mflag_3198, i_3127} in
                                   {b_3119, it_3126, fb_3123} in
                            let bop_3232 = error_3231
                                           = -10000000000000000000000000000000000000000000000000.0 in
                            let bop_3233 = error_3231
                                           = 10000000000000000000000000000000000000000000000000.0 in
                            if bop_3232
                            then bop_3057
                            else if bop_3233
                                 then bop_3063
                                 else root_3229 in
           let {soac_v_3245, soac_v_3246} =
             mapT(fn {real, real} (real arg_3235, real arg_3236, real arg_3237,
                                   real arg_3238) =>
                    let baix_3239 = arg_3235 * val_1984 in
                    let val_3240 = -baix_3239 in
                    let tmp_call_3241 = exp(val_3240) in
                    let bop_3242 = arg_3237 * tmp_call_3241 in
                    let bop_3243 = arg_3238 - baix_3239 in
                    let bop_3244 = bop_3243 / arg_3236 in
                    {bop_3242, bop_3244},
                  soac_v_2819, soac_v_2820, soac_v_2821, soac_v_2822) in
           let {untuple_3250} =
             reduceT(fn {real} (real x_3247, real y_3248) =>
                       let val_3249 = x_3247 + y_3248 in
                       {val_3249},
                     {0.0}, soac_v_3245) in
           let {untuple_3255} =
             reduceT(fn {real} (real param_0_3251, real param_1_3252) =>
                       let bop_3253 = param_0_3251 < param_1_3252 in
                       let val_3254 =
                         if bop_3253
                         then param_1_3252
                         else param_0_3251 in
                       {val_3254},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_3246) in
           let yl_3256 = untuple_3255 - 0.00001 in
           let h_3439 =
             if bop_17
             then untuple_3255
             else let bop_3257 = bop_1986 / sigmax_1844 in
                  let bop_3258 = bop_3257 + bop_1872 in
                  let bop_3259 = sigmay_1853 * bop_3258 in
                  let bop_3260 = bop_3259 - bop_1869 in
                  let y0_3261 = bop_3260 + muy_1991 in
                  let bop_3262 = y0_3261 - 1.0 in
                  let bop_3263 = yl_3256 < y0_3261 in
                  let bop_3264 = bop_3257 - bop_1872 in
                  let bop_3265 = sigmay_1853 * bop_3264 in
                  let y1_3266 = bop_3265 + muy_1991 in
                  let bop_3267 = y1_3266 <= yl_3256 in
                  let bop_3268 = y1_3266 + 1.0 in
                  let log_s_3269 = log(untuple_3250) in
                  let tmp_3270 = log_s_3269 / soac_v_2820[bop_16] in
                  let bop_3271 = tmp_3270 <= 0.0 in
                  let up_3274 =
                    if bop_3271
                    then tmp_3270
                    else let tmp_3272 = log_s_3269 / soac_v_2820[0] in
                         let bop_3273 = 0.0 <= tmp_3272 in
                         if bop_3273
                         then tmp_3272
                         else -10000000000000000000000000000000000000000000000000.0 in
                  let yu_3275 = up_3274 + 0.00001 in
                  let bop_3276 = yu_3275 <= y0_3261 in
                  let bop_3277 = yu_3275 < y1_3266 in
                  if bop_3267
                  then bop_3268
                  else if bop_3276
                       then bop_3262
                       else let {untuple_3284} =
                              mapT(fn {real} (real arg_3278, real arg_3279) =>
                                     let bop_3280 = arg_3278 * val_1984 in
                                     let val_3281 = -bop_3280 in
                                     let tmp_call_3282 = exp(val_3281) in
                                     let val_3283 = arg_3279 * tmp_call_3282 in
                                     {val_3283},
                                   soac_v_2819, soac_v_2821) in
                            let root_lb_3285 =
                              if bop_3263
                              then y0_3261
                              else yl_3256 in
                            let bop_3286 = 0.0 <= root_lb_3285 in
                            let {untuple_3293} =
                              mapT(fn {real} (real arg_3287, real arg_3288) =>
                                     let bop_3289 = arg_3288 * root_lb_3285 in
                                     let val_3290 = -bop_3289 in
                                     let tmp_call_3291 = exp(val_3290) in
                                     let val_3292 = arg_3287 * tmp_call_3291 in
                                     {val_3292},
                                   untuple_3284, soac_v_2820) in
                            let {untuple_3297} =
                              reduceT(fn {real} (real x_3294, real y_3295) =>
                                        let val_3296 = x_3294 + y_3295 in
                                        {val_3296},
                                      {0.0}, untuple_3293) in
                            let tmp_lit_3298 = untuple_3297 - 1.0 in
                            let bop_3299 = tmp_lit_3298 < 0.0 in
                            let negate_3300 = -tmp_lit_3298 in
                            let root_ub_3301 =
                              if bop_3277
                              then yu_3275
                              else y1_3266 in
                            let {untuple_3308} =
                              mapT(fn {real} (real arg_3302, real arg_3303) =>
                                     let bop_3304 = arg_3303 * root_ub_3301 in
                                     let val_3305 = -bop_3304 in
                                     let tmp_call_3306 = exp(val_3305) in
                                     let val_3307 = arg_3302 * tmp_call_3306 in
                                     {val_3307},
                                   untuple_3284, soac_v_2820) in
                            let {untuple_3312} =
                              reduceT(fn {real} (real x_3309, real y_3310) =>
                                        let val_3311 = x_3309 + y_3310 in
                                        {val_3311},
                                      {0.0}, untuple_3308) in
                            let tmp_lit_3313 = untuple_3312 - 1.0 in
                            let bop_3314 = tmp_lit_3313 < 0.0 in
                            let negate_3315 = -tmp_lit_3313 in
                            let bop_3316 = tmp_lit_3298 * tmp_lit_3313 in
                            let bop_3317 = 0.0 <= bop_3316 in
                            let {root_3434, iteration_3435, error_3436} =
                              if bop_3317
                              then if bop_3286
                                   then {0.0, 0,
                                         10000000000000000000000000000000000000000000000000.0}
                                   else {0.0, 0,
                                         -10000000000000000000000000000000000000000000000000.0}
                              else let tmp_bop_3318 =
                                     if bop_3299
                                     then negate_3300
                                     else tmp_lit_3298 in
                                   let tmp_bop_3319 =
                                     if bop_3314
                                     then negate_3315
                                     else tmp_lit_3313 in
                                   let bop_3320 = tmp_bop_3318 < tmp_bop_3319 in
                                   let {fa_3321, fb_3322} =
                                     if bop_3320
                                     then {tmp_lit_3313, tmp_lit_3298}
                                     else {tmp_lit_3298, tmp_lit_3313} in
                                   loop ({a_3323, b_3324, c_3325, d_3326,
                                          fa_3327, fb_3328, fc_3329, mflag_3330,
                                          it_3331} = {root_lb_3285,
                                                      root_ub_3301,
                                                      root_lb_3285, 0.0,
                                                      fa_3321, fb_3322, fa_3321,
                                                      True,
                                                      0}) = for i_3332 < 1000 do
                                     let bop_3333 = fb_3328 = 0.0 in
                                     let bop_3334 = fa_3327 = fc_3329 in
                                     let bop_3335 = fb_3328 = fc_3329 in
                                     let bop_3336 = a_3323 * fb_3328 in
                                     let bop_3337 = bop_3336 * fc_3329 in
                                     let bop_3338 = fa_3327 - fb_3328 in
                                     let bop_3339 = fa_3327 - fc_3329 in
                                     let bop_3340 = bop_3338 * bop_3339 in
                                     let bop_3341 = b_3324 * fa_3327 in
                                     let bop_3342 = bop_3341 * fc_3329 in
                                     let bop_3343 = fb_3328 - fa_3327 in
                                     let bop_3344 = fb_3328 - fc_3329 in
                                     let bop_3345 = bop_3343 * bop_3344 in
                                     let bop_3346 = c_3325 * fa_3327 in
                                     let bop_3347 = bop_3346 * fb_3328 in
                                     let bop_3348 = fc_3329 - fa_3327 in
                                     let bop_3349 = fc_3329 - fb_3328 in
                                     let bop_3350 = bop_3348 * bop_3349 in
                                     let bop_3351 = 3.0 * a_3323 in
                                     let bop_3352 = bop_3351 + b_3324 in
                                     let bop_3353 = bop_3352 / 4.0 in
                                     let not_3354 = not mflag_3330 in
                                     let bop_3355 = a_3323 + b_3324 in
                                     let bop_3356 = bop_3355 / 2.0 in
                                     let val_3357 = b_3324 - a_3323 in
                                     let bop_3358 = fb_3328 * val_3357 in
                                     let negate_3359 = -val_3357 in
                                     let bop_3360 = val_3357 < 0.0 in
                                     let tmp_bop_3361 =
                                       if bop_3360
                                       then negate_3359
                                       else val_3357 in
                                     let bop_3362 = tmp_bop_3361 < 0.0001 in
                                     let norm_3363 = bop_3333 || bop_3362 in
                                     let val_3364 = b_3324 - c_3325 in
                                     let negate_3365 = -val_3364 in
                                     let bop_3366 = val_3364 < 0.0 in
                                     let val_3367 = c_3325 - d_3326 in
                                     let negate_3368 = -val_3367 in
                                     let bop_3369 = val_3367 < 0.0 in
                                     if norm_3363
                                     then {a_3323, b_3324, c_3325, d_3326,
                                           fa_3327, fb_3328, fc_3329,
                                           mflag_3330, it_3331}
                                     else let tmp_bop_3370 =
                                            if bop_3366
                                            then negate_3365
                                            else val_3364 in
                                          let bop_3371 = tmp_bop_3370
                                                         <= 0.0001 in
                                          let norm_3372 = mflag_3330
                                                          && bop_3371 in
                                          let bop_3373 = tmp_bop_3370 / 2.0 in
                                          let tmp_bop_3374 =
                                            if bop_3369
                                            then negate_3368
                                            else val_3367 in
                                          let bop_3375 = tmp_bop_3374
                                                         <= 0.0001 in
                                          let norm_3376 = not_3354
                                                          && bop_3375 in
                                          let bop_3377 = tmp_bop_3374 / 2.0 in
                                          let norm_3378 = bop_3334
                                                          || bop_3335 in
                                          let s_3386 =
                                            if norm_3378
                                            then let bop_3379 = bop_3358
                                                                / bop_3343 in
                                                 let bop_3380 = b_3324
                                                                - bop_3379 in
                                                 bop_3380
                                            else let s1_3381 = bop_3337
                                                               / bop_3340 in
                                                 let s2_3382 = bop_3342
                                                               / bop_3345 in
                                                 let bop_3383 = s1_3381
                                                                + s2_3382 in
                                                 let s3_3384 = bop_3347
                                                               / bop_3350 in
                                                 let bop_3385 = bop_3383
                                                                + s3_3384 in
                                                 bop_3385 in
                                          let bop_3387 = bop_3353 <= s_3386 in
                                          let bop_3388 = s_3386 <= b_3324 in
                                          let norm_3389 = bop_3387
                                                          && bop_3388 in
                                          let not_3390 = not norm_3389 in
                                          let val_3391 = s_3386 - b_3324 in
                                          let bop_3392 = val_3391 < 0.0 in
                                          let negate_3393 = -val_3391 in
                                          let tmp_bop_3394 =
                                            if bop_3392
                                            then negate_3393
                                            else val_3391 in
                                          let bop_3395 = bop_3377
                                                         <= tmp_bop_3394 in
                                          let norm_3396 = not_3354
                                                          && bop_3395 in
                                          let bop_3397 = bop_3373
                                                         <= tmp_bop_3394 in
                                          let norm_3398 = mflag_3330
                                                          && bop_3397 in
                                          let norm_3399 = not_3390
                                                          || norm_3398 in
                                          let norm_3400 = norm_3399
                                                          || norm_3396 in
                                          let norm_3401 = norm_3400
                                                          || norm_3372 in
                                          let norm_3402 = norm_3401
                                                          || norm_3376 in
                                          let {mflag_3403, s_3404} =
                                            if norm_3402
                                            then {True, bop_3356}
                                            else {False, s_3386} in
                                          let {untuple_3411} =
                                            mapT(fn {real} (real arg_3405,
                                                            real arg_3406) =>
                                                   let bop_3407 = arg_3406
                                                                  * s_3404 in
                                                   let val_3408 = -bop_3407 in
                                                   let tmp_call_3409 = exp(val_3408) in
                                                   let val_3410 = arg_3405
                                                                  * tmp_call_3409 in
                                                   {val_3410},
                                                 untuple_3284, soac_v_2820) in
                                          let {untuple_3415} =
                                            reduceT(fn {real} (real x_3412,
                                                               real y_3413) =>
                                                      let val_3414 = x_3412
                                                                     + y_3413 in
                                                      {val_3414},
                                                    {0.0}, untuple_3411) in
                                          let fs_3416 = untuple_3415 - 1.0 in
                                          let bop_3417 = fa_3327 * fs_3416 in
                                          let bop_3418 = bop_3417 < 0.0 in
                                          let {a_3419, b_3420, fa_3421,
                                               fb_3422} =
                                            if bop_3418
                                            then {a_3323, s_3404, fa_3327,
                                                  fs_3416}
                                            else {s_3404, b_3324, fs_3416,
                                                  fb_3328} in
                                          let bop_3423 = fa_3421 < 0.0 in
                                          let negate_3424 = -fa_3421 in
                                          let bop_3425 = fb_3422 < 0.0 in
                                          let negate_3426 = -fb_3422 in
                                          let tmp_bop_3427 =
                                            if bop_3425
                                            then negate_3426
                                            else fb_3422 in
                                          let tmp_bop_3428 =
                                            if bop_3423
                                            then negate_3424
                                            else fa_3421 in
                                          let bop_3429 = tmp_bop_3428
                                                         < tmp_bop_3427 in
                                          let {a_3430, b_3431, fa_3432,
                                               fb_3433} =
                                            if bop_3429
                                            then {b_3420, a_3419, fb_3422,
                                                  fa_3421}
                                            else {a_3419, b_3420, fa_3421,
                                                  fb_3422} in
                                          {a_3430, b_3431, b_3324, c_3325,
                                           fa_3432, fb_3433, fb_3328,
                                           mflag_3403, i_3332} in
                                   {b_3324, it_3331, fb_3328} in
                            let bop_3437 = error_3436
                                           = -10000000000000000000000000000000000000000000000000.0 in
                            let bop_3438 = error_3436
                                           = 10000000000000000000000000000000000000000000000000.0 in
                            if bop_3437
                            then bop_3262
                            else if bop_3438
                                 then bop_3268
                                 else root_3434 in
           let bop_3440 = g_3234 - h_3439 in
           let bop_3441 = 0.5 * bop_3440 in
           let df_3442 = bop_3441 / eps_1845 in
           let {untuple_3576} =
             mapT(fn {real} (real arg_3443, real arg_3444) =>
                    let bop_3445 = sqrt2sigmax_1846 * arg_3443 in
                    let x_3446 = bop_3445 + mux_1975 in
                    let bop_3447 = x_3446 - mux_1975 in
                    let bop_3448 = df_3442 * bop_3447 in
                    let yhat_x_3449 = f_3029 + bop_3448 in
                    let bop_3450 = yhat_x_3449 - muy_1991 in
                    let bop_3451 = bop_3450 / sigmay_rhoxycs_1881 in
                    let bop_3452 = t2_1876 * bop_3447 in
                    let h1_3453 = bop_3451 - bop_3452 in
                    let val_3454 = -h1_3453 in
                    let u_3455 = val_3454 / 1.4142135623730951 in
                    let bop_3456 = u_3455 < 0.0 in
                    let bop_3457 = 0.3275911 * u_3455 in
                    let bop_3458 = 1.0 + bop_3457 in
                    let bop_3459 = u_3455 * u_3455 in
                    let val_3460 = -bop_3459 in
                    let val_3461 = -u_3455 in
                    let bop_3462 = 0.3275911 * val_3461 in
                    let bop_3463 = 1.0 + bop_3462 in
                    let bop_3464 = val_3461 * val_3461 in
                    let val_3465 = -bop_3464 in
                    let e_3501 =
                      if bop_3456
                      then let tmp_call_3466 = exp(val_3465) in
                           let t_3467 = 1.0 / bop_3463 in
                           let bop_3468 = 0.254829592 * t_3467 in
                           let t2_3469 = t_3467 * t_3467 in
                           let bop_3470 = -0.284496736 * t2_3469 in
                           let bop_3471 = bop_3468 + bop_3470 in
                           let t4_3472 = t2_3469 * t2_3469 in
                           let bop_3473 = -1.453152027 * t4_3472 in
                           let t3_3474 = t_3467 * t2_3469 in
                           let bop_3475 = 1.421413741 * t3_3474 in
                           let bop_3476 = bop_3471 + bop_3475 in
                           let bop_3477 = bop_3476 + bop_3473 in
                           let t5_3478 = t2_3469 * t3_3474 in
                           let bop_3479 = 1.061405429 * t5_3478 in
                           let bop_3480 = bop_3477 + bop_3479 in
                           let bop_3481 = bop_3480 * tmp_call_3466 in
                           let tmp_neg_3482 = 1.0 - bop_3481 in
                           let negate_3483 = -tmp_neg_3482 in
                           negate_3483
                      else let tmp_call_3484 = exp(val_3460) in
                           let t_3485 = 1.0 / bop_3458 in
                           let bop_3486 = 0.254829592 * t_3485 in
                           let t2_3487 = t_3485 * t_3485 in
                           let bop_3488 = -0.284496736 * t2_3487 in
                           let bop_3489 = bop_3486 + bop_3488 in
                           let t4_3490 = t2_3487 * t2_3487 in
                           let bop_3491 = -1.453152027 * t4_3490 in
                           let t3_3492 = t_3485 * t2_3487 in
                           let bop_3493 = 1.421413741 * t3_3492 in
                           let bop_3494 = bop_3489 + bop_3493 in
                           let bop_3495 = bop_3494 + bop_3491 in
                           let t5_3496 = t2_3487 * t3_3492 in
                           let bop_3497 = 1.061405429 * t5_3496 in
                           let bop_3498 = bop_3495 + bop_3497 in
                           let bop_3499 = bop_3498 * tmp_call_3484 in
                           let bop_3500 = 1.0 - bop_3499 in
                           bop_3500 in
                    let bop_3502 = 1.0 + e_3501 in
                    let tmp_bop_3503 = 0.5 * bop_3502 in
                    let tmp_3504 = bop_3447 / sigmax_1844 in
                    let bop_3505 = 0.5 * tmp_3504 in
                    let bop_3506 = bop_3505 * tmp_3504 in
                    let val_3507 = -bop_3506 in
                    let tmp_call_3508 = exp(val_3507) in
                    let {untuple_3568} =
                      mapT(fn {real} (real arg_3509, real arg_3510,
                                      real arg_3511) =>
                             let bop_3512 = arg_3509 * sigmay_rhoxycs_1881 in
                             let h2_3513 = h1_3453 + bop_3512 in
                             let val_3514 = -h2_3513 in
                             let u_3515 = val_3514 / 1.4142135623730951 in
                             let bop_3516 = u_3515 < 0.0 in
                             let bop_3517 = 0.3275911 * u_3515 in
                             let bop_3518 = 1.0 + bop_3517 in
                             let bop_3519 = u_3515 * u_3515 in
                             let val_3520 = -bop_3519 in
                             let val_3521 = -u_3515 in
                             let bop_3522 = 0.3275911 * val_3521 in
                             let bop_3523 = 1.0 + bop_3522 in
                             let bop_3524 = val_3521 * val_3521 in
                             let val_3525 = -bop_3524 in
                             let e_3561 =
                               if bop_3516
                               then let tmp_call_3526 = exp(val_3525) in
                                    let t_3527 = 1.0 / bop_3523 in
                                    let bop_3528 = 0.254829592 * t_3527 in
                                    let t2_3529 = t_3527 * t_3527 in
                                    let bop_3530 = -0.284496736 * t2_3529 in
                                    let bop_3531 = bop_3528 + bop_3530 in
                                    let t4_3532 = t2_3529 * t2_3529 in
                                    let bop_3533 = -1.453152027 * t4_3532 in
                                    let t3_3534 = t_3527 * t2_3529 in
                                    let bop_3535 = 1.421413741 * t3_3534 in
                                    let bop_3536 = bop_3531 + bop_3535 in
                                    let bop_3537 = bop_3536 + bop_3533 in
                                    let t5_3538 = t2_3529 * t3_3534 in
                                    let bop_3539 = 1.061405429 * t5_3538 in
                                    let bop_3540 = bop_3537 + bop_3539 in
                                    let bop_3541 = bop_3540 * tmp_call_3526 in
                                    let tmp_neg_3542 = 1.0 - bop_3541 in
                                    let negate_3543 = -tmp_neg_3542 in
                                    negate_3543
                               else let tmp_call_3544 = exp(val_3520) in
                                    let t_3545 = 1.0 / bop_3518 in
                                    let bop_3546 = 0.254829592 * t_3545 in
                                    let t2_3547 = t_3545 * t_3545 in
                                    let bop_3548 = -0.284496736 * t2_3547 in
                                    let bop_3549 = bop_3546 + bop_3548 in
                                    let t4_3550 = t2_3547 * t2_3547 in
                                    let bop_3551 = -1.453152027 * t4_3550 in
                                    let t3_3552 = t_3545 * t2_3547 in
                                    let bop_3553 = 1.421413741 * t3_3552 in
                                    let bop_3554 = bop_3549 + bop_3553 in
                                    let bop_3555 = bop_3554 + bop_3551 in
                                    let t5_3556 = t2_3547 * t3_3552 in
                                    let bop_3557 = 1.061405429 * t5_3556 in
                                    let bop_3558 = bop_3555 + bop_3557 in
                                    let bop_3559 = bop_3558 * tmp_call_3544 in
                                    let bop_3560 = 1.0 - bop_3559 in
                                    bop_3560 in
                             let bop_3562 = 1.0 + e_3561 in
                             let tmp_bop_3563 = 0.5 * bop_3562 in
                             let val_3564 = arg_3511 * x_3446 in
                             let tmp_call_3565 = exp(val_3564) in
                             let bop_3566 = arg_3510 * tmp_call_3565 in
                             let val_3567 = bop_3566 * tmp_bop_3563 in
                             {val_3567},
                           soac_v_2820, soac_v_2823, soac_v_2824) in
                    let {untuple_3572} =
                      reduceT(fn {real} (real x_3569, real y_3570) =>
                                let val_3571 = x_3569 + y_3570 in
                                {val_3571},
                              {0.0}, untuple_3568) in
                    let bop_3573 = tmp_bop_3503 - untuple_3572 in
                    let integrand_res_3574 = tmp_call_3508 * bop_3573 in
                    let val_3575 = arg_3444 * integrand_res_3574 in
                    {val_3575},
                  tmp_lit_5, norm_6) in
           let {untuple_3580} =
             reduceT(fn {real} (real x_3577, real y_3578) =>
                       let val_3579 = x_3577 + y_3578 in
                       {val_3579},
                     {0.0}, untuple_3576) in
           let bop_3581 = untuple_3580 / 1.7724538509055159 in
           let g2pp_price_3582 = tmp_call_1832 * bop_3581 in
           let bop_3583 = g2pp_price_3582 - market_price_2482 in
           let res_3584 = bop_3583 / market_price_2482 in
           let val_3585 = res_3584 * res_3584 in
           {val_3585},
         tup_arr_elem_1, tup_arr_elem_2, tup_arr_elem_3, tup_arr_elem_4) in
  let {untuple_3590} =
    reduceT(fn {real} (real x_3587, real y_3588) =>
              let val_3589 = x_3587 + y_3588 in
              {val_3589},
            {0.0}, untuple_3586) in
  let val_3591 = untuple_3590 / 196.0 in
  let tmp_call_3592 = sqrt(val_3591) in
  let rms_3593 = 100.0 * tmp_call_3592 in
  rms_3593
