fun real main() =
  let {tup_arr_cert_0, tup_arr_elem_1, tup_arr_elem_2, tup_arr_elem_3,
       tup_arr_elem_4} =
    {Checked,
     [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0,
      30.0],
     [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0,
      2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0,
      3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0,
      5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0,
      7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0,
      8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
      9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
      10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 15.0, 15.0, 15.0, 15.0, 15.0,
      15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 20.0, 20.0, 20.0,
      20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 25.0,
      25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,
      25.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0,
      30.0, 30.0, 30.0],
     [1.052, 0.81485, 0.6165, 0.46995, 0.38295, 0.3325, 0.3016, 0.2815, 0.26435,
      0.2496, 0.2516, 0.28835, 0.27155, 0.23465, 0.61445, 0.54805, 0.46795,
      0.3919, 0.3434, 0.3083, 0.28655, 0.2697, 0.25775, 0.2443, 0.26495,
      0.28195, 0.26845, 0.20995, 0.5835, 0.49255, 0.42825, 0.3695, 0.329,
      0.3022, 0.28165, 0.26615, 0.25485, 0.24375, 0.2718, 0.28135, 0.26865,
      0.2131, 0.5415, 0.46235, 0.403, 0.3559, 0.3232, 0.29675, 0.27715, 0.26385,
      0.254, 0.2454, 0.27845, 0.2821, 0.2678, 0.2131, 0.517, 0.446, 0.3903,
      0.34755, 0.3166, 0.29305, 0.2745, 0.2639, 0.2534, 0.2499, 0.28315, 0.2825,
      0.277, 0.21175, 0.478, 0.42105, 0.37715, 0.3378, 0.311, 0.2895, 0.2745,
      0.264, 0.2573, 0.25475, 0.28815, 0.28195, 0.26015, 0.2097, 0.452, 0.4074,
      0.368, 0.3307, 0.30645, 0.2877, 0.27475, 0.2664, 0.26155, 0.26035, 0.292,
      0.2825, 0.25685, 0.2081, 0.43395, 0.39445, 0.35885, 0.3281, 0.30395,
      0.28745, 0.2767, 0.27065, 0.26625, 0.26625, 0.2921, 0.2814, 0.25265,
      0.2083, 0.42285, 0.3857, 0.3521, 0.3239, 0.30285, 0.2895, 0.2799, 0.27485,
      0.2712, 0.27205, 0.29205, 0.27855, 0.24945, 0.219, 0.41765, 0.38095,
      0.34795, 0.3217, 0.30365, 0.2916, 0.2842, 0.27985, 0.2769, 0.2775, 0.306,
      0.2763, 0.2458, 0.22, 0.37905, 0.35465, 0.33505, 0.31725, 0.3008, 0.29075,
      0.28365, 0.2787, 0.27385, 0.2709, 0.2689, 0.24225, 0.2096, 0.18285,
      0.37975, 0.3605, 0.3407, 0.321, 0.3063, 0.29315, 0.28395, 0.2777, 0.27205,
      0.26675, 0.24875, 0.21735, 0.1939, 0.17205, 0.38115, 0.3627, 0.34425,
      0.3222, 0.3084, 0.2941, 0.28285, 0.2751, 0.2663, 0.26055, 0.2338, 0.20735,
      0.1823, 0.1686, 0.38285, 0.3633, 0.34125, 0.3188, 0.30305, 0.2888, 0.2748,
      0.26725, 0.25985, 0.25165, 0.2267, 0.1989, 0.18115, 0.16355]} in
  let tmp_lit_5 = [0.0, 0.6568095668820999, -0.6568095668820998,
                   -1.3265570844949335, 1.326557084494933, 2.025948015825757,
                   -2.025948015825756, -2.7832900997816497, 2.7832900997816474,
                   3.6684708465595857, -3.668470846559584] in
  let norm_6 = [0.6547592869145917, 0.6609604194409607, 0.6609604194409606,
                0.6812118810666693, 0.681211881066669, 0.7219536247283848,
                0.7219536247283852, 0.8025168688510406, 0.8025168688510397,
                1.0065267861723648, 1.0065267861723775] in
  let {untuple_2109} =
    mapT(fn {real} (real arg_7, real arg_8, real arg_9, real arg_10) =>
           let bop_11 = 12.0 * arg_9 in
           let val_12 = bop_11 / arg_8 in
           let tmp_call_13 = trunc(val_12) in
           let val_14 = replicate(tmp_call_13, 0.0) in
           let val_15 = replicate(tmp_call_13, 0.0) in
           let bop_16 = tmp_call_13 - 1 in
           let bop_17 = tmp_call_13 = 1 in
           let val_18 = replicate(tmp_call_13, 0.0) in
           let val_19 = arg_7 * 12.0 in
           let nbmonths_20 = trunc(val_19) in
           let m_21 = 1 + nbmonths_20 in
           let val_22 = m_21 - 1 in
           let bop_23 = val_22 / 12 in
           let bop_24 = bop_23 * 12 in
           let bop_25 = 2012 + bop_23 in
           let bop_26 = bop_25 - 1 in
           let tmp_bop_27 = val_22 - bop_24 in
           let bop_28 = tmp_bop_27 + 1 in
           let bop_29 = bop_28 <= 0 in
           let bop_30 = bop_28 + 12 in
           let {y_31, m_32} = if bop_29
                              then {bop_26, bop_30}
                              else {bop_25, bop_28} in
           let bop_33 = y_31 / 4 in
           let bop_34 = bop_33 * 4 in
           let bop_35 = y_31 / 100 in
           let bop_36 = bop_35 * 100 in
           let bop_37 = y_31 / 400 in
           let bop_38 = bop_37 * 400 in
           let bop_39 = m_32 = 2 in
           let bop_40 = m_32 = 4 in
           let bop_41 = m_32 = 6 in
           let bop_42 = m_32 = 9 in
           let bop_43 = m_32 = 11 in
           let bop_44 = m_32 = 1 in
           let norm_45 = bop_44 || bop_39 in
           let bop_46 = y_31 + 4800 in
           let bop_47 = bop_46 - 1 in
           let bop_48 = 1461 * bop_47 in
           let bop_49 = bop_48 / 4 in
           let bop_50 = 1461 * bop_46 in
           let bop_51 = bop_50 / 4 in
           let bop_52 = m_32 + 10 in
           let bop_53 = 367 * bop_52 in
           let bop_54 = bop_53 / 12 in
           let bop_55 = bop_49 + bop_54 in
           let bop_56 = y_31 + 4900 in
           let bop_57 = bop_56 - 1 in
           let bop_58 = bop_57 / 100 in
           let bop_59 = 3 * bop_58 in
           let bop_60 = bop_59 / 4 in
           let bop_61 = bop_55 - bop_60 in
           let bop_62 = bop_56 / 100 in
           let bop_63 = 3 * bop_62 in
           let bop_64 = bop_63 / 4 in
           let bop_65 = m_32 - 2 in
           let bop_66 = 367 * bop_65 in
           let bop_67 = bop_66 / 12 in
           let bop_68 = bop_51 + bop_67 in
           let bop_69 = bop_68 - bop_64 in
           let ym_70 = if norm_45
                       then bop_61
                       else bop_69 in
           let tmp_bop_71 = y_31 - bop_34 in
           let bop_72 = tmp_bop_71 = 0 in
           let tmp_bop_73 = y_31 - bop_36 in
           let bop_74 = tmp_bop_73 = 0 in
           let not_75 = not bop_74 in
           let tmp_bop_76 = y_31 - bop_38 in
           let bop_77 = tmp_bop_76 = 0 in
           let norm_78 = not_75 || bop_77 in
           let tmp_and_79 = bop_72 && norm_78 in
           let norm_80 = bop_39 && tmp_and_79 in
           let val_84 = if norm_80
                        then 29
                        else if bop_39
                             then 28
                             else let norm_81 = bop_40 || bop_41 in
                                  let norm_82 = norm_81 || bop_42 in
                                  let norm_83 = norm_82 || bop_43 in
                                  if norm_83
                                  then 30
                                  else 31 in
           let bop_85 = 1 < val_84 in
           let tmp_lit_86 = if bop_85
                            then 1
                            else val_84 in
           let bop_87 = ym_70 + tmp_lit_86 in
           let bop_88 = bop_87 - 32075 in
           let tmp_89 = bop_88 - 2444238 in
           let bop_90 = tmp_89 * 1440 in
           let resmin_91 = bop_90 + 720 in
           let tmp_call_92 = toReal(resmin_91) in
           let bop_93 = tmp_call_92 - 16834320.0 in
           let tmp_bop_94 = bop_93 / 1440.0 in
           let tmat0_95 = tmp_bop_94 / 365.0 in
           let bop_96 = 0.02453 * tmat0_95 in
           let val_97 = -bop_96 in
           let tmp_call_98 = exp(val_97) in
           let bop_99 = 1.0 - tmp_call_98 in
           let bop_100 = 0.858792992801827 * bop_99 in
           let ba_101 = bop_99 / 0.02453 in
           let bop_102 = 81.53281695882593 * tmp_call_98 in
           let exp2xtau_103 = tmp_call_98 * tmp_call_98 in
           let bop_104 = 20.383204239706483 * exp2xtau_103 in
           let bop_105 = 0.98376 * tmat0_95 in
           let val_106 = -bop_105 in
           let tmp_call_107 = exp(val_106) in
           let bop_108 = 1.0 - tmp_call_107 in
           let bop_109 = -0.08240592094585045 * bop_108 in
           let bb_110 = bop_108 / 0.98376 in
           let bop_111 = 2.033016182808815 * tmp_call_107 in
           let exp2xtau_112 = tmp_call_107 * tmp_call_107 in
           let bop_113 = 0.5082540457022038 * exp2xtau_112 in
           let val_114 = val_106 - bop_96 in
           let tmp_call_115 = exp(val_114) in
           let val_116 = val_97 - bop_105 in
           let tmp_call_117 = exp(val_116) in
           let bop_118 = tmat0_95 + bop_102 in
           let bop_119 = bop_118 - bop_104 in
           let bop_120 = bop_119 - 61.149612719119446 in
           let t1_121 = 0.9556596754408898 * bop_120 in
           let bop_122 = tmat0_95 + bop_111 in
           let bop_123 = bop_122 - bop_113 in
           let bop_124 = bop_123 - 1.5247621371066113 in
           let t2_125 = 0.014460761693212401 * bop_124 in
           let bop_126 = t1_121 + t2_125 in
           let bop_127 = 1.00829 * tmat0_95 in
           let val_128 = -bop_127 in
           let tmp_call_129 = exp(val_128) in
           let bop_130 = 1.0 - tmp_call_129 in
           let tmp_bop_131 = bop_130 / 1.00829 in
           let bop_132 = tmat0_95 - ba_101 in
           let bop_133 = bop_132 - bb_110 in
           let bop_134 = bop_133 + tmp_bop_131 in
           let t3_135 = -0.19373336527812574 * bop_134 in
           let bop_136 = bop_126 + t3_135 in
           let bop_137 = 0.03 * tmat0_95 in
           let val_138 = -bop_137 in
           let tmp_call_139 = exp(val_138) in
           let bop_140 = 0.04906 * tmat0_95 in
           let val_141 = -bop_140 in
           let tmp_call_142 = exp(val_141) in
           let bop_143 = 1.0 - tmp_call_142 in
           let val_144 = bop_143 / 0.04906 in
           let tmp_call_145 = sqrt(val_144) in
           let sigmax_146 = 0.02398 * tmp_call_145 in
           let eps_147 = 0.5 * sigmax_146 in
           let sqrt2sigmax_148 = 1.4142135623730951 * sigmax_146 in
           let bop_149 = 1.96752 * tmat0_95 in
           let val_150 = -bop_149 in
           let tmp_call_151 = exp(val_150) in
           let bop_152 = 1.0 - tmp_call_151 in
           let val_153 = bop_152 / 1.96752 in
           let tmp_call_154 = sqrt(val_153) in
           let sigmay_155 = 0.1183 * tmp_call_154 in
           let bop_156 = sigmax_146 * sigmay_155 in
           let bop_157 = -0.0023375512159999998 / bop_156 in
           let rhoxy_158 = bop_157 * tmp_bop_131 in
           let bop_159 = rhoxy_158 * rhoxy_158 in
           let rhoxyc_160 = 1.0 - bop_159 in
           let bop_161 = 0.5 * rhoxyc_160 in
           let bop_162 = rhoxyc_160 / 0.98376 in
           let rhoxycs_163 = sqrt(rhoxyc_160) in
           let bop_164 = sigmax_146 * rhoxycs_163 in
           let bop_165 = -3.71901648545568 * rhoxycs_163 in
           let t2_166 = rhoxy_158 / bop_164 in
           let bop_167 = rhoxy_158 * sigmay_155 in
           let t4_168 = bop_167 / sigmax_146 in
           let bop_169 = bop_161 * sigmay_155 in
           let bop_170 = bop_169 * sigmay_155 in
           let sigmay_rhoxycs_171 = sigmay_155 * rhoxycs_163 in
           let bop_172 = tmat0_95 + tmat0_95 in
           let bop_173 = 0.02453 * bop_172 in
           let val_174 = -bop_173 in
           let tmp_call_175 = exp(val_174) in
           let bop_176 = 0.98376 * bop_172 in
           let val_177 = -bop_176 in
           let tmp_call_178 = exp(val_177) in
           let val_179 = trunc(tmp_call_92) in
           let jul_180 = val_179 / 1440 in
           let bop_181 = jul_180 + 68569 in
           let l_182 = bop_181 + 2444238 in
           let bop_183 = 4 * l_182 in
           let n_184 = bop_183 / 146097 in
           let bop_185 = 146097 * n_184 in
           let bop_186 = bop_185 + 3 in
           let bop_187 = bop_186 / 4 in
           let bop_188 = n_184 - 49 in
           let bop_189 = 100 * bop_188 in
           let l_190 = l_182 - bop_187 in
           let bop_191 = l_190 + 1 in
           let bop_192 = 4000 * bop_191 in
           let i_193 = bop_192 / 1461001 in
           let bop_194 = 1461 * i_193 in
           let bop_195 = bop_194 / 4 in
           let bop_196 = bop_189 + i_193 in
           let bop_197 = l_190 - bop_195 in
           let l_198 = bop_197 + 31 in
           let bop_199 = 80 * l_198 in
           let j_200 = bop_199 / 2447 in
           let bop_201 = 2447 * j_200 in
           let bop_202 = bop_201 / 80 in
           let bop_203 = j_200 + 2 in
           let l_204 = j_200 / 11 in
           let bop_205 = 12 * l_204 in
           let m_206 = bop_203 - bop_205 in
           let y_207 = bop_196 + l_204 in
           let d_208 = l_198 - bop_202 in
           let bop_209 = jul_180 * 1440 in
           let daytime_210 = val_179 - bop_209 in
           let bop_211 = daytime_210 = 720 in
           let bop_212 = daytime_210 / 60 in
           let bop_213 = bop_212 * 60 in
           let tmp_lit_214 = daytime_210 - bop_213 in
           let {y_215, m_216, d_217, h_218, min_219} = if bop_211
                                                       then {y_207, m_206,
                                                             d_208, 12, 0}
                                                       else {y_207, m_206,
                                                             d_208, bop_212,
                                                             tmp_lit_214} in
           let bop_220 = tmp_call_92 - tmp_call_92 in
           let tmp_bop_221 = bop_220 / 1440.0 in
           let tmatt_222 = tmp_bop_221 / 365.0 in
           let bop_223 = 0.02453 * tmatt_222 in
           let val_224 = -bop_223 in
           let tmp_call_225 = exp(val_224) in
           let tmp5_226 = tmp_call_225 - tmp_call_175 in
           let bop_227 = 0.4778298377204449 * tmp5_226 in
           let bop_228 = bop_100 - bop_227 in
           let tmp6_229 = tmp_call_225 - tmp_call_117 in
           let bop_230 = -0.09451007915679466 * tmp6_229 in
           let bop_231 = 0.98376 * tmatt_222 in
           let val_232 = -bop_231 in
           let tmp_call_233 = exp(val_232) in
           let tmp6_234 = tmp_call_233 - tmp_call_115 in
           let bop_235 = -0.0023566034822682085 * tmp6_234 in
           let tmp_neg_236 = bop_228 - bop_235 in
           let mux_237 = -tmp_neg_236 in
           let bop_238 = mux_237 * t4_168 in
           let bop_239 = mux_237 - mux_237 in
           let bop_240 = rhoxy_158 * bop_239 in
           let val_241 = mux_237 + eps_147 in
           let bop_242 = val_241 - mux_237 in
           let bop_243 = rhoxy_158 * bop_242 in
           let val_244 = mux_237 - eps_147 in
           let bop_245 = val_244 - mux_237 in
           let bop_246 = rhoxy_158 * bop_245 in
           let tmp5_247 = tmp_call_233 - tmp_call_178 in
           let bop_248 = 0.007230380846606201 * tmp5_247 in
           let bop_249 = bop_109 - bop_248 in
           let tmp_neg_250 = bop_249 - bop_230 in
           let muy_251 = -tmp_neg_250 in
           let val_255 = if norm_80
                         then 29
                         else if bop_39
                              then 28
                              else let norm_252 = bop_40 || bop_41 in
                                   let norm_253 = norm_252 || bop_42 in
                                   let norm_254 = norm_253 || bop_43 in
                                   if norm_254
                                   then 30
                                   else 31 in
           let bop_256 = 1 < val_255 in
           let tmp_lit_257 = if bop_256
                             then 1
                             else val_255 in
           let bop_258 = ym_70 + tmp_lit_257 in
           let bop_259 = bop_258 - 32075 in
           let tmp_260 = bop_259 - 2444238 in
           let bop_261 = tmp_260 * 1440 in
           let resmin_262 = bop_261 + 720 in
           let tmp_call_263 = toReal(resmin_262) in
           let bop_264 = tmp_call_263 - 16834320.0 in
           let tmp_bop_265 = bop_264 / 1440.0 in
           let sqrtt_266 = tmp_bop_265 / 365.0 in
           let bop_267 = arg_10 * sqrtt_266 in
           let val_268 = trunc(tmp_call_263) in
           let jul_269 = val_268 / 1440 in
           let bop_270 = jul_269 + 68569 in
           let l_271 = bop_270 + 2444238 in
           let bop_272 = 4 * l_271 in
           let n_273 = bop_272 / 146097 in
           let bop_274 = 146097 * n_273 in
           let bop_275 = bop_274 + 3 in
           let bop_276 = bop_275 / 4 in
           let bop_277 = n_273 - 49 in
           let bop_278 = 100 * bop_277 in
           let l_279 = l_271 - bop_276 in
           let bop_280 = l_279 + 1 in
           let bop_281 = 4000 * bop_280 in
           let i_282 = bop_281 / 1461001 in
           let bop_283 = 1461 * i_282 in
           let bop_284 = bop_283 / 4 in
           let bop_285 = bop_278 + i_282 in
           let bop_286 = l_279 - bop_284 in
           let l_287 = bop_286 + 31 in
           let bop_288 = 80 * l_287 in
           let j_289 = bop_288 / 2447 in
           let bop_290 = 2447 * j_289 in
           let bop_291 = bop_290 / 80 in
           let bop_292 = j_289 + 2 in
           let l_293 = j_289 / 11 in
           let bop_294 = 12 * l_293 in
           let m_295 = bop_292 - bop_294 in
           let y_296 = bop_285 + l_293 in
           let d_297 = l_287 - bop_291 in
           let bop_298 = jul_269 * 1440 in
           let daytime_299 = val_268 - bop_298 in
           let bop_300 = daytime_299 = 720 in
           let bop_301 = daytime_299 / 60 in
           let bop_302 = bop_301 * 60 in
           let tmp_lit_303 = daytime_299 - bop_302 in
           let {y_304, m_305, d_306, h_307, min_308} = if bop_300
                                                       then {y_296, m_295,
                                                             d_297, 12, 0}
                                                       else {y_296, m_295,
                                                             d_297, bop_301,
                                                             tmp_lit_303} in
           let bop_309 = 0.5 * arg_10 in
           let bop_310 = bop_309 * sqrtt_266 in
           let nbmonths_311 = trunc(arg_8) in
           let {soac_v_502, soac_v_503} =
             mapT(fn {real, real} (int i_312) =>
                    let tmp_call_313 = toReal(i_312) in
                    let val_314 = tmp_call_313 * arg_8 in
                    let nbmonths_315 = trunc(val_314) in
                    let m_316 = m_216 + nbmonths_315 in
                    let val_317 = m_316 - 1 in
                    let bop_318 = val_317 / 12 in
                    let bop_319 = bop_318 * 12 in
                    let bop_320 = y_215 + bop_318 in
                    let bop_321 = bop_320 - 1 in
                    let tmp_bop_322 = val_317 - bop_319 in
                    let bop_324 = tmp_bop_322 + 1 in
                    let bop_325 = bop_324 <= 0 in
                    let bop_326 = bop_324 + 12 in
                    let {y_327, m_328} = if bop_325
                                         then {bop_321, bop_326}
                                         else {bop_320, bop_324} in
                    let bop_329 = y_327 / 4 in
                    let bop_330 = bop_329 * 4 in
                    let bop_331 = y_327 / 100 in
                    let bop_332 = bop_331 * 100 in
                    let bop_333 = y_327 / 400 in
                    let bop_334 = bop_333 * 400 in
                    let bop_335 = m_328 = 2 in
                    let bop_336 = m_328 = 4 in
                    let bop_337 = m_328 = 6 in
                    let bop_338 = m_328 = 9 in
                    let bop_339 = m_328 = 11 in
                    let bop_340 = m_328 = 1 in
                    let norm_341 = bop_340 || bop_335 in
                    let bop_342 = y_327 + 4800 in
                    let bop_343 = bop_342 - 1 in
                    let bop_344 = 1461 * bop_343 in
                    let bop_345 = bop_344 / 4 in
                    let bop_346 = 1461 * bop_342 in
                    let bop_347 = bop_346 / 4 in
                    let bop_348 = m_328 + 10 in
                    let bop_349 = 367 * bop_348 in
                    let bop_350 = bop_349 / 12 in
                    let bop_351 = bop_345 + bop_350 in
                    let bop_352 = y_327 + 4900 in
                    let bop_353 = bop_352 - 1 in
                    let bop_354 = bop_353 / 100 in
                    let bop_355 = 3 * bop_354 in
                    let bop_356 = bop_355 / 4 in
                    let bop_357 = bop_351 - bop_356 in
                    let bop_358 = bop_352 / 100 in
                    let bop_359 = 3 * bop_358 in
                    let bop_360 = bop_359 / 4 in
                    let bop_361 = m_328 - 2 in
                    let bop_362 = 367 * bop_361 in
                    let bop_363 = bop_362 / 12 in
                    let bop_364 = bop_347 + bop_363 in
                    let bop_365 = bop_364 - bop_360 in
                    let ym_366 = if norm_341
                                 then bop_357
                                 else bop_365 in
                    let tmp_bop_367 = y_327 - bop_330 in
                    let bop_368 = tmp_bop_367 = 0 in
                    let tmp_bop_369 = y_327 - bop_332 in
                    let bop_370 = tmp_bop_369 = 0 in
                    let not_371 = not bop_370 in
                    let tmp_bop_372 = y_327 - bop_334 in
                    let bop_373 = tmp_bop_372 = 0 in
                    let norm_374 = not_371 || bop_373 in
                    let tmp_and_375 = bop_368 && norm_374 in
                    let norm_376 = bop_335 && tmp_and_375 in
                    let val_380 = if norm_376
                                  then 29
                                  else if bop_335
                                       then 28
                                       else let norm_377 = bop_336 || bop_337 in
                                            let norm_378 = norm_377 || bop_338 in
                                            let norm_379 = norm_378 || bop_339 in
                                            if norm_379
                                            then 30
                                            else 31 in
                    let bop_381 = d_217 < val_380 in
                    let tmp_lit_382 = if bop_381
                                      then d_217
                                      else val_380 in
                    let bop_383 = ym_366 + tmp_lit_382 in
                    let bop_384 = bop_383 - 32075 in
                    let tmp_385 = bop_384 - 2444238 in
                    let bop_386 = tmp_385 * 1440 in
                    let resmin_387 = bop_386 + 720 in
                    let tmp_call_388 = toReal(resmin_387) in
                    let val_389 = trunc(tmp_call_388) in
                    let jul_390 = val_389 / 1440 in
                    let bop_391 = jul_390 + 68569 in
                    let l_392 = bop_391 + 2444238 in
                    let bop_393 = 4 * l_392 in
                    let n_394 = bop_393 / 146097 in
                    let bop_395 = 146097 * n_394 in
                    let bop_396 = bop_395 + 3 in
                    let bop_397 = bop_396 / 4 in
                    let bop_398 = n_394 - 49 in
                    let bop_399 = 100 * bop_398 in
                    let l_400 = l_392 - bop_397 in
                    let bop_401 = l_400 + 1 in
                    let bop_402 = 4000 * bop_401 in
                    let i_403 = bop_402 / 1461001 in
                    let bop_404 = 1461 * i_403 in
                    let bop_405 = bop_404 / 4 in
                    let bop_406 = bop_399 + i_403 in
                    let bop_407 = l_400 - bop_405 in
                    let l_408 = bop_407 + 31 in
                    let bop_409 = 80 * l_408 in
                    let j_410 = bop_409 / 2447 in
                    let bop_411 = 2447 * j_410 in
                    let bop_412 = bop_411 / 80 in
                    let bop_413 = j_410 + 2 in
                    let l_414 = j_410 / 11 in
                    let bop_415 = 12 * l_414 in
                    let m_416 = bop_413 - bop_415 in
                    let y_417 = bop_406 + l_414 in
                    let d_418 = l_408 - bop_412 in
                    let bop_419 = jul_390 * 1440 in
                    let daytime_420 = val_389 - bop_419 in
                    let bop_421 = daytime_420 = 720 in
                    let bop_422 = daytime_420 / 60 in
                    let bop_423 = bop_422 * 60 in
                    let tmp_lit_424 = daytime_420 - bop_423 in
                    let {y_425, m_426, d_427, h_428, min_429} = if bop_421
                                                                then {y_417,
                                                                      m_416,
                                                                      d_418, 12,
                                                                      0}
                                                                else {y_417,
                                                                      m_416,
                                                                      d_418,
                                                                      bop_422,
                                                                      tmp_lit_424} in
                    let m_430 = m_426 + nbmonths_311 in
                    let val_431 = m_430 - 1 in
                    let bop_432 = val_431 / 12 in
                    let bop_433 = bop_432 * 12 in
                    let tmp_bop_434 = val_431 - bop_433 in
                    let bop_435 = tmp_bop_434 + 1 in
                    let bop_436 = bop_435 <= 0 in
                    let bop_437 = bop_435 + 12 in
                    let bop_438 = y_425 + bop_432 in
                    let bop_439 = bop_438 - 1 in
                    let {y_440, m_441} = if bop_436
                                         then {bop_439, bop_437}
                                         else {bop_438, bop_435} in
                    let bop_442 = y_440 / 4 in
                    let bop_443 = bop_442 * 4 in
                    let bop_444 = y_440 / 100 in
                    let bop_445 = bop_444 * 100 in
                    let bop_446 = y_440 / 400 in
                    let bop_447 = bop_446 * 400 in
                    let bop_448 = m_441 = 2 in
                    let bop_449 = m_441 = 4 in
                    let bop_450 = m_441 = 6 in
                    let bop_451 = m_441 = 9 in
                    let bop_452 = m_441 = 11 in
                    let bop_453 = m_441 = 1 in
                    let norm_454 = bop_453 || bop_448 in
                    let bop_455 = y_440 + 4800 in
                    let bop_456 = bop_455 - 1 in
                    let bop_457 = 1461 * bop_456 in
                    let bop_458 = bop_457 / 4 in
                    let bop_459 = 1461 * bop_455 in
                    let bop_460 = bop_459 / 4 in
                    let bop_461 = m_441 + 10 in
                    let bop_462 = 367 * bop_461 in
                    let bop_463 = bop_462 / 12 in
                    let bop_464 = bop_458 + bop_463 in
                    let bop_465 = y_440 + 4900 in
                    let bop_466 = bop_465 - 1 in
                    let bop_467 = bop_466 / 100 in
                    let bop_468 = 3 * bop_467 in
                    let bop_469 = bop_468 / 4 in
                    let bop_470 = bop_464 - bop_469 in
                    let bop_471 = bop_465 / 100 in
                    let bop_472 = 3 * bop_471 in
                    let bop_473 = bop_472 / 4 in
                    let bop_474 = m_441 - 2 in
                    let bop_475 = 367 * bop_474 in
                    let bop_476 = bop_475 / 12 in
                    let bop_477 = bop_460 + bop_476 in
                    let bop_478 = bop_477 - bop_473 in
                    let ym_479 = if norm_454
                                 then bop_470
                                 else bop_478 in
                    let tmp_bop_480 = y_440 - bop_443 in
                    let bop_481 = tmp_bop_480 = 0 in
                    let tmp_bop_482 = y_440 - bop_445 in
                    let bop_483 = tmp_bop_482 = 0 in
                    let not_484 = not bop_483 in
                    let tmp_bop_485 = y_440 - bop_447 in
                    let bop_486 = tmp_bop_485 = 0 in
                    let norm_487 = not_484 || bop_486 in
                    let tmp_and_488 = bop_481 && norm_487 in
                    let norm_489 = bop_448 && tmp_and_488 in
                    let val_493 = if norm_489
                                  then 29
                                  else if bop_448
                                       then 28
                                       else let norm_490 = bop_449 || bop_450 in
                                            let norm_491 = norm_490 || bop_451 in
                                            let norm_492 = norm_491 || bop_452 in
                                            if norm_492
                                            then 30
                                            else 31 in
                    let bop_494 = d_427 < val_493 in
                    let tmp_lit_495 = if bop_494
                                      then d_427
                                      else val_493 in
                    let bop_496 = ym_479 + tmp_lit_495 in
                    let bop_497 = bop_496 - 32075 in
                    let tmp_498 = bop_497 - 2444238 in
                    let bop_499 = tmp_498 * 1440 in
                    let resmin_500 = bop_499 + 720 in
                    let tmp_call_501 = toReal(resmin_500) in
                    {tmp_call_388, tmp_call_501},
                  iota(tmp_call_13)) in
           let {tmp_red2_525, tmp_red2_526, tmp_red2_527} =
             reduceT(fn {real, real, real} (real arg_504, real arg_505,
                                            real arg_506, real arg_507,
                                            real arg_508, real arg_509) =>
                       let bop_510 = arg_509 - 16834320.0 in
                       let tmp_bop_511 = bop_510 / 1440.0 in
                       let tmp_bop_512 = tmp_bop_511 / 365.0 in
                       let bop_513 = 0.03 * tmp_bop_512 in
                       let val_514 = -bop_513 in
                       let tmp_call_515 = exp(val_514) in
                       let bop_516 = arg_509 - arg_508 in
                       let tmp_bop_517 = bop_516 / 1440.0 in
                       let tmp_bop_518 = tmp_bop_517 / 365.0 in
                       let bop_519 = tmp_call_515 * tmp_bop_518 in
                       let bop_520 = arg_504 + bop_519 in
                       let bop_521 = arg_505 < arg_508 in
                       let tmp_lit_522 = if bop_521
                                         then arg_505
                                         else arg_508 in
                       let bop_523 = arg_506 < arg_509 in
                       let tmp_lit_524 = if bop_523
                                         then arg_509
                                         else arg_506 in
                       {bop_520, tmp_lit_522, tmp_lit_524},
                     {0.0, 168307199.0, 3600.0}, val_14, soac_v_502,
                     soac_v_503) in
           let bop_528 = tmp_red2_526 - 16834320.0 in
           let tmp_bop_529 = bop_528 / 1440.0 in
           let tmp_bop_530 = tmp_bop_529 / 365.0 in
           let bop_531 = 0.03 * tmp_bop_530 in
           let val_532 = -bop_531 in
           let tmp_call_533 = exp(val_532) in
           let bop_534 = tmp_red2_527 - 16834320.0 in
           let tmp_bop_535 = bop_534 / 1440.0 in
           let tmp_bop_536 = tmp_bop_535 / 365.0 in
           let bop_537 = 0.03 * tmp_bop_536 in
           let val_538 = -bop_537 in
           let tmp_call_539 = exp(val_538) in
           let bop_540 = tmp_call_533 - tmp_call_539 in
           let strike_541 = bop_540 / tmp_red2_525 in
           let {untuple_550} =
             mapT(fn {real} (int i_542) =>
                    let bop_543 = soac_v_503[i_542] - soac_v_502[i_542] in
                    let tmp_bop_544 = bop_543 / 1440.0 in
                    let tau_545 = tmp_bop_544 / 365.0 in
                    let bop_546 = tau_545 * strike_541 in
                    let bop_547 = 1.0 + bop_546 in
                    let bop_548 = i_542 = bop_16 in
                    let val_549 = if bop_548
                                  then bop_547
                                  else bop_546 in
                    {val_549},
                  iota(tmp_call_13)) in
           let {soac_v_649, soac_v_650, soac_v_651, soac_v_652, soac_v_653,
                soac_v_654} =
             mapT(fn {real, real, real, real, real, real} (real arg_551,
                                                           real arg_552) =>
                    let bop_553 = arg_551 - 16834320.0 in
                    let tmp_bop_554 = bop_553 / 1440.0 in
                    let val_555 = tmp_bop_554 / 365.0 in
                    let bop_556 = 0.02453 * val_555 in
                    let val_557 = -bop_556 in
                    let tmp_call_558 = exp(val_557) in
                    let bop_559 = 1.0 - tmp_call_558 in
                    let ba_560 = bop_559 / 0.02453 in
                    let bop_561 = 81.53281695882593 * tmp_call_558 in
                    let exp2xtau_562 = tmp_call_558 * tmp_call_558 in
                    let bop_563 = 20.383204239706483 * exp2xtau_562 in
                    let bop_564 = 0.98376 * val_555 in
                    let val_565 = -bop_564 in
                    let tmp_call_566 = exp(val_565) in
                    let bop_567 = 1.0 - tmp_call_566 in
                    let bb_568 = bop_567 / 0.98376 in
                    let bop_569 = 2.033016182808815 * tmp_call_566 in
                    let exp2xtau_570 = tmp_call_566 * tmp_call_566 in
                    let bop_571 = 0.5082540457022038 * exp2xtau_570 in
                    let bop_572 = 1.00829 * val_555 in
                    let val_573 = -bop_572 in
                    let tmp_call_574 = exp(val_573) in
                    let bop_575 = 1.0 - tmp_call_574 in
                    let tmp_bop_576 = bop_575 / 1.00829 in
                    let bop_577 = 0.03 * val_555 in
                    let val_578 = -bop_577 in
                    let tmp_call_579 = exp(val_578) in
                    let bop_580 = tmp_call_579 / tmp_call_139 in
                    let bop_581 = val_555 - ba_560 in
                    let bop_582 = bop_581 - bb_568 in
                    let bop_583 = bop_582 + tmp_bop_576 in
                    let t3_584 = -0.19373336527812574 * bop_583 in
                    let bop_585 = val_555 + bop_561 in
                    let bop_586 = bop_585 - bop_563 in
                    let bop_587 = bop_586 - 61.149612719119446 in
                    let t1_588 = 0.9556596754408898 * bop_587 in
                    let bop_589 = val_555 + bop_569 in
                    let bop_590 = bop_589 - bop_571 in
                    let bop_591 = bop_590 - 1.5247621371066113 in
                    let t2_592 = 0.014460761693212401 * bop_591 in
                    let bop_593 = t1_588 + t2_592 in
                    let bop_594 = bop_593 + t3_584 in
                    let bop_595 = arg_551 - tmp_call_92 in
                    let tmp_bop_596 = bop_595 / 1440.0 in
                    let val_597 = tmp_bop_596 / 365.0 in
                    let bop_598 = 0.02453 * val_597 in
                    let val_599 = -bop_598 in
                    let tmp_call_600 = exp(val_599) in
                    let bop_601 = 1.0 - tmp_call_600 in
                    let ba_602 = bop_601 / 0.02453 in
                    let bop_603 = 81.53281695882593 * tmp_call_600 in
                    let exp2xtau_604 = tmp_call_600 * tmp_call_600 in
                    let bop_605 = 20.383204239706483 * exp2xtau_604 in
                    let bop_606 = 0.98376 * val_597 in
                    let val_607 = -bop_606 in
                    let tmp_call_608 = exp(val_607) in
                    let bop_609 = 1.0 - tmp_call_608 in
                    let bb_610 = bop_609 / 0.98376 in
                    let bop_611 = bop_170 * bb_610 in
                    let t3_612 = muy_251 - bop_611 in
                    let bop_613 = bop_238 - t3_612 in
                    let bop_614 = bb_610 * t4_168 in
                    let bop_615 = ba_602 + bop_614 in
                    let scale_616 = -bop_615 in
                    let cst_617 = bb_610 * bop_613 in
                    let tmp_call_618 = exp(cst_617) in
                    let bop_619 = 2.033016182808815 * tmp_call_608 in
                    let exp2xtau_620 = tmp_call_608 * tmp_call_608 in
                    let bop_621 = 0.5082540457022038 * exp2xtau_620 in
                    let bop_622 = 1.00829 * val_597 in
                    let val_623 = -bop_622 in
                    let tmp_call_624 = exp(val_623) in
                    let bop_625 = 1.0 - tmp_call_624 in
                    let tmp_bop_626 = bop_625 / 1.00829 in
                    let bop_627 = val_597 - ba_602 in
                    let bop_628 = bop_627 - bb_610 in
                    let bop_629 = bop_628 + tmp_bop_626 in
                    let t3_630 = -0.19373336527812574 * bop_629 in
                    let bop_631 = val_597 + bop_603 in
                    let bop_632 = bop_631 - bop_605 in
                    let bop_633 = bop_632 - 61.149612719119446 in
                    let t1_634 = 0.9556596754408898 * bop_633 in
                    let bop_635 = val_597 + bop_619 in
                    let bop_636 = bop_635 - bop_621 in
                    let bop_637 = bop_636 - 1.5247621371066113 in
                    let t2_638 = 0.014460761693212401 * bop_637 in
                    let bop_639 = t1_634 + t2_638 in
                    let bop_640 = bop_639 + t3_630 in
                    let bop_641 = bop_640 - bop_594 in
                    let bop_642 = bop_641 + bop_136 in
                    let val_643 = 0.5 * bop_642 in
                    let tmp_call_644 = exp(val_643) in
                    let aa_645 = bop_580 * tmp_call_644 in
                    let aici_646 = arg_552 * aa_645 in
                    let log_aici_647 = log(aici_646) in
                    let t1_cst_648 = aici_646 * tmp_call_618 in
                    {ba_602, bb_610, aici_646, log_aici_647, t1_cst_648,
                     scale_616},
                  soac_v_503, untuple_550) in
           let {soac_v_665, soac_v_666} =
             mapT(fn {real, real} (real arg_655, real arg_656, real arg_657,
                                   real arg_658) =>
                    let baix_659 = arg_655 * mux_237 in
                    let val_660 = -baix_659 in
                    let tmp_call_661 = exp(val_660) in
                    let bop_662 = arg_657 * tmp_call_661 in
                    let bop_663 = arg_658 - baix_659 in
                    let bop_664 = bop_663 / arg_656 in
                    {bop_662, bop_664},
                  soac_v_649, soac_v_650, soac_v_651, soac_v_652) in
           let {untuple_670} =
             reduceT(fn {real} (real x_667, real y_668) =>
                       let val_669 = x_667 + y_668 in
                       {val_669},
                     {0.0}, soac_v_665) in
           let {untuple_675} =
             reduceT(fn {real} (real param_0_671, real param_1_672) =>
                       let bop_673 = param_0_671 < param_1_672 in
                       let val_674 = if bop_673
                                     then param_1_672
                                     else param_0_671 in
                       {val_674},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_666) in
           let yl_676 = untuple_675 - 0.00001 in
           let f_861 = if bop_17
                       then untuple_675
                       else let bop_677 = bop_240 / sigmax_146 in
                            let bop_678 = bop_677 + bop_165 in
                            let bop_679 = sigmay_155 * bop_678 in
                            let bop_680 = bop_679 - bop_162 in
                            let y0_681 = bop_680 + muy_251 in
                            let bop_682 = y0_681 - 1.0 in
                            let bop_683 = yl_676 < y0_681 in
                            let bop_684 = bop_677 - bop_165 in
                            let bop_685 = sigmay_155 * bop_684 in
                            let y1_686 = bop_685 + muy_251 in
                            let bop_687 = y1_686 <= yl_676 in
                            let bop_688 = y1_686 + 1.0 in
                            let log_s_689 = log(untuple_670) in
                            let tmp_690 = log_s_689 / soac_v_650[bop_16] in
                            let bop_691 = tmp_690 <= 0.0 in
                            let up_694 = if bop_691
                                         then tmp_690
                                         else let tmp_692 = log_s_689 / soac_v_650[0] in
                                              let bop_693 = 0.0 <= tmp_692 in
                                              if bop_693
                                              then tmp_692
                                              else -10000000000000000000000000000000000000000000000000.0 in
                            let yu_695 = up_694 + 0.00001 in
                            let bop_696 = yu_695 <= y0_681 in
                            let bop_697 = yu_695 < y1_686 in
                            if bop_687
                            then bop_688
                            else if bop_696
                                 then bop_682
                                 else let {untuple_706} =
                                        mapT(fn {real} (real arg_700,
                                                        real arg_701) =>
                                               let bop_702 = arg_700 * mux_237 in
                                               let val_703 = -bop_702 in
                                               let tmp_call_704 = exp(val_703) in
                                               let val_705 = arg_701 * tmp_call_704 in
                                               {val_705},
                                             soac_v_649, soac_v_651) in
                                      let root_lb_707 = if bop_683
                                                        then y0_681
                                                        else yl_676 in
                                      let bop_708 = 0.0 <= root_lb_707 in
                                      let {untuple_715} =
                                        mapT(fn {real} (real arg_709,
                                                        real arg_710) =>
                                               let bop_711 = arg_710 * root_lb_707 in
                                               let val_712 = -bop_711 in
                                               let tmp_call_713 = exp(val_712) in
                                               let val_714 = arg_709 * tmp_call_713 in
                                               {val_714},
                                             untuple_706, soac_v_650) in
                                      let {untuple_719} =
                                        reduceT(fn {real} (real x_716,
                                                           real y_717) =>
                                                  let val_718 = x_716 + y_717 in
                                                  {val_718},
                                                {0.0}, untuple_715) in
                                      let tmp_lit_720 = untuple_719 - 1.0 in
                                      let bop_721 = tmp_lit_720 < 0.0 in
                                      let negate_722 = -tmp_lit_720 in
                                      let root_ub_723 = if bop_697
                                                        then yu_695
                                                        else y1_686 in
                                      let {untuple_730} =
                                        mapT(fn {real} (real arg_724,
                                                        real arg_725) =>
                                               let bop_726 = arg_725 * root_ub_723 in
                                               let val_727 = -bop_726 in
                                               let tmp_call_728 = exp(val_727) in
                                               let val_729 = arg_724 * tmp_call_728 in
                                               {val_729},
                                             untuple_706, soac_v_650) in
                                      let {untuple_734} =
                                        reduceT(fn {real} (real x_731,
                                                           real y_732) =>
                                                  let val_733 = x_731 + y_732 in
                                                  {val_733},
                                                {0.0}, untuple_730) in
                                      let tmp_lit_735 = untuple_734 - 1.0 in
                                      let bop_736 = tmp_lit_735 < 0.0 in
                                      let negate_737 = -tmp_lit_735 in
                                      let bop_738 = tmp_lit_720 * tmp_lit_735 in
                                      let bop_739 = 0.0 <= bop_738 in
                                      let {root_856, iteration_857,
                                           error_858} = if bop_739
                                                        then if bop_708
                                                             then {0.0, 0,
                                                                   10000000000000000000000000000000000000000000000000.0}
                                                             else {0.0, 0,
                                                                   -10000000000000000000000000000000000000000000000000.0}
                                                        else let tmp_bop_740 = if bop_721
                                                                               then negate_722
                                                                               else tmp_lit_720 in
                                                             let tmp_bop_741 = if bop_736
                                                                               then negate_737
                                                                               else tmp_lit_735 in
                                                             let bop_742 = tmp_bop_740 < tmp_bop_741 in
                                                             let {fa_743,
                                                                  fb_744} = if bop_742
                                                                            then {tmp_lit_735,
                                                                                  tmp_lit_720}
                                                                            else {tmp_lit_720,
                                                                                  tmp_lit_735} in
                                                             loop ({a_745,
                                                                    b_746,
                                                                    c_747,
                                                                    d_748,
                                                                    fa_749,
                                                                    fb_750,
                                                                    fc_751,
                                                                    mflag_752,
                                                                    it_753} = {root_lb_707,
                                                                               root_ub_723,
                                                                               root_lb_707,
                                                                               0.0,
                                                                               fa_743,
                                                                               fb_744,
                                                                               fa_743,
                                                                               True,
                                                                               0}) = for i_754 < 1000 do
                                                               let bop_755 = fb_750 = 0.0 in
                                                               let bop_756 = fa_749 = fc_751 in
                                                               let bop_757 = fb_750 = fc_751 in
                                                               let bop_758 = a_745 * fb_750 in
                                                               let bop_759 = bop_758 * fc_751 in
                                                               let bop_760 = fa_749 - fb_750 in
                                                               let bop_761 = fa_749 - fc_751 in
                                                               let bop_762 = bop_760 * bop_761 in
                                                               let bop_763 = b_746 * fa_749 in
                                                               let bop_764 = bop_763 * fc_751 in
                                                               let bop_765 = fb_750 - fa_749 in
                                                               let bop_766 = fb_750 - fc_751 in
                                                               let bop_767 = bop_765 * bop_766 in
                                                               let bop_768 = c_747 * fa_749 in
                                                               let bop_769 = bop_768 * fb_750 in
                                                               let bop_770 = fc_751 - fa_749 in
                                                               let bop_771 = fc_751 - fb_750 in
                                                               let bop_772 = bop_770 * bop_771 in
                                                               let bop_773 = 3.0 * a_745 in
                                                               let bop_774 = bop_773 + b_746 in
                                                               let bop_775 = bop_774 / 4.0 in
                                                               let not_776 = not mflag_752 in
                                                               let bop_777 = a_745 + b_746 in
                                                               let bop_778 = bop_777 / 2.0 in
                                                               let val_779 = b_746 - a_745 in
                                                               let bop_780 = fb_750 * val_779 in
                                                               let negate_781 = -val_779 in
                                                               let bop_782 = val_779 < 0.0 in
                                                               let tmp_bop_783 = if bop_782
                                                                                 then negate_781
                                                                                 else val_779 in
                                                               let bop_784 = tmp_bop_783 < 0.0001 in
                                                               let norm_785 = bop_755 || bop_784 in
                                                               let val_786 = b_746 - c_747 in
                                                               let negate_787 = -val_786 in
                                                               let bop_788 = val_786 < 0.0 in
                                                               let val_789 = c_747 - d_748 in
                                                               let negate_790 = -val_789 in
                                                               let bop_791 = val_789 < 0.0 in
                                                               if norm_785
                                                               then {a_745,
                                                                     b_746,
                                                                     c_747,
                                                                     d_748,
                                                                     fa_749,
                                                                     fb_750,
                                                                     fc_751,
                                                                     mflag_752,
                                                                     it_753}
                                                               else let tmp_bop_792 = if bop_788
                                                                                      then negate_787
                                                                                      else val_786 in
                                                                    let bop_793 = tmp_bop_792 <= 0.0001 in
                                                                    let norm_794 = mflag_752 && bop_793 in
                                                                    let bop_795 = tmp_bop_792 / 2.0 in
                                                                    let tmp_bop_796 = if bop_791
                                                                                      then negate_790
                                                                                      else val_789 in
                                                                    let bop_797 = tmp_bop_796 <= 0.0001 in
                                                                    let norm_798 = not_776 && bop_797 in
                                                                    let bop_799 = tmp_bop_796 / 2.0 in
                                                                    let norm_800 = bop_756 || bop_757 in
                                                                    let s_808 = if norm_800
                                                                                then let bop_801 = bop_780 / bop_765 in
                                                                                     let bop_802 = b_746 - bop_801 in
                                                                                     bop_802
                                                                                else let s1_803 = bop_759 / bop_762 in
                                                                                     let s2_804 = bop_764 / bop_767 in
                                                                                     let bop_805 = s1_803 + s2_804 in
                                                                                     let s3_806 = bop_769 / bop_772 in
                                                                                     let bop_807 = bop_805 + s3_806 in
                                                                                     bop_807 in
                                                                    let bop_809 = bop_775 <= s_808 in
                                                                    let bop_810 = s_808 <= b_746 in
                                                                    let norm_811 = bop_809 && bop_810 in
                                                                    let not_812 = not norm_811 in
                                                                    let val_813 = s_808 - b_746 in
                                                                    let bop_814 = val_813 < 0.0 in
                                                                    let negate_815 = -val_813 in
                                                                    let tmp_bop_816 = if bop_814
                                                                                      then negate_815
                                                                                      else val_813 in
                                                                    let bop_817 = bop_799 <= tmp_bop_816 in
                                                                    let norm_818 = not_776 && bop_817 in
                                                                    let bop_819 = bop_795 <= tmp_bop_816 in
                                                                    let norm_820 = mflag_752 && bop_819 in
                                                                    let norm_821 = not_812 || norm_820 in
                                                                    let norm_822 = norm_821 || norm_818 in
                                                                    let norm_823 = norm_822 || norm_794 in
                                                                    let norm_824 = norm_823 || norm_798 in
                                                                    let {mflag_825,
                                                                         s_826} = if norm_824
                                                                                  then {True,
                                                                                        bop_778}
                                                                                  else {False,
                                                                                        s_808} in
                                                                    let {untuple_833} =
                                                                      mapT(fn {real} (real arg_827,
                                                                                      real arg_828) =>
                                                                             let bop_829 = arg_828 * s_826 in
                                                                             let val_830 = -bop_829 in
                                                                             let tmp_call_831 = exp(val_830) in
                                                                             let val_832 = arg_827 * tmp_call_831 in
                                                                             {val_832},
                                                                           untuple_706,
                                                                           soac_v_650) in
                                                                    let {untuple_837} =
                                                                      reduceT(fn {real} (real x_834,
                                                                                         real y_835) =>
                                                                                let val_836 = x_834 + y_835 in
                                                                                {val_836},
                                                                              {0.0},
                                                                              untuple_833) in
                                                                    let fs_838 = untuple_837 - 1.0 in
                                                                    let bop_839 = fa_749 * fs_838 in
                                                                    let bop_840 = bop_839 < 0.0 in
                                                                    let {a_841,
                                                                         b_842,
                                                                         fa_843,
                                                                         fb_844} = if bop_840
                                                                                   then {a_745,
                                                                                         s_826,
                                                                                         fa_749,
                                                                                         fs_838}
                                                                                   else {s_826,
                                                                                         b_746,
                                                                                         fs_838,
                                                                                         fb_750} in
                                                                    let bop_845 = fa_843 < 0.0 in
                                                                    let negate_846 = -fa_843 in
                                                                    let bop_847 = fb_844 < 0.0 in
                                                                    let negate_848 = -fb_844 in
                                                                    let tmp_bop_849 = if bop_847
                                                                                      then negate_848
                                                                                      else fb_844 in
                                                                    let tmp_bop_850 = if bop_845
                                                                                      then negate_846
                                                                                      else fa_843 in
                                                                    let bop_851 = tmp_bop_850 < tmp_bop_849 in
                                                                    let {a_852,
                                                                         b_853,
                                                                         fa_854,
                                                                         fb_855} = if bop_851
                                                                                   then {b_842,
                                                                                         a_841,
                                                                                         fb_844,
                                                                                         fa_843}
                                                                                   else {a_841,
                                                                                         b_842,
                                                                                         fa_843,
                                                                                         fb_844} in
                                                                    {a_852,
                                                                     b_853,
                                                                     b_746,
                                                                     c_747,
                                                                     fa_854,
                                                                     fb_855,
                                                                     fb_750,
                                                                     mflag_825,
                                                                     i_754} in
                                                             {b_746, it_753,
                                                              fb_750} in
                                      let bop_859 = error_858 = -10000000000000000000000000000000000000000000000000.0 in
                                      let bop_860 = error_858 = 10000000000000000000000000000000000000000000000000.0 in
                                      if bop_859
                                      then bop_682
                                      else if bop_860
                                           then bop_688
                                           else root_856 in
           let {soac_v_872, soac_v_873} =
             mapT(fn {real, real} (real arg_862, real arg_863, real arg_864,
                                   real arg_865) =>
                    let baix_866 = arg_862 * val_241 in
                    let val_867 = -baix_866 in
                    let tmp_call_868 = exp(val_867) in
                    let bop_869 = arg_864 * tmp_call_868 in
                    let bop_870 = arg_865 - baix_866 in
                    let bop_871 = bop_870 / arg_863 in
                    {bop_869, bop_871},
                  soac_v_649, soac_v_650, soac_v_651, soac_v_652) in
           let {untuple_877} =
             reduceT(fn {real} (real x_874, real y_875) =>
                       let val_876 = x_874 + y_875 in
                       {val_876},
                     {0.0}, soac_v_872) in
           let {untuple_882} =
             reduceT(fn {real} (real param_0_878, real param_1_879) =>
                       let bop_880 = param_0_878 < param_1_879 in
                       let val_881 = if bop_880
                                     then param_1_879
                                     else param_0_878 in
                       {val_881},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_873) in
           let yl_883 = untuple_882 - 0.00001 in
           let g_1068 = if bop_17
                        then untuple_882
                        else let bop_884 = bop_243 / sigmax_146 in
                             let bop_885 = bop_884 + bop_165 in
                             let bop_886 = sigmay_155 * bop_885 in
                             let bop_887 = bop_886 - bop_162 in
                             let y0_888 = bop_887 + muy_251 in
                             let bop_889 = y0_888 - 1.0 in
                             let bop_890 = yl_883 < y0_888 in
                             let bop_891 = bop_884 - bop_165 in
                             let bop_892 = sigmay_155 * bop_891 in
                             let y1_893 = bop_892 + muy_251 in
                             let bop_894 = y1_893 <= yl_883 in
                             let bop_895 = y1_893 + 1.0 in
                             let log_s_896 = log(untuple_877) in
                             let tmp_897 = log_s_896 / soac_v_650[bop_16] in
                             let bop_898 = tmp_897 <= 0.0 in
                             let up_901 = if bop_898
                                          then tmp_897
                                          else let tmp_899 = log_s_896 / soac_v_650[0] in
                                               let bop_900 = 0.0 <= tmp_899 in
                                               if bop_900
                                               then tmp_899
                                               else -10000000000000000000000000000000000000000000000000.0 in
                             let yu_902 = up_901 + 0.00001 in
                             let bop_903 = yu_902 <= y0_888 in
                             let bop_904 = yu_902 < y1_893 in
                             if bop_894
                             then bop_895
                             else if bop_903
                                  then bop_889
                                  else let {untuple_911} =
                                         mapT(fn {real} (real arg_905,
                                                         real arg_906) =>
                                                let bop_907 = arg_905 * val_241 in
                                                let val_908 = -bop_907 in
                                                let tmp_call_909 = exp(val_908) in
                                                let val_910 = arg_906 * tmp_call_909 in
                                                {val_910},
                                              soac_v_649, soac_v_651) in
                                       let root_lb_912 = if bop_890
                                                         then y0_888
                                                         else yl_883 in
                                       let bop_913 = 0.0 <= root_lb_912 in
                                       let {untuple_920} =
                                         mapT(fn {real} (real arg_914,
                                                         real arg_915) =>
                                                let bop_916 = arg_915 * root_lb_912 in
                                                let val_917 = -bop_916 in
                                                let tmp_call_918 = exp(val_917) in
                                                let val_919 = arg_914 * tmp_call_918 in
                                                {val_919},
                                              untuple_911, soac_v_650) in
                                       let {untuple_924} =
                                         reduceT(fn {real} (real x_921,
                                                            real y_922) =>
                                                   let val_923 = x_921 + y_922 in
                                                   {val_923},
                                                 {0.0}, untuple_920) in
                                       let tmp_lit_925 = untuple_924 - 1.0 in
                                       let bop_926 = tmp_lit_925 < 0.0 in
                                       let negate_927 = -tmp_lit_925 in
                                       let root_ub_928 = if bop_904
                                                         then yu_902
                                                         else y1_893 in
                                       let {untuple_937} =
                                         mapT(fn {real} (real arg_929,
                                                         real arg_930) =>
                                                let bop_933 = arg_930 * root_ub_928 in
                                                let val_934 = -bop_933 in
                                                let tmp_call_935 = exp(val_934) in
                                                let val_936 = arg_929 * tmp_call_935 in
                                                {val_936},
                                              untuple_911, soac_v_650) in
                                       let {untuple_941} =
                                         reduceT(fn {real} (real x_938,
                                                            real y_939) =>
                                                   let val_940 = x_938 + y_939 in
                                                   {val_940},
                                                 {0.0}, untuple_937) in
                                       let tmp_lit_942 = untuple_941 - 1.0 in
                                       let bop_943 = tmp_lit_942 < 0.0 in
                                       let negate_944 = -tmp_lit_942 in
                                       let bop_945 = tmp_lit_925 * tmp_lit_942 in
                                       let bop_946 = 0.0 <= bop_945 in
                                       let {root_1063, iteration_1064,
                                            error_1065} = if bop_946
                                                          then if bop_913
                                                               then {0.0, 0,
                                                                     10000000000000000000000000000000000000000000000000.0}
                                                               else {0.0, 0,
                                                                     -10000000000000000000000000000000000000000000000000.0}
                                                          else let tmp_bop_947 = if bop_926
                                                                                 then negate_927
                                                                                 else tmp_lit_925 in
                                                               let tmp_bop_948 = if bop_943
                                                                                 then negate_944
                                                                                 else tmp_lit_942 in
                                                               let bop_949 = tmp_bop_947 < tmp_bop_948 in
                                                               let {fa_950,
                                                                    fb_951} = if bop_949
                                                                              then {tmp_lit_942,
                                                                                    tmp_lit_925}
                                                                              else {tmp_lit_925,
                                                                                    tmp_lit_942} in
                                                               loop ({a_952,
                                                                      b_953,
                                                                      c_954,
                                                                      d_955,
                                                                      fa_956,
                                                                      fb_957,
                                                                      fc_958,
                                                                      mflag_959,
                                                                      it_960} = {root_lb_912,
                                                                                 root_ub_928,
                                                                                 root_lb_912,
                                                                                 0.0,
                                                                                 fa_950,
                                                                                 fb_951,
                                                                                 fa_950,
                                                                                 True,
                                                                                 0}) = for i_961 < 1000 do
                                                                 let bop_962 = fb_957 = 0.0 in
                                                                 let bop_963 = fa_956 = fc_958 in
                                                                 let bop_964 = fb_957 = fc_958 in
                                                                 let bop_965 = a_952 * fb_957 in
                                                                 let bop_966 = bop_965 * fc_958 in
                                                                 let bop_967 = fa_956 - fb_957 in
                                                                 let bop_968 = fa_956 - fc_958 in
                                                                 let bop_969 = bop_967 * bop_968 in
                                                                 let bop_970 = b_953 * fa_956 in
                                                                 let bop_971 = bop_970 * fc_958 in
                                                                 let bop_972 = fb_957 - fa_956 in
                                                                 let bop_973 = fb_957 - fc_958 in
                                                                 let bop_974 = bop_972 * bop_973 in
                                                                 let bop_975 = c_954 * fa_956 in
                                                                 let bop_976 = bop_975 * fb_957 in
                                                                 let bop_977 = fc_958 - fa_956 in
                                                                 let bop_978 = fc_958 - fb_957 in
                                                                 let bop_979 = bop_977 * bop_978 in
                                                                 let bop_980 = 3.0 * a_952 in
                                                                 let bop_981 = bop_980 + b_953 in
                                                                 let bop_982 = bop_981 / 4.0 in
                                                                 let not_983 = not mflag_959 in
                                                                 let bop_984 = a_952 + b_953 in
                                                                 let bop_985 = bop_984 / 2.0 in
                                                                 let val_986 = b_953 - a_952 in
                                                                 let bop_987 = fb_957 * val_986 in
                                                                 let negate_988 = -val_986 in
                                                                 let bop_989 = val_986 < 0.0 in
                                                                 let tmp_bop_990 = if bop_989
                                                                                   then negate_988
                                                                                   else val_986 in
                                                                 let bop_991 = tmp_bop_990 < 0.0001 in
                                                                 let norm_992 = bop_962 || bop_991 in
                                                                 let val_993 = b_953 - c_954 in
                                                                 let negate_994 = -val_993 in
                                                                 let bop_995 = val_993 < 0.0 in
                                                                 let val_996 = c_954 - d_955 in
                                                                 let negate_997 = -val_996 in
                                                                 let bop_998 = val_996 < 0.0 in
                                                                 if norm_992
                                                                 then {a_952,
                                                                       b_953,
                                                                       c_954,
                                                                       d_955,
                                                                       fa_956,
                                                                       fb_957,
                                                                       fc_958,
                                                                       mflag_959,
                                                                       it_960}
                                                                 else let tmp_bop_999 = if bop_995
                                                                                        then negate_994
                                                                                        else val_993 in
                                                                      let bop_1000 = tmp_bop_999 <= 0.0001 in
                                                                      let norm_1001 = mflag_959 && bop_1000 in
                                                                      let bop_1002 = tmp_bop_999 / 2.0 in
                                                                      let tmp_bop_1003 = if bop_998
                                                                                         then negate_997
                                                                                         else val_996 in
                                                                      let bop_1004 = tmp_bop_1003 <= 0.0001 in
                                                                      let norm_1005 = not_983 && bop_1004 in
                                                                      let bop_1006 = tmp_bop_1003 / 2.0 in
                                                                      let norm_1007 = bop_963 || bop_964 in
                                                                      let s_1015 = if norm_1007
                                                                                   then let bop_1008 = bop_987 / bop_972 in
                                                                                        let bop_1009 = b_953 - bop_1008 in
                                                                                        bop_1009
                                                                                   else let s1_1010 = bop_966 / bop_969 in
                                                                                        let s2_1011 = bop_971 / bop_974 in
                                                                                        let bop_1012 = s1_1010 + s2_1011 in
                                                                                        let s3_1013 = bop_976 / bop_979 in
                                                                                        let bop_1014 = bop_1012 + s3_1013 in
                                                                                        bop_1014 in
                                                                      let bop_1016 = bop_982 <= s_1015 in
                                                                      let bop_1017 = s_1015 <= b_953 in
                                                                      let norm_1018 = bop_1016 && bop_1017 in
                                                                      let not_1019 = not norm_1018 in
                                                                      let val_1020 = s_1015 - b_953 in
                                                                      let bop_1021 = val_1020 < 0.0 in
                                                                      let negate_1022 = -val_1020 in
                                                                      let tmp_bop_1023 = if bop_1021
                                                                                         then negate_1022
                                                                                         else val_1020 in
                                                                      let bop_1024 = bop_1006 <= tmp_bop_1023 in
                                                                      let norm_1025 = not_983 && bop_1024 in
                                                                      let bop_1026 = bop_1002 <= tmp_bop_1023 in
                                                                      let norm_1027 = mflag_959 && bop_1026 in
                                                                      let norm_1028 = not_1019 || norm_1027 in
                                                                      let norm_1029 = norm_1028 || norm_1025 in
                                                                      let norm_1030 = norm_1029 || norm_1001 in
                                                                      let norm_1031 = norm_1030 || norm_1005 in
                                                                      let {mflag_1032,
                                                                           s_1033} = if norm_1031
                                                                                     then {True,
                                                                                           bop_985}
                                                                                     else {False,
                                                                                           s_1015} in
                                                                      let {untuple_1040} =
                                                                        mapT(fn {real} (real arg_1034,
                                                                                        real arg_1035) =>
                                                                               let bop_1036 = arg_1035 * s_1033 in
                                                                               let val_1037 = -bop_1036 in
                                                                               let tmp_call_1038 = exp(val_1037) in
                                                                               let val_1039 = arg_1034 * tmp_call_1038 in
                                                                               {val_1039},
                                                                             untuple_911,
                                                                             soac_v_650) in
                                                                      let {untuple_1044} =
                                                                        reduceT(fn {real} (real x_1041,
                                                                                           real y_1042) =>
                                                                                  let val_1043 = x_1041 + y_1042 in
                                                                                  {val_1043},
                                                                                {0.0},
                                                                                untuple_1040) in
                                                                      let fs_1045 = untuple_1044 - 1.0 in
                                                                      let bop_1046 = fa_956 * fs_1045 in
                                                                      let bop_1047 = bop_1046 < 0.0 in
                                                                      let {a_1048,
                                                                           b_1049,
                                                                           fa_1050,
                                                                           fb_1051} = if bop_1047
                                                                                      then {a_952,
                                                                                            s_1033,
                                                                                            fa_956,
                                                                                            fs_1045}
                                                                                      else {s_1033,
                                                                                            b_953,
                                                                                            fs_1045,
                                                                                            fb_957} in
                                                                      let bop_1052 = fa_1050 < 0.0 in
                                                                      let negate_1053 = -fa_1050 in
                                                                      let bop_1054 = fb_1051 < 0.0 in
                                                                      let negate_1055 = -fb_1051 in
                                                                      let tmp_bop_1056 = if bop_1054
                                                                                         then negate_1055
                                                                                         else fb_1051 in
                                                                      let tmp_bop_1057 = if bop_1052
                                                                                         then negate_1053
                                                                                         else fa_1050 in
                                                                      let bop_1058 = tmp_bop_1057 < tmp_bop_1056 in
                                                                      let {a_1059,
                                                                           b_1060,
                                                                           fa_1061,
                                                                           fb_1062} = if bop_1058
                                                                                      then {b_1049,
                                                                                            a_1048,
                                                                                            fb_1051,
                                                                                            fa_1050}
                                                                                      else {a_1048,
                                                                                            b_1049,
                                                                                            fa_1050,
                                                                                            fb_1051} in
                                                                      {a_1059,
                                                                       b_1060,
                                                                       b_953,
                                                                       c_954,
                                                                       fa_1061,
                                                                       fb_1062,
                                                                       fb_957,
                                                                       mflag_1032,
                                                                       i_961} in
                                                               {b_953, it_960,
                                                                fb_957} in
                                       let bop_1066 = error_1065 = -10000000000000000000000000000000000000000000000000.0 in
                                       let bop_1067 = error_1065 = 10000000000000000000000000000000000000000000000000.0 in
                                       if bop_1066
                                       then bop_889
                                       else if bop_1067
                                            then bop_895
                                            else root_1063 in
           let {soac_v_1080, soac_v_1081} =
             mapT(fn {real, real} (real arg_1069, real arg_1070, real arg_1071,
                                   real arg_1072) =>
                    let baix_1073 = arg_1069 * val_244 in
                    let val_1074 = -baix_1073 in
                    let tmp_call_1075 = exp(val_1074) in
                    let bop_1076 = arg_1071 * tmp_call_1075 in
                    let bop_1077 = arg_1072 - baix_1073 in
                    let bop_1078 = bop_1077 / arg_1070 in
                    {bop_1076, bop_1078},
                  soac_v_649, soac_v_650, soac_v_651, soac_v_652) in
           let {untuple_1086} =
             reduceT(fn {real} (real x_1083, real y_1084) =>
                       let val_1085 = x_1083 + y_1084 in
                       {val_1085},
                     {0.0}, soac_v_1080) in
           let {untuple_1091} =
             reduceT(fn {real} (real param_0_1087, real param_1_1088) =>
                       let bop_1089 = param_0_1087 < param_1_1088 in
                       let val_1090 = if bop_1089
                                      then param_1_1088
                                      else param_0_1087 in
                       {val_1090},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_1081) in
           let yl_1092 = untuple_1091 - 0.00001 in
           let h_1277 = if bop_17
                        then untuple_1091
                        else let bop_1093 = bop_246 / sigmax_146 in
                             let bop_1094 = bop_1093 + bop_165 in
                             let bop_1095 = sigmay_155 * bop_1094 in
                             let bop_1096 = bop_1095 - bop_162 in
                             let y0_1097 = bop_1096 + muy_251 in
                             let bop_1098 = y0_1097 - 1.0 in
                             let bop_1099 = yl_1092 < y0_1097 in
                             let bop_1100 = bop_1093 - bop_165 in
                             let bop_1101 = sigmay_155 * bop_1100 in
                             let y1_1102 = bop_1101 + muy_251 in
                             let bop_1103 = y1_1102 <= yl_1092 in
                             let bop_1104 = y1_1102 + 1.0 in
                             let log_s_1105 = log(untuple_1086) in
                             let tmp_1106 = log_s_1105 / soac_v_650[bop_16] in
                             let bop_1107 = tmp_1106 <= 0.0 in
                             let up_1110 = if bop_1107
                                           then tmp_1106
                                           else let tmp_1108 = log_s_1105 / soac_v_650[0] in
                                                let bop_1109 = 0.0 <= tmp_1108 in
                                                if bop_1109
                                                then tmp_1108
                                                else -10000000000000000000000000000000000000000000000000.0 in
                             let yu_1111 = up_1110 + 0.00001 in
                             let bop_1112 = yu_1111 <= y0_1097 in
                             let bop_1113 = yu_1111 < y1_1102 in
                             if bop_1103
                             then bop_1104
                             else if bop_1112
                                  then bop_1098
                                  else let {untuple_1120} =
                                         mapT(fn {real} (real arg_1114,
                                                         real arg_1115) =>
                                                let bop_1116 = arg_1114 * val_244 in
                                                let val_1117 = -bop_1116 in
                                                let tmp_call_1118 = exp(val_1117) in
                                                let val_1119 = arg_1115 * tmp_call_1118 in
                                                {val_1119},
                                              soac_v_649, soac_v_651) in
                                       let root_lb_1121 = if bop_1099
                                                          then y0_1097
                                                          else yl_1092 in
                                       let bop_1122 = 0.0 <= root_lb_1121 in
                                       let {untuple_1129} =
                                         mapT(fn {real} (real arg_1123,
                                                         real arg_1124) =>
                                                let bop_1125 = arg_1124 * root_lb_1121 in
                                                let val_1126 = -bop_1125 in
                                                let tmp_call_1127 = exp(val_1126) in
                                                let val_1128 = arg_1123 * tmp_call_1127 in
                                                {val_1128},
                                              untuple_1120, soac_v_650) in
                                       let {untuple_1133} =
                                         reduceT(fn {real} (real x_1130,
                                                            real y_1131) =>
                                                   let val_1132 = x_1130 + y_1131 in
                                                   {val_1132},
                                                 {0.0}, untuple_1129) in
                                       let tmp_lit_1134 = untuple_1133 - 1.0 in
                                       let bop_1135 = tmp_lit_1134 < 0.0 in
                                       let negate_1136 = -tmp_lit_1134 in
                                       let root_ub_1137 = if bop_1113
                                                          then yu_1111
                                                          else y1_1102 in
                                       let {untuple_1144} =
                                         mapT(fn {real} (real arg_1138,
                                                         real arg_1139) =>
                                                let bop_1140 = arg_1139 * root_ub_1137 in
                                                let val_1141 = -bop_1140 in
                                                let tmp_call_1142 = exp(val_1141) in
                                                let val_1143 = arg_1138 * tmp_call_1142 in
                                                {val_1143},
                                              untuple_1120, soac_v_650) in
                                       let {untuple_1148} =
                                         reduceT(fn {real} (real x_1145,
                                                            real y_1146) =>
                                                   let val_1147 = x_1145 + y_1146 in
                                                   {val_1147},
                                                 {0.0}, untuple_1144) in
                                       let tmp_lit_1149 = untuple_1148 - 1.0 in
                                       let bop_1150 = tmp_lit_1149 < 0.0 in
                                       let negate_1151 = -tmp_lit_1149 in
                                       let bop_1152 = tmp_lit_1134 * tmp_lit_1149 in
                                       let bop_1153 = 0.0 <= bop_1152 in
                                       let {root_1272, iteration_1273,
                                            error_1274} = if bop_1153
                                                          then if bop_1122
                                                               then {0.0, 0,
                                                                     10000000000000000000000000000000000000000000000000.0}
                                                               else {0.0, 0,
                                                                     -10000000000000000000000000000000000000000000000000.0}
                                                          else let tmp_bop_1154 = if bop_1135
                                                                                  then negate_1136
                                                                                  else tmp_lit_1134 in
                                                               let tmp_bop_1155 = if bop_1150
                                                                                  then negate_1151
                                                                                  else tmp_lit_1149 in
                                                               let bop_1156 = tmp_bop_1154 < tmp_bop_1155 in
                                                               let {fa_1157,
                                                                    fb_1158} = if bop_1156
                                                                               then {tmp_lit_1149,
                                                                                     tmp_lit_1134}
                                                                               else {tmp_lit_1134,
                                                                                     tmp_lit_1149} in
                                                               loop ({a_1159,
                                                                      b_1160,
                                                                      c_1161,
                                                                      d_1162,
                                                                      fa_1163,
                                                                      fb_1164,
                                                                      fc_1165,
                                                                      mflag_1166,
                                                                      it_1167} = {root_lb_1121,
                                                                                  root_ub_1137,
                                                                                  root_lb_1121,
                                                                                  0.0,
                                                                                  fa_1157,
                                                                                  fb_1158,
                                                                                  fa_1157,
                                                                                  True,
                                                                                  0}) = for i_1168 < 1000 do
                                                                 let bop_1169 = fb_1164 = 0.0 in
                                                                 let bop_1170 = fa_1163 = fc_1165 in
                                                                 let bop_1171 = fb_1164 = fc_1165 in
                                                                 let bop_1172 = a_1159 * fb_1164 in
                                                                 let bop_1173 = bop_1172 * fc_1165 in
                                                                 let bop_1174 = fa_1163 - fb_1164 in
                                                                 let bop_1175 = fa_1163 - fc_1165 in
                                                                 let bop_1176 = bop_1174 * bop_1175 in
                                                                 let bop_1177 = b_1160 * fa_1163 in
                                                                 let bop_1178 = bop_1177 * fc_1165 in
                                                                 let bop_1179 = fb_1164 - fa_1163 in
                                                                 let bop_1180 = fb_1164 - fc_1165 in
                                                                 let bop_1181 = bop_1179 * bop_1180 in
                                                                 let bop_1182 = c_1161 * fa_1163 in
                                                                 let bop_1183 = bop_1182 * fb_1164 in
                                                                 let bop_1185 = fc_1165 - fa_1163 in
                                                                 let bop_1186 = fc_1165 - fb_1164 in
                                                                 let bop_1187 = bop_1185 * bop_1186 in
                                                                 let bop_1188 = 3.0 * a_1159 in
                                                                 let bop_1190 = bop_1188 + b_1160 in
                                                                 let bop_1191 = bop_1190 / 4.0 in
                                                                 let not_1192 = not mflag_1166 in
                                                                 let bop_1193 = a_1159 + b_1160 in
                                                                 let bop_1194 = bop_1193 / 2.0 in
                                                                 let val_1195 = b_1160 - a_1159 in
                                                                 let bop_1196 = fb_1164 * val_1195 in
                                                                 let negate_1197 = -val_1195 in
                                                                 let bop_1198 = val_1195 < 0.0 in
                                                                 let tmp_bop_1199 = if bop_1198
                                                                                    then negate_1197
                                                                                    else val_1195 in
                                                                 let bop_1200 = tmp_bop_1199 < 0.0001 in
                                                                 let norm_1201 = bop_1169 || bop_1200 in
                                                                 let val_1202 = b_1160 - c_1161 in
                                                                 let negate_1203 = -val_1202 in
                                                                 let bop_1204 = val_1202 < 0.0 in
                                                                 let val_1205 = c_1161 - d_1162 in
                                                                 let negate_1206 = -val_1205 in
                                                                 let bop_1207 = val_1205 < 0.0 in
                                                                 if norm_1201
                                                                 then {a_1159,
                                                                       b_1160,
                                                                       c_1161,
                                                                       d_1162,
                                                                       fa_1163,
                                                                       fb_1164,
                                                                       fc_1165,
                                                                       mflag_1166,
                                                                       it_1167}
                                                                 else let tmp_bop_1208 = if bop_1204
                                                                                         then negate_1203
                                                                                         else val_1202 in
                                                                      let bop_1209 = tmp_bop_1208 <= 0.0001 in
                                                                      let norm_1210 = mflag_1166 && bop_1209 in
                                                                      let bop_1211 = tmp_bop_1208 / 2.0 in
                                                                      let tmp_bop_1212 = if bop_1207
                                                                                         then negate_1206
                                                                                         else val_1205 in
                                                                      let bop_1213 = tmp_bop_1212 <= 0.0001 in
                                                                      let norm_1214 = not_1192 && bop_1213 in
                                                                      let bop_1215 = tmp_bop_1212 / 2.0 in
                                                                      let norm_1216 = bop_1170 || bop_1171 in
                                                                      let s_1224 = if norm_1216
                                                                                   then let bop_1217 = bop_1196 / bop_1179 in
                                                                                        let bop_1218 = b_1160 - bop_1217 in
                                                                                        bop_1218
                                                                                   else let s1_1219 = bop_1173 / bop_1176 in
                                                                                        let s2_1220 = bop_1178 / bop_1181 in
                                                                                        let bop_1221 = s1_1219 + s2_1220 in
                                                                                        let s3_1222 = bop_1183 / bop_1187 in
                                                                                        let bop_1223 = bop_1221 + s3_1222 in
                                                                                        bop_1223 in
                                                                      let bop_1225 = bop_1191 <= s_1224 in
                                                                      let bop_1226 = s_1224 <= b_1160 in
                                                                      let norm_1227 = bop_1225 && bop_1226 in
                                                                      let not_1228 = not norm_1227 in
                                                                      let val_1229 = s_1224 - b_1160 in
                                                                      let bop_1230 = val_1229 < 0.0 in
                                                                      let negate_1231 = -val_1229 in
                                                                      let tmp_bop_1232 = if bop_1230
                                                                                         then negate_1231
                                                                                         else val_1229 in
                                                                      let bop_1233 = bop_1215 <= tmp_bop_1232 in
                                                                      let norm_1234 = not_1192 && bop_1233 in
                                                                      let bop_1235 = bop_1211 <= tmp_bop_1232 in
                                                                      let norm_1236 = mflag_1166 && bop_1235 in
                                                                      let norm_1237 = not_1228 || norm_1236 in
                                                                      let norm_1238 = norm_1237 || norm_1234 in
                                                                      let norm_1239 = norm_1238 || norm_1210 in
                                                                      let norm_1240 = norm_1239 || norm_1214 in
                                                                      let {mflag_1241,
                                                                           s_1242} = if norm_1240
                                                                                     then {True,
                                                                                           bop_1194}
                                                                                     else {False,
                                                                                           s_1224} in
                                                                      let {untuple_1249} =
                                                                        mapT(fn {real} (real arg_1243,
                                                                                        real arg_1244) =>
                                                                               let bop_1245 = arg_1244 * s_1242 in
                                                                               let val_1246 = -bop_1245 in
                                                                               let tmp_call_1247 = exp(val_1246) in
                                                                               let val_1248 = arg_1243 * tmp_call_1247 in
                                                                               {val_1248},
                                                                             untuple_1120,
                                                                             soac_v_650) in
                                                                      let {untuple_1253} =
                                                                        reduceT(fn {real} (real x_1250,
                                                                                           real y_1251) =>
                                                                                  let val_1252 = x_1250 + y_1251 in
                                                                                  {val_1252},
                                                                                {0.0},
                                                                                untuple_1249) in
                                                                      let fs_1254 = untuple_1253 - 1.0 in
                                                                      let bop_1255 = fa_1163 * fs_1254 in
                                                                      let bop_1256 = bop_1255 < 0.0 in
                                                                      let {a_1257,
                                                                           b_1258,
                                                                           fa_1259,
                                                                           fb_1260} = if bop_1256
                                                                                      then {a_1159,
                                                                                            s_1242,
                                                                                            fa_1163,
                                                                                            fs_1254}
                                                                                      else {s_1242,
                                                                                            b_1160,
                                                                                            fs_1254,
                                                                                            fb_1164} in
                                                                      let bop_1261 = fa_1259 < 0.0 in
                                                                      let negate_1262 = -fa_1259 in
                                                                      let bop_1263 = fb_1260 < 0.0 in
                                                                      let negate_1264 = -fb_1260 in
                                                                      let tmp_bop_1265 = if bop_1263
                                                                                         then negate_1264
                                                                                         else fb_1260 in
                                                                      let tmp_bop_1266 = if bop_1261
                                                                                         then negate_1262
                                                                                         else fa_1259 in
                                                                      let bop_1267 = tmp_bop_1266 < tmp_bop_1265 in
                                                                      let {a_1268,
                                                                           b_1269,
                                                                           fa_1270,
                                                                           fb_1271} = if bop_1267
                                                                                      then {b_1258,
                                                                                            a_1257,
                                                                                            fb_1260,
                                                                                            fa_1259}
                                                                                      else {a_1257,
                                                                                            b_1258,
                                                                                            fa_1259,
                                                                                            fb_1260} in
                                                                      {a_1268,
                                                                       b_1269,
                                                                       b_1160,
                                                                       c_1161,
                                                                       fa_1270,
                                                                       fb_1271,
                                                                       fb_1164,
                                                                       mflag_1241,
                                                                       i_1168} in
                                                               {b_1160, it_1167,
                                                                fb_1164} in
                                       let bop_1275 = error_1274 = -10000000000000000000000000000000000000000000000000.0 in
                                       let bop_1276 = error_1274 = 10000000000000000000000000000000000000000000000000.0 in
                                       if bop_1275
                                       then bop_1098
                                       else if bop_1276
                                            then bop_1104
                                            else root_1272 in
           let bop_1278 = g_1068 - h_1277 in
           let bop_1279 = 0.5 * bop_1278 in
           let df_1280 = bop_1279 / eps_147 in
           let {untuple_1418} =
             mapT(fn {real} (real arg_1281, real arg_1282) =>
                    let bop_1283 = sqrt2sigmax_148 * arg_1281 in
                    let x_1284 = bop_1283 + mux_237 in
                    let bop_1285 = x_1284 - mux_237 in
                    let bop_1286 = df_1280 * bop_1285 in
                    let yhat_x_1287 = f_861 + bop_1286 in
                    let bop_1289 = yhat_x_1287 - muy_251 in
                    let bop_1290 = bop_1289 / sigmay_rhoxycs_171 in
                    let bop_1292 = t2_166 * bop_1285 in
                    let h1_1293 = bop_1290 - bop_1292 in
                    let val_1294 = -h1_1293 in
                    let u_1295 = val_1294 / 1.4142135623730951 in
                    let bop_1296 = u_1295 < 0.0 in
                    let bop_1297 = 0.3275911 * u_1295 in
                    let bop_1298 = 1.0 + bop_1297 in
                    let bop_1299 = u_1295 * u_1295 in
                    let val_1300 = -bop_1299 in
                    let val_1301 = -u_1295 in
                    let bop_1302 = 0.3275911 * val_1301 in
                    let bop_1303 = 1.0 + bop_1302 in
                    let bop_1304 = val_1301 * val_1301 in
                    let val_1305 = -bop_1304 in
                    let e_1341 = if bop_1296
                                 then let tmp_call_1306 = exp(val_1305) in
                                      let t_1307 = 1.0 / bop_1303 in
                                      let bop_1308 = 0.254829592 * t_1307 in
                                      let t2_1309 = t_1307 * t_1307 in
                                      let bop_1310 = -0.284496736 * t2_1309 in
                                      let bop_1311 = bop_1308 + bop_1310 in
                                      let t4_1312 = t2_1309 * t2_1309 in
                                      let bop_1313 = -1.453152027 * t4_1312 in
                                      let t3_1314 = t_1307 * t2_1309 in
                                      let bop_1315 = 1.421413741 * t3_1314 in
                                      let bop_1316 = bop_1311 + bop_1315 in
                                      let bop_1317 = bop_1316 + bop_1313 in
                                      let t5_1318 = t2_1309 * t3_1314 in
                                      let bop_1319 = 1.061405429 * t5_1318 in
                                      let bop_1320 = bop_1317 + bop_1319 in
                                      let bop_1321 = bop_1320 * tmp_call_1306 in
                                      let tmp_neg_1322 = 1.0 - bop_1321 in
                                      let negate_1323 = -tmp_neg_1322 in
                                      negate_1323
                                 else let tmp_call_1324 = exp(val_1300) in
                                      let t_1325 = 1.0 / bop_1298 in
                                      let bop_1326 = 0.254829592 * t_1325 in
                                      let t2_1327 = t_1325 * t_1325 in
                                      let bop_1328 = -0.284496736 * t2_1327 in
                                      let bop_1329 = bop_1326 + bop_1328 in
                                      let t4_1330 = t2_1327 * t2_1327 in
                                      let bop_1331 = -1.453152027 * t4_1330 in
                                      let t3_1332 = t_1325 * t2_1327 in
                                      let bop_1333 = 1.421413741 * t3_1332 in
                                      let bop_1334 = bop_1329 + bop_1333 in
                                      let bop_1335 = bop_1334 + bop_1331 in
                                      let t5_1336 = t2_1327 * t3_1332 in
                                      let bop_1337 = 1.061405429 * t5_1336 in
                                      let bop_1338 = bop_1335 + bop_1337 in
                                      let bop_1339 = bop_1338 * tmp_call_1324 in
                                      let bop_1340 = 1.0 - bop_1339 in
                                      bop_1340 in
                    let bop_1342 = 1.0 + e_1341 in
                    let tmp_bop_1343 = 0.5 * bop_1342 in
                    let tmp_1344 = bop_1285 / sigmax_146 in
                    let bop_1345 = 0.5 * tmp_1344 in
                    let bop_1346 = bop_1345 * tmp_1344 in
                    let val_1347 = -bop_1346 in
                    let tmp_call_1348 = exp(val_1347) in
                    let {untuple_1410} =
                      mapT(fn {real} (real arg_1349, real arg_1350,
                                      real arg_1351) =>
                             let bop_1352 = arg_1349 * sigmay_rhoxycs_171 in
                             let h2_1353 = h1_1293 + bop_1352 in
                             let val_1354 = -h2_1353 in
                             let u_1355 = val_1354 / 1.4142135623730951 in
                             let bop_1356 = u_1355 < 0.0 in
                             let bop_1357 = 0.3275911 * u_1355 in
                             let bop_1358 = 1.0 + bop_1357 in
                             let bop_1359 = u_1355 * u_1355 in
                             let val_1360 = -bop_1359 in
                             let val_1361 = -u_1355 in
                             let bop_1362 = 0.3275911 * val_1361 in
                             let bop_1363 = 1.0 + bop_1362 in
                             let bop_1364 = val_1361 * val_1361 in
                             let val_1365 = -bop_1364 in
                             let e_1403 = if bop_1356
                                          then let tmp_call_1366 = exp(val_1365) in
                                               let t_1367 = 1.0 / bop_1363 in
                                               let bop_1368 = 0.254829592 * t_1367 in
                                               let t2_1369 = t_1367 * t_1367 in
                                               let bop_1370 = -0.284496736 * t2_1369 in
                                               let bop_1371 = bop_1368 + bop_1370 in
                                               let t4_1372 = t2_1369 * t2_1369 in
                                               let bop_1373 = -1.453152027 * t4_1372 in
                                               let t3_1374 = t_1367 * t2_1369 in
                                               let bop_1375 = 1.421413741 * t3_1374 in
                                               let bop_1376 = bop_1371 + bop_1375 in
                                               let bop_1377 = bop_1376 + bop_1373 in
                                               let t5_1378 = t2_1369 * t3_1374 in
                                               let bop_1379 = 1.061405429 * t5_1378 in
                                               let bop_1380 = bop_1377 + bop_1379 in
                                               let bop_1381 = bop_1380 * tmp_call_1366 in
                                               let tmp_neg_1382 = 1.0 - bop_1381 in
                                               let negate_1383 = -tmp_neg_1382 in
                                               negate_1383
                                          else let tmp_call_1384 = exp(val_1360) in
                                               let t_1385 = 1.0 / bop_1358 in
                                               let bop_1386 = 0.254829592 * t_1385 in
                                               let t2_1387 = t_1385 * t_1385 in
                                               let bop_1388 = -0.284496736 * t2_1387 in
                                               let bop_1389 = bop_1386 + bop_1388 in
                                               let t4_1390 = t2_1387 * t2_1387 in
                                               let bop_1391 = -1.453152027 * t4_1390 in
                                               let t3_1392 = t_1385 * t2_1387 in
                                               let bop_1394 = 1.421413741 * t3_1392 in
                                               let bop_1395 = bop_1389 + bop_1394 in
                                               let bop_1396 = bop_1395 + bop_1391 in
                                               let t5_1397 = t2_1387 * t3_1392 in
                                               let bop_1399 = 1.061405429 * t5_1397 in
                                               let bop_1400 = bop_1396 + bop_1399 in
                                               let bop_1401 = bop_1400 * tmp_call_1384 in
                                               let bop_1402 = 1.0 - bop_1401 in
                                               bop_1402 in
                             let bop_1404 = 1.0 + e_1403 in
                             let tmp_bop_1405 = 0.5 * bop_1404 in
                             let val_1406 = arg_1351 * x_1284 in
                             let tmp_call_1407 = exp(val_1406) in
                             let bop_1408 = arg_1350 * tmp_call_1407 in
                             let val_1409 = bop_1408 * tmp_bop_1405 in
                             {val_1409},
                           soac_v_650, soac_v_653, soac_v_654) in
                    let {untuple_1414} =
                      reduceT(fn {real} (real x_1411, real y_1412) =>
                                let val_1413 = x_1411 + y_1412 in
                                {val_1413},
                              {0.0}, untuple_1410) in
                    let bop_1415 = tmp_bop_1343 - untuple_1414 in
                    let integrand_res_1416 = tmp_call_1348 * bop_1415 in
                    let val_1417 = arg_1282 * integrand_res_1416 in
                    {val_1417},
                  tmp_lit_5, norm_6) in
           let {untuple_1422} =
             reduceT(fn {real} (real x_1419, real y_1420) =>
                       let val_1421 = x_1419 + y_1420 in
                       {val_1421},
                     {0.0}, untuple_1418) in
           let bop_1423 = untuple_1422 / 1.7724538509055159 in
           let g2pp_price_1424 = tmp_call_139 * bop_1423 in
           let {soac_v_1635, soac_v_1636} =
             mapT(fn {real, real} (int i_1425) =>
                    let tmp_call_1426 = toReal(i_1425) in
                    let val_1427 = tmp_call_1426 * arg_8 in
                    let nbmonths_1428 = trunc(val_1427) in
                    let m_1429 = m_305 + nbmonths_1428 in
                    let val_1430 = m_1429 - 1 in
                    let bop_1431 = val_1430 / 12 in
                    let bop_1432 = bop_1431 * 12 in
                    let bop_1433 = y_304 + bop_1431 in
                    let bop_1434 = bop_1433 - 1 in
                    let tmp_bop_1435 = val_1430 - bop_1432 in
                    let bop_1436 = tmp_bop_1435 + 1 in
                    let bop_1437 = bop_1436 <= 0 in
                    let bop_1438 = bop_1436 + 12 in
                    let {y_1439, m_1440} = if bop_1437
                                           then {bop_1434, bop_1438}
                                           else {bop_1433, bop_1436} in
                    let bop_1441 = y_1439 / 4 in
                    let bop_1442 = bop_1441 * 4 in
                    let bop_1443 = y_1439 / 100 in
                    let bop_1444 = bop_1443 * 100 in
                    let bop_1445 = y_1439 / 400 in
                    let bop_1446 = bop_1445 * 400 in
                    let bop_1447 = m_1440 = 2 in
                    let bop_1448 = m_1440 = 4 in
                    let bop_1449 = m_1440 = 6 in
                    let bop_1450 = m_1440 = 9 in
                    let bop_1451 = m_1440 = 11 in
                    let bop_1452 = m_1440 = 1 in
                    let norm_1453 = bop_1452 || bop_1447 in
                    let bop_1454 = y_1439 + 4800 in
                    let bop_1455 = bop_1454 - 1 in
                    let bop_1456 = 1461 * bop_1455 in
                    let bop_1457 = bop_1456 / 4 in
                    let bop_1458 = 1461 * bop_1454 in
                    let bop_1459 = bop_1458 / 4 in
                    let bop_1460 = m_1440 + 10 in
                    let bop_1461 = 367 * bop_1460 in
                    let bop_1462 = bop_1461 / 12 in
                    let bop_1463 = bop_1457 + bop_1462 in
                    let bop_1464 = y_1439 + 4900 in
                    let bop_1465 = bop_1464 - 1 in
                    let bop_1466 = bop_1465 / 100 in
                    let bop_1467 = 3 * bop_1466 in
                    let bop_1468 = bop_1467 / 4 in
                    let bop_1469 = bop_1463 - bop_1468 in
                    let bop_1470 = bop_1464 / 100 in
                    let bop_1471 = 3 * bop_1470 in
                    let bop_1472 = bop_1471 / 4 in
                    let bop_1473 = m_1440 - 2 in
                    let bop_1474 = 367 * bop_1473 in
                    let bop_1475 = bop_1474 / 12 in
                    let bop_1476 = bop_1459 + bop_1475 in
                    let bop_1477 = bop_1476 - bop_1472 in
                    let ym_1478 = if norm_1453
                                  then bop_1469
                                  else bop_1477 in
                    let tmp_bop_1479 = y_1439 - bop_1446 in
                    let bop_1480 = tmp_bop_1479 = 0 in
                    let tmp_bop_1481 = y_1439 - bop_1444 in
                    let bop_1482 = tmp_bop_1481 = 0 in
                    let not_1483 = not bop_1482 in
                    let norm_1484 = not_1483 || bop_1480 in
                    let tmp_bop_1485 = y_1439 - bop_1442 in
                    let bop_1486 = tmp_bop_1485 = 0 in
                    let tmp_and_1487 = bop_1486 && norm_1484 in
                    let norm_1488 = bop_1447 && tmp_and_1487 in
                    let val_1492 = if norm_1488
                                   then 29
                                   else if bop_1447
                                        then 28
                                        else let norm_1489 = bop_1448 || bop_1449 in
                                             let norm_1490 = norm_1489 || bop_1450 in
                                             let norm_1491 = norm_1490 || bop_1451 in
                                             if norm_1491
                                             then 30
                                             else 31 in
                    let bop_1493 = d_306 < val_1492 in
                    let tmp_lit_1494 = if bop_1493
                                       then d_306
                                       else val_1492 in
                    let bop_1495 = ym_1478 + tmp_lit_1494 in
                    let bop_1496 = bop_1495 - 32075 in
                    let tmp_1498 = bop_1496 - 2444238 in
                    let bop_1499 = tmp_1498 * 1440 in
                    let resmin_1501 = bop_1499 + 720 in
                    let tmp_call_1502 = toReal(resmin_1501) in
                    let val_1503 = trunc(tmp_call_1502) in
                    let jul_1504 = val_1503 / 1440 in
                    let bop_1505 = jul_1504 + 68569 in
                    let l_1506 = bop_1505 + 2444238 in
                    let bop_1507 = 4 * l_1506 in
                    let n_1508 = bop_1507 / 146097 in
                    let bop_1509 = 146097 * n_1508 in
                    let bop_1510 = bop_1509 + 3 in
                    let bop_1511 = bop_1510 / 4 in
                    let bop_1512 = n_1508 - 49 in
                    let bop_1513 = 100 * bop_1512 in
                    let l_1514 = l_1506 - bop_1511 in
                    let bop_1515 = l_1514 + 1 in
                    let bop_1516 = 4000 * bop_1515 in
                    let i_1517 = bop_1516 / 1461001 in
                    let bop_1518 = 1461 * i_1517 in
                    let bop_1519 = bop_1518 / 4 in
                    let bop_1520 = bop_1513 + i_1517 in
                    let bop_1521 = l_1514 - bop_1519 in
                    let l_1522 = bop_1521 + 31 in
                    let bop_1523 = 80 * l_1522 in
                    let j_1524 = bop_1523 / 2447 in
                    let bop_1525 = 2447 * j_1524 in
                    let bop_1526 = bop_1525 / 80 in
                    let bop_1527 = j_1524 + 2 in
                    let l_1528 = j_1524 / 11 in
                    let bop_1529 = 12 * l_1528 in
                    let m_1530 = bop_1527 - bop_1529 in
                    let y_1531 = bop_1520 + l_1528 in
                    let d_1532 = l_1522 - bop_1526 in
                    let bop_1533 = jul_1504 * 1440 in
                    let daytime_1534 = val_1503 - bop_1533 in
                    let bop_1535 = daytime_1534 = 720 in
                    let bop_1536 = daytime_1534 / 60 in
                    let bop_1537 = bop_1536 * 60 in
                    let tmp_lit_1538 = daytime_1534 - bop_1537 in
                    let {y_1539, m_1540, d_1541, h_1542, min_1543} = if bop_1535
                                                                     then {y_1531,
                                                                           m_1530,
                                                                           d_1532,
                                                                           12,
                                                                           0}
                                                                     else {y_1531,
                                                                           m_1530,
                                                                           d_1532,
                                                                           bop_1536,
                                                                           tmp_lit_1538} in
                    let m_1544 = m_1540 + nbmonths_311 in
                    let val_1545 = m_1544 - 1 in
                    let bop_1546 = val_1545 / 12 in
                    let bop_1547 = bop_1546 * 12 in
                    let tmp_bop_1548 = val_1545 - bop_1547 in
                    let bop_1549 = tmp_bop_1548 + 1 in
                    let bop_1550 = bop_1549 <= 0 in
                    let bop_1551 = bop_1549 + 12 in
                    let bop_1552 = y_1539 + bop_1546 in
                    let bop_1553 = bop_1552 - 1 in
                    let {y_1554, m_1555} = if bop_1550
                                           then {bop_1553, bop_1551}
                                           else {bop_1552, bop_1549} in
                    let bop_1556 = y_1554 / 4 in
                    let bop_1557 = bop_1556 * 4 in
                    let bop_1558 = y_1554 / 100 in
                    let bop_1559 = bop_1558 * 100 in
                    let bop_1560 = y_1554 / 400 in
                    let bop_1561 = bop_1560 * 400 in
                    let bop_1562 = m_1555 = 2 in
                    let bop_1563 = m_1555 = 4 in
                    let bop_1564 = m_1555 = 6 in
                    let bop_1565 = m_1555 = 9 in
                    let bop_1566 = m_1555 = 11 in
                    let bop_1567 = m_1555 = 1 in
                    let norm_1568 = bop_1567 || bop_1562 in
                    let bop_1569 = y_1554 + 4800 in
                    let bop_1570 = bop_1569 - 1 in
                    let bop_1571 = 1461 * bop_1570 in
                    let bop_1572 = bop_1571 / 4 in
                    let bop_1573 = 1461 * bop_1569 in
                    let bop_1574 = bop_1573 / 4 in
                    let bop_1575 = m_1555 + 10 in
                    let bop_1576 = 367 * bop_1575 in
                    let bop_1577 = bop_1576 / 12 in
                    let bop_1578 = bop_1572 + bop_1577 in
                    let bop_1579 = y_1554 + 4900 in
                    let bop_1580 = bop_1579 - 1 in
                    let bop_1581 = bop_1580 / 100 in
                    let bop_1582 = 3 * bop_1581 in
                    let bop_1583 = bop_1582 / 4 in
                    let bop_1584 = bop_1578 - bop_1583 in
                    let bop_1585 = bop_1579 / 100 in
                    let bop_1586 = 3 * bop_1585 in
                    let bop_1587 = bop_1586 / 4 in
                    let bop_1588 = m_1555 - 2 in
                    let bop_1589 = 367 * bop_1588 in
                    let bop_1590 = bop_1589 / 12 in
                    let bop_1591 = bop_1574 + bop_1590 in
                    let bop_1592 = bop_1591 - bop_1587 in
                    let ym_1593 = if norm_1568
                                  then bop_1584
                                  else bop_1592 in
                    let tmp_bop_1594 = y_1554 - bop_1561 in
                    let bop_1595 = tmp_bop_1594 = 0 in
                    let tmp_bop_1596 = y_1554 - bop_1559 in
                    let bop_1597 = tmp_bop_1596 = 0 in
                    let not_1600 = not bop_1597 in
                    let norm_1601 = not_1600 || bop_1595 in
                    let tmp_bop_1602 = y_1554 - bop_1557 in
                    let bop_1603 = tmp_bop_1602 = 0 in
                    let tmp_and_1605 = bop_1603 && norm_1601 in
                    let norm_1606 = bop_1562 && tmp_and_1605 in
                    let val_1626 = if norm_1606
                                   then 29
                                   else if bop_1562
                                        then 28
                                        else let norm_1611 = bop_1563 || bop_1564 in
                                             let norm_1616 = norm_1611 || bop_1565 in
                                             let norm_1621 = norm_1616 || bop_1566 in
                                             if norm_1621
                                             then 30
                                             else 31 in
                    let bop_1627 = d_1541 < val_1626 in
                    let tmp_lit_1628 = if bop_1627
                                       then d_1541
                                       else val_1626 in
                    let bop_1629 = ym_1593 + tmp_lit_1628 in
                    let bop_1630 = bop_1629 - 32075 in
                    let tmp_1631 = bop_1630 - 2444238 in
                    let bop_1632 = tmp_1631 * 1440 in
                    let resmin_1633 = bop_1632 + 720 in
                    let tmp_call_1634 = toReal(resmin_1633) in
                    {tmp_call_1502, tmp_call_1634},
                  iota(tmp_call_13)) in
           let {tmp_red2_1680, tmp_red2_1686, tmp_red2_1687} =
             reduceT(fn {real, real, real} (real arg_1637, real arg_1638,
                                            real arg_1639, real arg_1643,
                                            real arg_1645, real arg_1646) =>
                       let bop_1647 = arg_1646 - 16834320.0 in
                       let tmp_bop_1648 = bop_1647 / 1440.0 in
                       let tmp_bop_1649 = tmp_bop_1648 / 365.0 in
                       let bop_1651 = 0.03 * tmp_bop_1649 in
                       let val_1656 = -bop_1651 in
                       let tmp_call_1657 = exp(val_1656) in
                       let bop_1658 = arg_1646 - arg_1645 in
                       let tmp_bop_1659 = bop_1658 / 1440.0 in
                       let tmp_bop_1660 = tmp_bop_1659 / 365.0 in
                       let bop_1661 = tmp_call_1657 * tmp_bop_1660 in
                       let bop_1663 = arg_1637 + bop_1661 in
                       let bop_1664 = arg_1638 < arg_1645 in
                       let tmp_lit_1666 = if bop_1664
                                          then arg_1638
                                          else arg_1645 in
                       let bop_1671 = arg_1639 < arg_1646 in
                       let tmp_lit_1679 = if bop_1671
                                          then arg_1646
                                          else arg_1639 in
                       {bop_1663, tmp_lit_1666, tmp_lit_1679},
                     {0.0, 168307199.0, 3600.0}, val_15, soac_v_1635,
                     soac_v_1636) in
           let bop_1690 = tmp_red2_1686 - 16834320.0 in
           let tmp_bop_1691 = bop_1690 / 1440.0 in
           let tmp_bop_1695 = tmp_bop_1691 / 365.0 in
           let bop_1697 = 0.03 * tmp_bop_1695 in
           let val_1698 = -bop_1697 in
           let tmp_call_1702 = exp(val_1698) in
           let bop_1704 = tmp_red2_1687 - 16834320.0 in
           let tmp_bop_1705 = bop_1704 / 1440.0 in
           let tmp_bop_1709 = tmp_bop_1705 / 365.0 in
           let bop_1710 = 0.03 * tmp_bop_1709 in
           let val_1711 = -bop_1710 in
           let tmp_call_1712 = exp(val_1711) in
           let bop_1713 = tmp_call_1702 - tmp_call_1712 in
           let strike_1716 = bop_1713 / tmp_red2_1680 in
           let {tmp_red2_1772, tmp_red2_1773, tmp_red2_1774} =
             reduceT(fn {real, real, real} (real arg_1723, real arg_1724,
                                            real arg_1738, real arg_1739,
                                            real arg_1742, real arg_1743) =>
                       let bop_1747 = arg_1743 - 16834320.0 in
                       let tmp_bop_1749 = bop_1747 / 1440.0 in
                       let tmp_bop_1750 = tmp_bop_1749 / 365.0 in
                       let bop_1754 = 0.03 * tmp_bop_1750 in
                       let val_1756 = -bop_1754 in
                       let tmp_call_1757 = exp(val_1756) in
                       let bop_1761 = arg_1743 - arg_1742 in
                       let tmp_bop_1762 = bop_1761 / 1440.0 in
                       let tmp_bop_1763 = tmp_bop_1762 / 365.0 in
                       let bop_1764 = tmp_call_1757 * tmp_bop_1763 in
                       let bop_1765 = arg_1723 + bop_1764 in
                       let bop_1768 = arg_1724 < arg_1742 in
                       let tmp_lit_1769 = if bop_1768
                                          then arg_1724
                                          else arg_1742 in
                       let bop_1770 = arg_1738 < arg_1743 in
                       let tmp_lit_1771 = if bop_1770
                                          then arg_1743
                                          else arg_1738 in
                       {bop_1765, tmp_lit_1769, tmp_lit_1771},
                     {0.0, 168307199.0, 3600.0}, val_18, soac_v_1635,
                     soac_v_1636) in
           let bop_1775 = tmp_red2_1773 - 16834320.0 in
           let tmp_bop_1776 = bop_1775 / 1440.0 in
           let tmp_bop_1778 = tmp_bop_1776 / 365.0 in
           let bop_1779 = 0.03 * tmp_bop_1778 in
           let val_1780 = -bop_1779 in
           let tmp_call_1781 = exp(val_1780) in
           let bop_1782 = tmp_red2_1774 - 16834320.0 in
           let tmp_bop_1783 = bop_1782 / 1440.0 in
           let tmp_bop_1784 = tmp_bop_1783 / 365.0 in
           let bop_1785 = 0.03 * tmp_bop_1784 in
           let val_1786 = -bop_1785 in
           let tmp_call_1789 = exp(val_1786) in
           let bop_1790 = tmp_call_1781 - tmp_call_1789 in
           let s0_1791 = bop_1790 / tmp_red2_1772 in
           let val_1792 = s0_1791 / strike_1716 in
           let tmp_call_1793 = log(val_1792) in
           let bop_1794 = tmp_call_1793 / bop_267 in
           let d1_1795 = bop_1794 + bop_310 in
           let d2_1796 = d1_1795 - bop_267 in
           let u_1797 = d2_1796 / 1.4142135623730951 in
           let bop_1798 = u_1797 < 0.0 in
           let bop_1799 = 0.3275911 * u_1797 in
           let bop_1800 = 1.0 + bop_1799 in
           let bop_1801 = u_1797 * u_1797 in
           let val_1803 = -bop_1801 in
           let val_1807 = -u_1797 in
           let bop_1808 = 0.3275911 * val_1807 in
           let bop_1809 = 1.0 + bop_1808 in
           let bop_1810 = val_1807 * val_1807 in
           let val_1811 = -bop_1810 in
           let e_1912 = if bop_1798
                        then let tmp_call_1812 = exp(val_1811) in
                             let t_1814 = 1.0 / bop_1809 in
                             let bop_1816 = 0.254829592 * t_1814 in
                             let t2_1817 = t_1814 * t_1814 in
                             let bop_1820 = -0.284496736 * t2_1817 in
                             let bop_1821 = bop_1816 + bop_1820 in
                             let t4_1823 = t2_1817 * t2_1817 in
                             let bop_1824 = -1.453152027 * t4_1823 in
                             let t3_1825 = t_1814 * t2_1817 in
                             let bop_1826 = 1.421413741 * t3_1825 in
                             let bop_1828 = bop_1821 + bop_1826 in
                             let bop_1833 = bop_1828 + bop_1824 in
                             let t5_1835 = t2_1817 * t3_1825 in
                             let bop_1836 = 1.061405429 * t5_1835 in
                             let bop_1839 = bop_1833 + bop_1836 in
                             let bop_1842 = bop_1839 * tmp_call_1812 in
                             let tmp_neg_1854 = 1.0 - bop_1842 in
                             let negate_1856 = -tmp_neg_1854 in
                             negate_1856
                        else let tmp_call_1859 = exp(val_1803) in
                             let t_1861 = 1.0 / bop_1800 in
                             let bop_1863 = 0.254829592 * t_1861 in
                             let t2_1864 = t_1861 * t_1861 in
                             let bop_1865 = -0.284496736 * t2_1864 in
                             let bop_1866 = bop_1863 + bop_1865 in
                             let t4_1867 = t2_1864 * t2_1864 in
                             let bop_1873 = -1.453152027 * t4_1867 in
                             let t3_1874 = t_1861 * t2_1864 in
                             let bop_1875 = 1.421413741 * t3_1874 in
                             let bop_1895 = bop_1866 + bop_1875 in
                             let bop_1903 = bop_1895 + bop_1873 in
                             let t5_1904 = t2_1864 * t3_1874 in
                             let bop_1908 = 1.061405429 * t5_1904 in
                             let bop_1909 = bop_1903 + bop_1908 in
                             let bop_1910 = bop_1909 * tmp_call_1859 in
                             let bop_1911 = 1.0 - bop_1910 in
                             bop_1911 in
           let bop_1923 = 1.0 + e_1912 in
           let tmp_bop_1927 = 0.5 * bop_1923 in
           let bop_1928 = strike_1716 * tmp_bop_1927 in
           let u_1929 = d1_1795 / 1.4142135623730951 in
           let bop_1930 = u_1929 < 0.0 in
           let bop_1931 = 0.3275911 * u_1929 in
           let bop_1932 = 1.0 + bop_1931 in
           let bop_1933 = u_1929 * u_1929 in
           let val_1934 = -bop_1933 in
           let val_1935 = -u_1929 in
           let bop_1954 = 0.3275911 * val_1935 in
           let bop_1955 = 1.0 + bop_1954 in
           let bop_1956 = val_1935 * val_1935 in
           let val_1957 = -bop_1956 in
           let e_2059 = if bop_1930
                        then let tmp_call_1966 = exp(val_1957) in
                             let t_1967 = 1.0 / bop_1955 in
                             let bop_1968 = 0.254829592 * t_1967 in
                             let t2_1969 = t_1967 * t_1967 in
                             let bop_1970 = -0.284496736 * t2_1969 in
                             let bop_1971 = bop_1968 + bop_1970 in
                             let t4_1976 = t2_1969 * t2_1969 in
                             let bop_1982 = -1.453152027 * t4_1976 in
                             let t3_1993 = t_1967 * t2_1969 in
                             let bop_1994 = 1.421413741 * t3_1993 in
                             let bop_1995 = bop_1971 + bop_1994 in
                             let bop_1998 = bop_1995 + bop_1982 in
                             let t5_2001 = t2_1969 * t3_1993 in
                             let bop_2002 = 1.061405429 * t5_2001 in
                             let bop_2003 = bop_1998 + bop_2002 in
                             let bop_2005 = bop_2003 * tmp_call_1966 in
                             let tmp_neg_2006 = 1.0 - bop_2005 in
                             let negate_2008 = -tmp_neg_2006 in
                             negate_2008
                        else let tmp_call_2010 = exp(val_1934) in
                             let t_2011 = 1.0 / bop_1932 in
                             let bop_2023 = 0.254829592 * t_2011 in
                             let t2_2025 = t_2011 * t_2011 in
                             let bop_2026 = -0.284496736 * t2_2025 in
                             let bop_2027 = bop_2023 + bop_2026 in
                             let t4_2028 = t2_2025 * t2_2025 in
                             let bop_2029 = -1.453152027 * t4_2028 in
                             let t3_2030 = t_2011 * t2_2025 in
                             let bop_2031 = 1.421413741 * t3_2030 in
                             let bop_2039 = bop_2027 + bop_2031 in
                             let bop_2040 = bop_2039 + bop_2029 in
                             let t5_2043 = t2_2025 * t3_2030 in
                             let bop_2051 = 1.061405429 * t5_2043 in
                             let bop_2052 = bop_2040 + bop_2051 in
                             let bop_2057 = bop_2052 * tmp_call_2010 in
                             let bop_2058 = 1.0 - bop_2057 in
                             bop_2058 in
           let bop_2061 = 1.0 + e_2059 in
           let tmp_bop_2066 = 0.5 * bop_2061 in
           let bop_2068 = s0_1791 * tmp_bop_2066 in
           let bop_2069 = bop_2068 - bop_1928 in
           let market_price_2073 = tmp_red2_1772 * bop_2069 in
           let bop_2098 = g2pp_price_1424 - market_price_2073 in
           let res_2099 = bop_2098 / market_price_2073 in
           let val_2108 = res_2099 * res_2099 in
           {val_2108},
         tup_arr_elem_1, tup_arr_elem_2, tup_arr_elem_3, tup_arr_elem_4) in
  let {untuple_2120} =
    reduceT(fn {real} (real x_2114, real y_2115) =>
              let val_2116 = x_2114 + y_2115 in
              {val_2116},
            {0.0}, untuple_2109) in
  let val_2121 = untuple_2120 / 196.0 in
  let tmp_call_2122 = sqrt(val_2121) in
  let rms_2124 = 100.0 * tmp_call_2122 in
  rms_2124
