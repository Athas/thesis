fun real main() =
  let norm_0 = [[1.0, 0.6, 0.8],
                [0.6, 0.8, 0.15],
                [0.8, 0.15, 0.5809475019311124]] in
  let norm_4 = [[0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15]] in
  let norm_6 = [3758.05, 11840.0, 1200.0] in
  let {num_mc_it_8, num_dates_9, num_und_18, num_bits_31, dir_vs_58} =
    {1000,
     5,
     3,
     30,
     [[536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608,
       4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384,
       8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],
      [536870912, 805306368, 671088640, 1006632960, 570425344, 855638016,
       713031680, 1069547520, 538968064, 808452096, 673710080, 1010565120,
       572653568, 858980352, 715816960, 1073725440, 536879104, 805318656,
       671098880, 1006648320, 570434048, 855651072, 713042560, 1069563840,
       538976288, 808464432, 673720360, 1010580540, 572662306, 858993459],
      [536870912, 805306368, 402653184, 603979776, 973078528, 385875968,
       595591168, 826277888, 438304768, 657457152, 999817216, 358875136,
       538574848, 807862272, 406552576, 605372416, 975183872, 389033984,
       597170176, 828646400, 437926400, 656873216, 1002152832, 357921088,
       536885792, 805312304, 402662296, 603992420, 973085210, 385885991],
      [536870912, 805306368, 939524096, 335544320, 234881024, 721420288,
       411041792, 616562688, 920649728, 1062207488, 381157376, 258736128,
       771883008, 453181440, 545488896, 817971200, 954261504, 340963328,
       238651392, 732843008, 417426944, 609285376, 909831040, 1068349120,
       383778848, 256901168, 783810616, 460062740, 537001998, 805503019],
      [536870912, 805306368, 402653184, 1006632960, 167772160, 285212672,
       713031680, 566231040, 853540864, 489684992, 952631296, 208928768,
       316801024, 758317056, 550076416, 813154304, 417505280, 1009913856,
       172697600, 297131008, 704744960, 553894656, 847291520, 499194688,
       954376224, 204607536, 306915352, 766893116, 536972810, 805552913],
      [536870912, 805306368, 402653184, 469762048, 301989888, 721420288,
       92274688, 264241152, 941621248, 741343232, 169345024, 924581888,
       395444224, 619380736, 1034256384, 603963392, 838868992, 452997120,
       494934016, 331357184, 706744832, 120597248, 261621120, 953946048,
       800208928, 148581424, 935168536, 350484252, 630339474, 1072370923],
      [536870912, 805306368, 134217728, 1006632960, 503316480, 754974720,
       629145600, 440401920, 94371840, 711983104, 229113856, 374079488,
       330694656, 996212736, 907247616, 557531136, 867573760, 190918656,
       1041467392, 490437632, 766918144, 643898624, 462663040, 125527616,
       672545696, 202454896, 373006376, 288845836, 1000351766, 930090001],
      [536870912, 268435456, 402653184, 872415232, 838860800, 956301312,
       612368384, 717225984, 211812352, 386924544, 302514176, 688128000,
       1015414784, 516751360, 1051492352, 773734400, 914432000, 63877120,
       807741440, 165200896, 748683776, 118489344, 168296832, 486802240,
       243663648, 667747216, 439124552, 81674924, 975249610, 350138737],
      [536870912, 268435456, 671088640, 469762048, 973078528, 1023410176,
       713031680, 339738624, 912261120, 797966336, 176685056, 71565312,
       510263296, 865533952, 814120960, 961232896, 887136256, 668078080,
       116070400, 382772224, 1047134720, 597098752, 411468416, 625689024,
       249602976, 449975248, 745216680, 43033924, 134873446, 201786361],
      [536870912, 268435456, 402653184, 67108864, 704643072, 385875968,
       696254464, 205520896, 920649728, 946864128, 359137280, 859045888,
       302907392, 50659328, 462192640, 524599296, 895541248, 590794752,
       168810496, 118033408, 831447552, 138662144, 485185920, 796511296,
       1021313184, 1064304752, 619184920, 997458052, 250479054, 745865975],
      [536870912, 268435456, 939524096, 1006632960, 838860800, 889192448,
       645922816, 46137344, 476053504, 584056832, 210239488, 465829888,
       820903936, 689897472, 73695232, 249118720, 110075904, 315338752,
       610637824, 517665792, 1049494016, 785318144, 376210304, 735921088,
       402760480, 738505552, 168368744, 151499820, 344957894, 936096557],
      [536870912, 805306368, 939524096, 1006632960, 503316480, 922746880,
       41943040, 423624704, 228589568, 651165696, 195559424, 500957184,
       791019520, 261292032, 1040285696, 118407168, 982065152, 625250304,
       329533440, 298984448, 153690624, 76845824, 579619712, 692987840,
       900670432, 450334832, 363187112, 719119956, 765461306, 382730781],
      [536870912, 805306368, 402653184, 603979776, 838860800, 117440512,
       478150656, 658505728, 752877568, 1060110336, 141033472, 209453056,
       244187136, 272957440, 678068224, 1014546432, 377724928, 876875776,
       443160576, 998185984, 168665600, 318837504, 914397568, 71818816,
       40763680, 527762288, 939688008, 335855668, 705536494, 587273091],
      [536870912, 268435456, 671088640, 738197504, 637534208, 150994944,
       813694976, 943718400, 77594624, 179306496, 798490624, 967049216,
       134348800, 1006698496, 235044864, 620937216, 377643008, 826314752,
       874711040, 854819840, 725109248, 856992512, 664336768, 94804544,
       100663328, 419430416, 411041832, 339738668, 580911142, 61865993],
      [536870912, 805306368, 939524096, 603979776, 100663296, 452984832,
       998244352, 188743680, 866123776, 389021696, 287834112, 172228608,
       824836096, 977731584, 153714688, 507854848, 254402560, 88403968,
       883578880, 235160576, 118055424, 422917888, 371224704, 326210368,
       654926368, 691353392, 773877944, 930190180, 554263078, 842348331]]} in
  let tmp_size_59 = size(0, reshape((5, 3, 30), dir_vs_58)) in
  let tmp_e_60 = tmp_size_59 = 5 in
  let zip_assert_61 = assert(tmp_e_60) in
  let val_65 = [-0.0283491736871803, 0.0178771081725381, 0.0043096808044729] in
  let val_66 = [-0.0183841413744211, -0.0044530897672834, 0.0024263805987983] in
  let val_67 = [-0.0172686581005089, 0.0125638544546015, 0.0094452810918001] in
  let val_68 = [-0.0144179417871814, 0.0157411263968213, 0.0125315353728014] in
  let val_70 = [-0.0121497422218761, 0.0182904634062437, 0.0151125070556484] in
  // tmp_lit_71 aliases val_68, val_65, val_66, val_70, val_67
  let tmp_lit_71 = [val_65,
                    val_66,
                    val_67,
                    val_68,
                    val_70] in
  let tmp_size_72 = size(0, tmp_lit_71) in
  let tmp_e_76 = 5 = tmp_size_72 in
  let zip_assert_77 = assert(tmp_e_76) in
  let comb_cert_78 = conjoin(zip_assert_61, zip_assert_77) in
  let tmp_size_79 = <comb_cert_78>size(1, tmp_lit_71) in
  let tmp_e_80 = tmp_size_79 = 3 in
  let zip_assert_90 = assert(tmp_e_80) in
  let tmp_size_99 = <comb_cert_78, zip_assert_90>size(1, tmp_lit_71) in
  let tmp_e_102 = 3 = tmp_size_99 in
  let zip_assert_103 = assert(tmp_e_102) in
  let tmp_e_106 = tmp_size_99 = 3 in
  let zip_assert_107 = assert(tmp_e_106) in
  let {bb_inds_108, bb_data_109} =
    {[[5, 2, 1, 3, 4],
      [0, 0, 0, 2, 3],
      [0, 5, 2, 5, 5]],
     [[2.237292884728058, 1.096095158985383, 0.7075902730592357,
       0.816682804349221, 0.7075902730592357],
      [0.0, 0.5998905309250137, 0.4993160054719562, 0.666970802919708,
       0.5006839945280438],
      [0.0, 0.4001094690749863, 0.5006839945280438, 0.3330291970802919,
       0.4993160054719562]]} in
  let divs_110 = [0.00026609544843735446, 0.00008445945945945946,
                  0.0008333333333333334] in
  let {untuple_475} =
    redomapT(fn {real} (real x_111, real y_112) =>
               let val_113 = x_111 + y_112 in
               {val_113},
             fn {real} (real x_114, int x_115) =>
               let val_198 = x_115 + 1 in
               let bop_199 = val_198 >> 1 in
               let val_200 = bop_199 ^ val_198 in
               // untuple_386 aliases dir_vs_58
               let {untuple_386} =
                 mapT(fn {[real]} ([[int]] pullReshape_param_201) =>
                        let bbrow_202 = replicate(5, 0.0) in
                        let {pullReshape_bnd_338} =
                          mapT(fn {real} ([int] param_0_203) =>
                                 let {untuple_214} =
                                   redomapT(fn {int} (int x_204, int y_205) =>
                                              let val_207 = x_204 ^ y_205 in
                                              {val_207},
                                            fn {int} (int x_208,
                                                      int param_0_209) =>
                                              let t_210 = 1 << param_0_209 in
                                              let bop_211 = val_200 & t_210 in
                                              let val_212 = bop_211 = t_210 in
                                              if val_212
                                              then let val_213 = x_208 ^ param_0_203[param_0_209] in
                                                   {val_213}
                                              else {x_208},
                                            {0}, iota(30)) in
                                 let tmp_call_216 = toReal(untuple_214) in
                                 let val_217 = tmp_call_216 / 1073741824.0 in
                                 let dp_218 = val_217 - 0.5 in
                                 let bop_219 = 0.5 - dp_218 in
                                 let bop_220 = dp_218 + 0.5 in
                                 let bop_221 = dp_218 * dp_218 in
                                 let val_222 = 0.180625 - bop_221 in
                                 let bop_224 = val_222 * 2509.0809287301227 in
                                 let bop_225 = bop_224 + 33430.57558358813 in
                                 let bop_226 = val_222 * bop_225 in
                                 let bop_227 = bop_226 + 67265.7709270087 in
                                 let bop_228 = val_222 * bop_227 in
                                 let bop_231 = bop_228 + 45921.95393154987 in
                                 let bop_232 = val_222 * bop_231 in
                                 let bop_233 = bop_232 + 13731.69376550946 in
                                 let bop_234 = val_222 * bop_233 in
                                 let bop_235 = bop_234 + 1971.5909503065513 in
                                 let bop_238 = val_222 * bop_235 in
                                 let bop_239 = bop_238 + 133.14166789178438 in
                                 let bop_240 = val_222 * bop_239 in
                                 let bop_241 = bop_240 + 3.3871328727963665 in
                                 let bop_242 = val_222 * 5226.495278852854 in
                                 let bop_243 = bop_242 + 28729.085735721943 in
                                 let bop_244 = val_222 * bop_243 in
                                 let bop_245 = bop_244 + 39307.89580009271 in
                                 let bop_246 = val_222 * bop_245 in
                                 let bop_247 = bop_246 + 21213.794301586597 in
                                 let bop_248 = val_222 * bop_247 in
                                 let bop_249 = bop_248 + 5394.196021424751 in
                                 let bop_250 = val_222 * bop_249 in
                                 let bop_251 = bop_250 + 687.1870074920579 in
                                 let bop_252 = val_222 * bop_251 in
                                 let bop_253 = bop_252 + 42.31333070160091 in
                                 let bop_254 = val_222 * bop_253 in
                                 let bop_255 = bop_254 + 1.0 in
                                 let bop_256 = dp_218 <= 0.425 in
                                 let bop_257 = 0.0 <= dp_218 in
                                 let norm_258 = bop_257 && bop_256 in
                                 let bop_259 = 0.0 - dp_218 in
                                 let bop_260 = bop_259 <= 0.425 in
                                 let bop_261 = dp_218 < 0.0 in
                                 let norm_262 = bop_261 && bop_260 in
                                 let norm_263 = norm_262 || norm_258 in
                                 let val_337 = if norm_263
                                               then let tmp_bop_264 = bop_241 / bop_255 in
                                                    let bop_265 = dp_218 * tmp_bop_264 in
                                                    bop_265
                                               else let pp_266 = if bop_261
                                                                 then bop_220
                                                                 else bop_219 in
                                                    let tmp_call_267 = log(pp_266) in
                                                    let val_268 = -tmp_call_267 in
                                                    let tmp_call_269 = sqrt(val_268) in
                                                    let bop_270 = tmp_call_269 <= 5.0 in
                                                    let val_271 = tmp_call_269 - 1.6 in
                                                    let bop_272 = val_271 * 0.0007745450142783414 in
                                                    let bop_273 = bop_272 + 0.022723844989269184 in
                                                    let bop_274 = val_271 * bop_273 in
                                                    let bop_275 = bop_274 + 0.2417807251774506 in
                                                    let bop_276 = val_271 * bop_275 in
                                                    let bop_277 = bop_276 + 1.2704582524523684 in
                                                    let bop_278 = val_271 * bop_277 in
                                                    let bop_279 = bop_278 + 3.6478483247632045 in
                                                    let bop_280 = val_271 * bop_279 in
                                                    let bop_281 = bop_280 + 5.769497221460691 in
                                                    let bop_282 = val_271 * bop_281 in
                                                    let bop_283 = bop_282 + 4.630337846156546 in
                                                    let bop_284 = val_271 * bop_283 in
                                                    let bop_287 = bop_284 + 1.4234371107496835 in
                                                    let bop_288 = val_271 * 0.0000000010507500716444169 in
                                                    let bop_289 = bop_288 + 0.0005475938084995345 in
                                                    let bop_290 = val_271 * bop_289 in
                                                    let bop_291 = bop_290 + 0.015198666563616457 in
                                                    let bop_292 = val_271 * bop_291 in
                                                    let bop_293 = bop_292 + 0.14810397642748008 in
                                                    let bop_294 = val_271 * bop_293 in
                                                    let bop_295 = bop_294 + 0.6897673349851 in
                                                    let bop_296 = val_271 * bop_295 in
                                                    let bop_297 = bop_296 + 1.6763848301838038 in
                                                    let bop_298 = val_271 * bop_297 in
                                                    let bop_299 = bop_298 + 2.053191626637759 in
                                                    let bop_300 = val_271 * bop_299 in
                                                    let bop_301 = bop_300 + 1.0 in
                                                    let val_302 = tmp_call_269 - 5.0 in
                                                    let bop_303 = val_302 * 0.00000020103343992922881 in
                                                    let bop_304 = bop_303 + 0.000027115555687434876 in
                                                    let bop_305 = val_302 * bop_304 in
                                                    let bop_306 = bop_305 + 0.0012426609473880784 in
                                                    let bop_307 = val_302 * bop_306 in
                                                    let bop_308 = bop_307 + 0.026532189526576124 in
                                                    let bop_309 = val_302 * bop_308 in
                                                    let bop_310 = bop_309 + 0.29656057182850487 in
                                                    let bop_311 = val_302 * bop_310 in
                                                    let bop_312 = bop_311 + 1.7848265399172913 in
                                                    let bop_313 = val_302 * bop_312 in
                                                    let bop_314 = bop_313 + 5.463784911164114 in
                                                    let bop_315 = val_302 * bop_314 in
                                                    let bop_316 = bop_315 + 6.657904643501103 in
                                                    let bop_317 = val_302 * 0.000020442631033899398 in
                                                    let bop_318 = bop_317 + 0.0000001421511758316446 in
                                                    let bop_319 = val_302 * bop_318 in
                                                    let bop_320 = bop_319 + 0.000018463183175100548 in
                                                    let bop_321 = val_302 * bop_320 in
                                                    let bop_322 = bop_321 + 0.0007868691311456133 in
                                                    let bop_323 = val_302 * bop_322 in
                                                    let bop_324 = bop_323 + 0.014875361290850615 in
                                                    let bop_325 = val_302 * bop_324 in
                                                    let bop_326 = bop_325 + 0.1369298809227358 in
                                                    let bop_327 = val_302 * bop_326 in
                                                    let bop_328 = bop_327 + 0.599832206555888 in
                                                    let bop_329 = val_302 * bop_328 in
                                                    let bop_330 = bop_329 + 1.0 in
                                                    let x_334 = if bop_270
                                                                then let bop_331 = bop_287 / bop_301 in
                                                                     bop_331
                                                                else let bop_332 = bop_316 / bop_330 in
                                                                     bop_332 in
                                                    let bop_336 = 0.0 - x_334 in
                                                    if bop_261
                                                    then bop_336
                                                    else x_334 in
                                 {val_337},
                               pullReshape_param_201) in
                        let val_339 = 2.237292884728058 * pullReshape_bnd_338[0] in
                        let letwith_dst_5 = bbrow_202 with [4] <- val_339 in
                        // bbrow_343 aliases letwith_dst_5
                        loop (bbrow_343 = letwith_dst_5) = for i_356 < 4 do
                          let bop_358 = i_356 + 1 in
                          let j_360 = bb_inds_108[1, bop_358] - 1 in
                          let bop_363 = j_360 + 1 in
                          let bop_365 = bop_363 = 0 in
                          let k_368 = bb_inds_108[2, bop_358] - 1 in
                          let bop_369 = bb_data_109[2,
                                                    bop_358] * bbrow_343[k_368] in
                          let l_370 = bb_inds_108[0, bop_358] - 1 in
                          let bop_371 = bb_data_109[0,
                                                    bop_358] * pullReshape_bnd_338[bop_358] in
                          let tmp_375 = bop_369 + bop_371 in
                          let val_381 = if bop_365
                                        then tmp_375
                                        else let bop_378 = bb_data_109[1,
                                                                       bop_358] * bbrow_343[j_360] in
                                             let bop_380 = tmp_375 + bop_378 in
                                             bop_380 in
                          let letwith_dst_11 = bbrow_343 with [l_370] <- val_381 in
                          letwith_dst_11 in
                        // bbrow_344 aliases bbrow_343
                        loop (bbrow_344 = bbrow_343) = for ii_345 < 4 do
                          let bop_346 = ii_345 + 1 in
                          let i_347 = 5 - bop_346 in
                          let bop_349 = i_347 - 1 in
                          let val_350 = bbrow_344[i_347] - bbrow_344[bop_349] in
                          let letwith_dst_12 = bbrow_344 with [i_347] <- val_350 in
                          letwith_dst_12 in
                        {bbrow_344},
                      transpose(reshape((5, 3, 30), dir_vs_58))) in
               // tmp_repl_387 aliases dir_vs_58, untuple_386
               let tmp_repl_387 = replicate(3,
                                            transpose(transpose(untuple_386))) in
               let tmp_repl_388 = replicate(5, iota(3)) in
               // untuple_trns_420 aliases norm_4, val_68, val_65, dir_vs_58, untuple_386, val_66, norm_6, val_70, tmp_lit_71, tmp_repl_387, val_67
               let {untuple_trns_420} =
                 <comb_cert_78, zip_assert_90>
                 mapT(fn {[real]} ([real] arg_389, [real] arg_390, real x_391,
                                   [[real]] param_0_392, *[int] j_rep_393) =>
                        let {untuple_414} =
                          <comb_cert_78, zip_assert_90>
                          mapT(fn {real} (real arg_394, int j_395, real arg_396,
                                          [real] param_0_wasfree_397) =>
                                 let val_398 = j_395 + 1 in
                                 let {first_399, rest_400} = split(val_398,
                                                                   param_0_wasfree_397) in
                                 let {first_401, rest_402} = split(val_398,
                                                                   norm_0[j_395]) in
                                 let {untuple_411} =
                                   redomapT(fn {real} (real x_403,
                                                       real y_404) =>
                                              let val_405 = x_403 + y_404 in
                                              {val_405},
                                            fn {real} (real x_406, real arg_407,
                                                       real arg_408) =>
                                              let val_409 = arg_407 * arg_408 in
                                              let val_410 = x_406 + val_409 in
                                              {val_410},
                                            {0.0}, first_399, first_401) in
                                 let val_412 = untuple_411 * arg_396 in
                                 let val_413 = arg_394 + val_412 in
                                 {val_413},
                               arg_390, j_rep_393, arg_389, param_0_392) in
                        // untuple_419 aliases untuple_414
                        let {untuple_419} =
                          <zip_assert_103>
                          scanT(fn {real} (real arg_415, real param_0_416) =>
                                  let val_417 = exp(param_0_416) in
                                  let val_418 = arg_415 * val_417 in
                                  {val_418},
                                {x_391}, untuple_414) in
                        {untuple_419},
                      <zip_assert_103>transpose(norm_4),
                      <zip_assert_103>transpose(tmp_lit_71), norm_6,
                      <zip_assert_103>transpose(transpose(0, 2, tmp_repl_387)),
                      <zip_assert_103>transpose(tmp_repl_388)) in
               let {untuple_454} =
                 mapT(fn {real} ([real] xs_421) =>
                        let val_448 = <zip_assert_107>xs_421[0] * 0.00026609544843735446 in
                        let {untuple_451} =
                          <zip_assert_107>
                          redomapT(fn {real} (real x_426, real y_427) =>
                                     let bop_428 = x_426 < y_427 in
                                     let val_431 = if bop_428
                                                   then x_426
                                                   else y_427 in
                                     {val_431},
                                   fn {real} (real x_432, real arg_434,
                                              real arg_436) =>
                                     let val_438 = arg_436 * arg_434 in
                                     let bop_440 = x_432 < val_438 in
                                     let val_442 = if bop_440
                                                   then x_432
                                                   else val_438 in
                                     {val_442},
                                   {val_448}, divs_110, xs_421) in
                        {untuple_451},
                      <zip_assert_103>transpose(untuple_trns_420)) in
               let bop_457 = 1.0 <= untuple_454[0] in
               let val_473 = if bop_457
                             then 1126.754229107682
                             else let bop_458 = 1.0 <= untuple_454[1] in
                                  if bop_458
                                  then 1235.7473027229837
                                  else let bop_463 = 1.0 <= untuple_454[2] in
                                       if bop_463
                                       then 1336.1201435873802
                                       else let bop_464 = 1.0 <= untuple_454[3] in
                                            if bop_464
                                            then 1425.0708889426294
                                            else let val_465 = 1000.0 * untuple_454[4] in
                                                 let bop_467 = val_465 * 0.8588567633110704 in
                                                 let bop_469 = 0.75 < untuple_454[4] in
                                                 let bop_471 = 1.0 <= untuple_454[4] in
                                                 if bop_471
                                                 then 1502.9993357943733
                                                 else if bop_469
                                                      then 858.8567633110704
                                                      else bop_467 in
               let val_474 = x_114 + val_473 in
               {val_474},
             {0.0}, iota(1000)) in
  let bop_482 = untuple_475 / 1000.0 in
  bop_482
