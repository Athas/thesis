fun real main() =
  let norm_1 = [[1.0, 0.6, 0.8],
                [0.6, 0.8, 0.15],
                [0.8, 0.15, 0.5809475019311124]] in
  let norm_2 = [[0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15]] in
  let norm_3 = [3758.05, 11840.0, 1200.0] in
  let {num_mc_it_4, num_dates_9, num_und_13, num_bits_15, dir_vs_16} =
    {1000,
     5,
     3,
     30,
     [[536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608,
       4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384,
       8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],
      [536870912, 805306368, 671088640, 1006632960, 570425344, 855638016,
       713031680, 1069547520, 538968064, 808452096, 673710080, 1010565120,
       572653568, 858980352, 715816960, 1073725440, 536879104, 805318656,
       671098880, 1006648320, 570434048, 855651072, 713042560, 1069563840,
       538976288, 808464432, 673720360, 1010580540, 572662306, 858993459],
      [536870912, 805306368, 402653184, 603979776, 973078528, 385875968,
       595591168, 826277888, 438304768, 657457152, 999817216, 358875136,
       538574848, 807862272, 406552576, 605372416, 975183872, 389033984,
       597170176, 828646400, 437926400, 656873216, 1002152832, 357921088,
       536885792, 805312304, 402662296, 603992420, 973085210, 385885991],
      [536870912, 805306368, 939524096, 335544320, 234881024, 721420288,
       411041792, 616562688, 920649728, 1062207488, 381157376, 258736128,
       771883008, 453181440, 545488896, 817971200, 954261504, 340963328,
       238651392, 732843008, 417426944, 609285376, 909831040, 1068349120,
       383778848, 256901168, 783810616, 460062740, 537001998, 805503019],
      [536870912, 805306368, 402653184, 1006632960, 167772160, 285212672,
       713031680, 566231040, 853540864, 489684992, 952631296, 208928768,
       316801024, 758317056, 550076416, 813154304, 417505280, 1009913856,
       172697600, 297131008, 704744960, 553894656, 847291520, 499194688,
       954376224, 204607536, 306915352, 766893116, 536972810, 805552913],
      [536870912, 805306368, 402653184, 469762048, 301989888, 721420288,
       92274688, 264241152, 941621248, 741343232, 169345024, 924581888,
       395444224, 619380736, 1034256384, 603963392, 838868992, 452997120,
       494934016, 331357184, 706744832, 120597248, 261621120, 953946048,
       800208928, 148581424, 935168536, 350484252, 630339474, 1072370923],
      [536870912, 805306368, 134217728, 1006632960, 503316480, 754974720,
       629145600, 440401920, 94371840, 711983104, 229113856, 374079488,
       330694656, 996212736, 907247616, 557531136, 867573760, 190918656,
       1041467392, 490437632, 766918144, 643898624, 462663040, 125527616,
       672545696, 202454896, 373006376, 288845836, 1000351766, 930090001],
      [536870912, 268435456, 402653184, 872415232, 838860800, 956301312,
       612368384, 717225984, 211812352, 386924544, 302514176, 688128000,
       1015414784, 516751360, 1051492352, 773734400, 914432000, 63877120,
       807741440, 165200896, 748683776, 118489344, 168296832, 486802240,
       243663648, 667747216, 439124552, 81674924, 975249610, 350138737],
      [536870912, 268435456, 671088640, 469762048, 973078528, 1023410176,
       713031680, 339738624, 912261120, 797966336, 176685056, 71565312,
       510263296, 865533952, 814120960, 961232896, 887136256, 668078080,
       116070400, 382772224, 1047134720, 597098752, 411468416, 625689024,
       249602976, 449975248, 745216680, 43033924, 134873446, 201786361],
      [536870912, 268435456, 402653184, 67108864, 704643072, 385875968,
       696254464, 205520896, 920649728, 946864128, 359137280, 859045888,
       302907392, 50659328, 462192640, 524599296, 895541248, 590794752,
       168810496, 118033408, 831447552, 138662144, 485185920, 796511296,
       1021313184, 1064304752, 619184920, 997458052, 250479054, 745865975],
      [536870912, 268435456, 939524096, 1006632960, 838860800, 889192448,
       645922816, 46137344, 476053504, 584056832, 210239488, 465829888,
       820903936, 689897472, 73695232, 249118720, 110075904, 315338752,
       610637824, 517665792, 1049494016, 785318144, 376210304, 735921088,
       402760480, 738505552, 168368744, 151499820, 344957894, 936096557],
      [536870912, 805306368, 939524096, 1006632960, 503316480, 922746880,
       41943040, 423624704, 228589568, 651165696, 195559424, 500957184,
       791019520, 261292032, 1040285696, 118407168, 982065152, 625250304,
       329533440, 298984448, 153690624, 76845824, 579619712, 692987840,
       900670432, 450334832, 363187112, 719119956, 765461306, 382730781],
      [536870912, 805306368, 402653184, 603979776, 838860800, 117440512,
       478150656, 658505728, 752877568, 1060110336, 141033472, 209453056,
       244187136, 272957440, 678068224, 1014546432, 377724928, 876875776,
       443160576, 998185984, 168665600, 318837504, 914397568, 71818816,
       40763680, 527762288, 939688008, 335855668, 705536494, 587273091],
      [536870912, 268435456, 671088640, 738197504, 637534208, 150994944,
       813694976, 943718400, 77594624, 179306496, 798490624, 967049216,
       134348800, 1006698496, 235044864, 620937216, 377643008, 826314752,
       874711040, 854819840, 725109248, 856992512, 664336768, 94804544,
       100663328, 419430416, 411041832, 339738668, 580911142, 61865993],
      [536870912, 805306368, 939524096, 603979776, 100663296, 452984832,
       998244352, 188743680, 866123776, 389021696, 287834112, 172228608,
       824836096, 977731584, 153714688, 507854848, 254402560, 88403968,
       883578880, 235160576, 118055424, 422917888, 371224704, 326210368,
       654926368, 691353392, 773877944, 930190180, 554263078, 842348331]]} in
  let tmp_size_18 = size(0, reshape((5, 3, 30), dir_vs_16)) in
  let tmp_e_19 = tmp_size_18 = 5 in
  let zip_assert_20 = assert(tmp_e_19) in
  let val_21 = [-0.0283491736871803, 0.0178771081725381, 0.0043096808044729] in
  let val_22 = [-0.0183841413744211, -0.0044530897672834, 0.0024263805987983] in
  let val_24 = [-0.0172686581005089, 0.0125638544546015, 0.0094452810918001] in
  let val_25 = [-0.0144179417871814, 0.0157411263968213, 0.0125315353728014] in
  let val_26 = [-0.0121497422218761, 0.0182904634062437, 0.0151125070556484] in
  // tmp_lit_27 aliases val_24, val_25, val_21, val_22, val_26
  let tmp_lit_27 = [val_21,
                    val_22,
                    val_24,
                    val_25,
                    val_26] in
  let tmp_size_28 = size(0, tmp_lit_27) in
  let tmp_e_29 = 5 = tmp_size_28 in
  let zip_assert_30 = assert(tmp_e_29) in
  let comb_cert_31 = conjoin(zip_assert_20, zip_assert_30) in
  let tmp_size_32 = <comb_cert_31>size(1, tmp_lit_27) in
  let tmp_e_33 = tmp_size_32 = 3 in
  let zip_assert_35 = assert(tmp_e_33) in
  let tmp_size_36 = <comb_cert_31, zip_assert_35>size(1, tmp_lit_27) in
  let tmp_e_37 = 3 = tmp_size_36 in
  let zip_assert_38 = assert(tmp_e_37) in
  let tmp_e_39 = tmp_size_36 = 3 in
  let zip_assert_40 = assert(tmp_e_39) in
  let {bb_inds_41, bb_data_42} =
    {[[5, 2, 1, 3, 4],
      [0, 0, 0, 2, 3],
      [0, 5, 2, 5, 5]],
     [[2.237292884728058, 1.096095158985383, 0.7075902730592357,
       0.816682804349221, 0.7075902730592357],
      [0.0, 0.5998905309250137, 0.4993160054719562, 0.666970802919708,
       0.5006839945280438],
      [0.0, 0.4001094690749863, 0.5006839945280438, 0.3330291970802919,
       0.4993160054719562]]} in
  let divs_43 = [0.00026609544843735446, 0.00008445945945945946,
                 0.0008333333333333334] in
  let {untuple_502} =
    redomapT(fn {real} (real x_44, real y_45) =>
               let val_46 = x_44 + y_45 in
               {val_46},
             fn {real} (real x_47, int x_48) =>
               let val_53 = x_48 + 1 in
               let bop_54 = val_53 >> 1 in
               let val_60 = bop_54 ^ val_53 in
               // untuple_440 aliases dir_vs_16
               let {untuple_440} =
                 mapT(fn {[real]} ([[int]] pullReshape_param_61) =>
                        let bbrow_62 = replicate(5, 0.0) in
                        let {pullReshape_bnd_410} =
                          mapT(fn {real} ([int] param_0_83) =>
                                 let {untuple_226} =
                                   redomapT(fn {int} (int x_92, int y_210) =>
                                              let val_212 = x_92 ^ y_210 in
                                              {val_212},
                                            fn {int} (int x_217,
                                                      int param_0_218) =>
                                              let t_219 = 1 << param_0_218 in
                                              let bop_220 = val_60 & t_219 in
                                              let val_222 = bop_220 = t_219 in
                                              if val_222
                                              then let val_225 = x_217
                                                                 ^ param_0_83[param_0_218] in
                                                   {val_225}
                                              else {x_217},
                                            {0}, iota(30)) in
                                 let tmp_call_228 = toReal(untuple_226) in
                                 let val_229 = tmp_call_228 / 1073741824.0 in
                                 let dp_231 = val_229 - 0.5 in
                                 let bop_233 = 0.5 - dp_231 in
                                 let bop_235 = dp_231 + 0.5 in
                                 let bop_236 = dp_231 * dp_231 in
                                 let val_237 = 0.180625 - bop_236 in
                                 let bop_240 = val_237 * 2509.0809287301227 in
                                 let bop_241 = bop_240 + 33430.57558358813 in
                                 let bop_245 = val_237 * bop_241 in
                                 let bop_247 = bop_245 + 67265.7709270087 in
                                 let bop_250 = val_237 * bop_247 in
                                 let bop_251 = bop_250 + 45921.95393154987 in
                                 let bop_252 = val_237 * bop_251 in
                                 let bop_253 = bop_252 + 13731.69376550946 in
                                 let bop_254 = val_237 * bop_253 in
                                 let bop_255 = bop_254 + 1971.5909503065513 in
                                 let bop_256 = val_237 * bop_255 in
                                 let bop_257 = bop_256 + 133.14166789178438 in
                                 let bop_258 = val_237 * bop_257 in
                                 let bop_259 = bop_258 + 3.3871328727963665 in
                                 let bop_260 = val_237 * 5226.495278852854 in
                                 let bop_262 = bop_260 + 28729.085735721943 in
                                 let bop_266 = val_237 * bop_262 in
                                 let bop_268 = bop_266 + 39307.89580009271 in
                                 let bop_269 = val_237 * bop_268 in
                                 let bop_284 = bop_269 + 21213.794301586597 in
                                 let bop_295 = val_237 * bop_284 in
                                 let bop_299 = bop_295 + 5394.196021424751 in
                                 let bop_301 = val_237 * bop_299 in
                                 let bop_315 = bop_301 + 687.1870074920579 in
                                 let bop_317 = val_237 * bop_315 in
                                 let bop_319 = bop_317 + 42.31333070160091 in
                                 let bop_321 = val_237 * bop_319 in
                                 let bop_323 = bop_321 + 1.0 in
                                 let bop_324 = dp_231 <= 0.425 in
                                 let bop_325 = 0.0 <= dp_231 in
                                 let norm_334 = bop_325 && bop_324 in
                                 let bop_335 = 0.0 - dp_231 in
                                 let bop_336 = bop_335 <= 0.425 in
                                 let bop_337 = dp_231 < 0.0 in
                                 let norm_338 = bop_337 && bop_336 in
                                 let norm_339 = norm_338 || norm_334 in
                                 let val_409 =
                                   if norm_339
                                   then let tmp_bop_340 = bop_259 / bop_323 in
                                        let bop_341 = dp_231 * tmp_bop_340 in
                                        bop_341
                                   else let pp_342 =
                                          if bop_337
                                          then bop_235
                                          else bop_233 in
                                        let tmp_call_343 = log(pp_342) in
                                        let val_344 = -tmp_call_343 in
                                        let tmp_call_345 = sqrt(val_344) in
                                        let bop_346 = tmp_call_345 <= 5.0 in
                                        let val_347 = tmp_call_345 - 1.6 in
                                        let bop_348 = val_347
                                                      * 0.0007745450142783414 in
                                        let bop_349 = bop_348
                                                      + 0.022723844989269184 in
                                        let bop_350 = val_347 * bop_349 in
                                        let bop_351 = bop_350
                                                      + 0.2417807251774506 in
                                        let bop_352 = val_347 * bop_351 in
                                        let bop_353 = bop_352
                                                      + 1.2704582524523684 in
                                        let bop_354 = val_347 * bop_353 in
                                        let bop_355 = bop_354
                                                      + 3.6478483247632045 in
                                        let bop_356 = val_347 * bop_355 in
                                        let bop_357 = bop_356
                                                      + 5.769497221460691 in
                                        let bop_358 = val_347 * bop_357 in
                                        let bop_359 = bop_358
                                                      + 4.630337846156546 in
                                        let bop_360 = val_347 * bop_359 in
                                        let bop_361 = bop_360
                                                      + 1.4234371107496835 in
                                        let bop_362 = val_347
                                                      * 0.0000000010507500716444169 in
                                        let bop_363 = bop_362
                                                      + 0.0005475938084995345 in
                                        let bop_364 = val_347 * bop_363 in
                                        let bop_365 = bop_364
                                                      + 0.015198666563616457 in
                                        let bop_366 = val_347 * bop_365 in
                                        let bop_367 = bop_366
                                                      + 0.14810397642748008 in
                                        let bop_368 = val_347 * bop_367 in
                                        let bop_369 = bop_368
                                                      + 0.6897673349851 in
                                        let bop_370 = val_347 * bop_369 in
                                        let bop_371 = bop_370
                                                      + 1.6763848301838038 in
                                        let bop_372 = val_347 * bop_371 in
                                        let bop_373 = bop_372
                                                      + 2.053191626637759 in
                                        let bop_374 = val_347 * bop_373 in
                                        let bop_375 = bop_374 + 1.0 in
                                        let val_376 = tmp_call_345 - 5.0 in
                                        let bop_377 = val_376
                                                      * 0.00000020103343992922881 in
                                        let bop_378 = bop_377
                                                      + 0.000027115555687434876 in
                                        let bop_379 = val_376 * bop_378 in
                                        let bop_380 = bop_379
                                                      + 0.0012426609473880784 in
                                        let bop_381 = val_376 * bop_380 in
                                        let bop_382 = bop_381
                                                      + 0.026532189526576124 in
                                        let bop_383 = val_376 * bop_382 in
                                        let bop_384 = bop_383
                                                      + 0.29656057182850487 in
                                        let bop_385 = val_376 * bop_384 in
                                        let bop_386 = bop_385
                                                      + 1.7848265399172913 in
                                        let bop_387 = val_376 * bop_386 in
                                        let bop_388 = bop_387
                                                      + 5.463784911164114 in
                                        let bop_389 = val_376 * bop_388 in
                                        let bop_390 = bop_389
                                                      + 6.657904643501103 in
                                        let bop_391 = val_376
                                                      * 0.000020442631033899398 in
                                        let bop_392 = bop_391
                                                      + 0.0000001421511758316446 in
                                        let bop_393 = val_376 * bop_392 in
                                        let bop_394 = bop_393
                                                      + 0.000018463183175100548 in
                                        let bop_395 = val_376 * bop_394 in
                                        let bop_396 = bop_395
                                                      + 0.0007868691311456133 in
                                        let bop_397 = val_376 * bop_396 in
                                        let bop_398 = bop_397
                                                      + 0.014875361290850615 in
                                        let bop_399 = val_376 * bop_398 in
                                        let bop_400 = bop_399
                                                      + 0.1369298809227358 in
                                        let bop_401 = val_376 * bop_400 in
                                        let bop_402 = bop_401
                                                      + 0.599832206555888 in
                                        let bop_403 = val_376 * bop_402 in
                                        let bop_404 = bop_403 + 1.0 in
                                        let x_407 =
                                          if bop_346
                                          then let bop_405 = bop_361
                                                             / bop_375 in
                                               bop_405
                                          else let bop_406 = bop_390
                                                             / bop_404 in
                                               bop_406 in
                                        let bop_408 = 0.0 - x_407 in
                                        if bop_337
                                        then bop_408
                                        else x_407 in
                                 {val_409},
                               pullReshape_param_61) in
                        let val_411 = 2.237292884728058
                                      * pullReshape_bnd_410[0] in
                        let letwith_dst_10 = bbrow_62 with [4] <- val_411 in
                        // bbrow_414 aliases letwith_dst_10
                        loop (bbrow_414 = letwith_dst_10) = for i_424 < 4 do
                          let bop_425 = i_424 + 1 in
                          let bop_426 = bb_data_42[0, bop_425]
                                        * pullReshape_bnd_410[bop_425] in
                          let l_428 = bb_inds_41[0, bop_425] - 1 in
                          let k_429 = bb_inds_41[2, bop_425] - 1 in
                          let bop_430 = bb_data_42[2, bop_425]
                                        * bbrow_414[k_429] in
                          let tmp_431 = bop_430 + bop_426 in
                          let j_432 = bb_inds_41[1, bop_425] - 1 in
                          let bop_433 = j_432 + 1 in
                          let bop_434 = bop_433 = 0 in
                          let val_438 =
                            if bop_434
                            then tmp_431
                            else let bop_436 = bb_data_42[1, bop_425]
                                               * bbrow_414[j_432] in
                                 let bop_437 = tmp_431 + bop_436 in
                                 bop_437 in
                          let letwith_dst_11 = bbrow_414 with [l_428] <- val_438 in
                          letwith_dst_11 in
                        // bbrow_415 aliases bbrow_414
                        loop (bbrow_415 = bbrow_414) = for ii_416 < 4 do
                          let bop_417 = ii_416 + 1 in
                          let i_419 = 5 - bop_417 in
                          let bop_420 = i_419 - 1 in
                          let val_422 = bbrow_415[i_419] - bbrow_415[bop_420] in
                          let letwith_dst_12 = bbrow_415 with [i_419] <- val_422 in
                          letwith_dst_12 in
                        {bbrow_415},
                      transpose(reshape((5, 3, 30), dir_vs_16))) in
               let tmp_repl_441 = replicate(5, iota(3)) in
               // tmp_repl_443 aliases dir_vs_16, untuple_440
               let tmp_repl_443 = replicate(3, transpose(untuple_440)) in
               // untuple_trns_477 aliases dir_vs_16, val_24, untuple_440, val_25, val_21, val_22, norm_2, val_26, tmp_lit_27, tmp_repl_443, norm_3
               let {untuple_trns_477} =
                 <comb_cert_31, zip_assert_35>
                 mapT(fn {[real]} ([real] arg_446, real x_447, *[int] j_rep_448,
                                   [real] arg_449, [[real]] param_0_450) =>
                        let {untuple_471} =
                          <comb_cert_31, zip_assert_35>
                          mapT(fn {real} (real arg_451, int j_452, real arg_453,
                                          [real] param_0_wasfree_454) =>
                                 let val_455 = j_452 + 1 in
                                 let {first_456, rest_457} = split(val_455,
                                                                   param_0_wasfree_454) in
                                 let {first_458, rest_459} = split(val_455,
                                                                   norm_1[j_452]) in
                                 let {untuple_468} =
                                   redomapT(fn {real} (real x_460,
                                                       real y_461) =>
                                              let val_462 = x_460 + y_461 in
                                              {val_462},
                                            fn {real} (real x_463, real arg_464,
                                                       real arg_465) =>
                                              let val_466 = arg_464 * arg_465 in
                                              let val_467 = x_463 + val_466 in
                                              {val_467},
                                            {0.0}, first_456, first_458) in
                                 let val_469 = untuple_468 * arg_453 in
                                 let val_470 = arg_451 + val_469 in
                                 {val_470},
                               arg_449, j_rep_448, arg_446, param_0_450) in
                        // untuple_476 aliases untuple_471
                        let {untuple_476} =
                          <zip_assert_38>
                          scanT(fn {real} (real arg_472, real param_0_473) =>
                                  let val_474 = exp(param_0_473) in
                                  let val_475 = arg_472 * val_474 in
                                  {val_475},
                                {x_447}, untuple_471) in
                        {untuple_476},
                      <zip_assert_38>transpose(norm_2), norm_3,
                      <zip_assert_38>transpose(tmp_repl_441),
                      <zip_assert_38>transpose(tmp_lit_27),
                      <zip_assert_38>transpose(transpose(tmp_repl_443))) in
               let {untuple_491} =
                 mapT(fn {real} ([real] xs_478) =>
                        let val_479 = <zip_assert_40>xs_478[0]
                                      * 0.00026609544843735446 in
                        let {untuple_490} =
                          <zip_assert_40>
                          redomapT(fn {real} (real x_480, real y_481) =>
                                     let bop_482 = x_480 < y_481 in
                                     let val_483 =
                                       if bop_482
                                       then x_480
                                       else y_481 in
                                     {val_483},
                                   fn {real} (real x_484, real arg_485,
                                              real arg_486) =>
                                     let val_487 = arg_485 * arg_486 in
                                     let bop_488 = x_484 < val_487 in
                                     let val_489 =
                                       if bop_488
                                       then x_484
                                       else val_487 in
                                     {val_489},
                                   {val_479}, xs_478, divs_43) in
                        {untuple_490},
                      <zip_assert_38>transpose(untuple_trns_477)) in
               let bop_492 = 1.0 <= untuple_491[0] in
               let val_500 =
                 if bop_492
                 then 1126.754229107682
                 else let bop_493 = 1.0 <= untuple_491[1] in
                      if bop_493
                      then 1235.7473027229837
                      else let bop_494 = 1.0 <= untuple_491[2] in
                           if bop_494
                           then 1336.1201435873802
                           else let bop_495 = 1.0 <= untuple_491[3] in
                                if bop_495
                                then 1425.0708889426294
                                else let val_496 = 1000.0 * untuple_491[4] in
                                     let bop_497 = val_496
                                                   * 0.8588567633110704 in
                                     let bop_498 = 0.75 < untuple_491[4] in
                                     let bop_499 = 1.0 <= untuple_491[4] in
                                     if bop_499
                                     then 1502.9993357943733
                                     else if bop_498
                                          then 858.8567633110704
                                          else bop_497 in
               let val_501 = x_47 + val_500 in
               {val_501},
             {0.0}, iota(1000)) in
  let bop_503 = untuple_502 / 1000.0 in
  bop_503
