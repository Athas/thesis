fun real main() =
  let norm_1 = [[1.0, 0.6, 0.8],
                [0.6, 0.8, 0.15],
                [0.8, 0.15, 0.5809475019311124]] in
  let norm_2 = [[0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15]] in
  let norm_3 = [3758.05, 11840.0, 1200.0] in
  let {num_mc_it_7, num_dates_10, num_und_13, num_bits_14, dir_vs_15} =
    {1000,
     5,
     3,
     30,
     [[536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608,
       4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384,
       8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],
      [536870912, 805306368, 671088640, 1006632960, 570425344, 855638016,
       713031680, 1069547520, 538968064, 808452096, 673710080, 1010565120,
       572653568, 858980352, 715816960, 1073725440, 536879104, 805318656,
       671098880, 1006648320, 570434048, 855651072, 713042560, 1069563840,
       538976288, 808464432, 673720360, 1010580540, 572662306, 858993459],
      [536870912, 805306368, 402653184, 603979776, 973078528, 385875968,
       595591168, 826277888, 438304768, 657457152, 999817216, 358875136,
       538574848, 807862272, 406552576, 605372416, 975183872, 389033984,
       597170176, 828646400, 437926400, 656873216, 1002152832, 357921088,
       536885792, 805312304, 402662296, 603992420, 973085210, 385885991],
      [536870912, 805306368, 939524096, 335544320, 234881024, 721420288,
       411041792, 616562688, 920649728, 1062207488, 381157376, 258736128,
       771883008, 453181440, 545488896, 817971200, 954261504, 340963328,
       238651392, 732843008, 417426944, 609285376, 909831040, 1068349120,
       383778848, 256901168, 783810616, 460062740, 537001998, 805503019],
      [536870912, 805306368, 402653184, 1006632960, 167772160, 285212672,
       713031680, 566231040, 853540864, 489684992, 952631296, 208928768,
       316801024, 758317056, 550076416, 813154304, 417505280, 1009913856,
       172697600, 297131008, 704744960, 553894656, 847291520, 499194688,
       954376224, 204607536, 306915352, 766893116, 536972810, 805552913],
      [536870912, 805306368, 402653184, 469762048, 301989888, 721420288,
       92274688, 264241152, 941621248, 741343232, 169345024, 924581888,
       395444224, 619380736, 1034256384, 603963392, 838868992, 452997120,
       494934016, 331357184, 706744832, 120597248, 261621120, 953946048,
       800208928, 148581424, 935168536, 350484252, 630339474, 1072370923],
      [536870912, 805306368, 134217728, 1006632960, 503316480, 754974720,
       629145600, 440401920, 94371840, 711983104, 229113856, 374079488,
       330694656, 996212736, 907247616, 557531136, 867573760, 190918656,
       1041467392, 490437632, 766918144, 643898624, 462663040, 125527616,
       672545696, 202454896, 373006376, 288845836, 1000351766, 930090001],
      [536870912, 268435456, 402653184, 872415232, 838860800, 956301312,
       612368384, 717225984, 211812352, 386924544, 302514176, 688128000,
       1015414784, 516751360, 1051492352, 773734400, 914432000, 63877120,
       807741440, 165200896, 748683776, 118489344, 168296832, 486802240,
       243663648, 667747216, 439124552, 81674924, 975249610, 350138737],
      [536870912, 268435456, 671088640, 469762048, 973078528, 1023410176,
       713031680, 339738624, 912261120, 797966336, 176685056, 71565312,
       510263296, 865533952, 814120960, 961232896, 887136256, 668078080,
       116070400, 382772224, 1047134720, 597098752, 411468416, 625689024,
       249602976, 449975248, 745216680, 43033924, 134873446, 201786361],
      [536870912, 268435456, 402653184, 67108864, 704643072, 385875968,
       696254464, 205520896, 920649728, 946864128, 359137280, 859045888,
       302907392, 50659328, 462192640, 524599296, 895541248, 590794752,
       168810496, 118033408, 831447552, 138662144, 485185920, 796511296,
       1021313184, 1064304752, 619184920, 997458052, 250479054, 745865975],
      [536870912, 268435456, 939524096, 1006632960, 838860800, 889192448,
       645922816, 46137344, 476053504, 584056832, 210239488, 465829888,
       820903936, 689897472, 73695232, 249118720, 110075904, 315338752,
       610637824, 517665792, 1049494016, 785318144, 376210304, 735921088,
       402760480, 738505552, 168368744, 151499820, 344957894, 936096557],
      [536870912, 805306368, 939524096, 1006632960, 503316480, 922746880,
       41943040, 423624704, 228589568, 651165696, 195559424, 500957184,
       791019520, 261292032, 1040285696, 118407168, 982065152, 625250304,
       329533440, 298984448, 153690624, 76845824, 579619712, 692987840,
       900670432, 450334832, 363187112, 719119956, 765461306, 382730781],
      [536870912, 805306368, 402653184, 603979776, 838860800, 117440512,
       478150656, 658505728, 752877568, 1060110336, 141033472, 209453056,
       244187136, 272957440, 678068224, 1014546432, 377724928, 876875776,
       443160576, 998185984, 168665600, 318837504, 914397568, 71818816,
       40763680, 527762288, 939688008, 335855668, 705536494, 587273091],
      [536870912, 268435456, 671088640, 738197504, 637534208, 150994944,
       813694976, 943718400, 77594624, 179306496, 798490624, 967049216,
       134348800, 1006698496, 235044864, 620937216, 377643008, 826314752,
       874711040, 854819840, 725109248, 856992512, 664336768, 94804544,
       100663328, 419430416, 411041832, 339738668, 580911142, 61865993],
      [536870912, 805306368, 939524096, 603979776, 100663296, 452984832,
       998244352, 188743680, 866123776, 389021696, 287834112, 172228608,
       824836096, 977731584, 153714688, 507854848, 254402560, 88403968,
       883578880, 235160576, 118055424, 422917888, 371224704, 326210368,
       654926368, 691353392, 773877944, 930190180, 554263078, 842348331]]} in
  let tmp_size_16 = size(0, reshape((5, 3, 30), dir_vs_15)) in
  let tmp_e_17 = tmp_size_16 = 5 in
  let zip_assert_19 = assert(tmp_e_17) in
  let val_20 = [-0.0283491736871803, 0.0178771081725381, 0.0043096808044729] in
  let val_21 = [-0.0183841413744211, -0.0044530897672834, 0.0024263805987983] in
  let val_22 = [-0.0172686581005089, 0.0125638544546015, 0.0094452810918001] in
  let val_23 = [-0.0144179417871814, 0.0157411263968213, 0.0125315353728014] in
  let val_24 = [-0.0121497422218761, 0.0182904634062437, 0.0151125070556484] in
  // tmp_lit_25 aliases val_24, val_20, val_21, val_22, val_23
  let tmp_lit_25 = [val_20,
                    val_21,
                    val_22,
                    val_23,
                    val_24] in
  let tmp_size_26 = size(0, tmp_lit_25) in
  let tmp_e_27 = 5 = tmp_size_26 in
  let zip_assert_28 = assert(tmp_e_27) in
  let comb_cert_29 = conjoin(zip_assert_19, zip_assert_28) in
  let tmp_size_30 = <comb_cert_29>size(1, tmp_lit_25) in
  let tmp_e_32 = tmp_size_30 = 3 in
  let zip_assert_33 = assert(tmp_e_32) in
  let tmp_size_34 = <comb_cert_29, zip_assert_33>size(1, tmp_lit_25) in
  let tmp_e_35 = 3 = tmp_size_34 in
  let zip_assert_36 = assert(tmp_e_35) in
  let tmp_e_37 = tmp_size_34 = 3 in
  let zip_assert_38 = assert(tmp_e_37) in
  let {bb_inds_39, bb_data_40} =
    {[[5, 2, 1, 3, 4],
      [0, 0, 0, 2, 3],
      [0, 5, 2, 5, 5]],
     [[2.237292884728058, 1.096095158985383, 0.7075902730592357,
       0.816682804349221, 0.7075902730592357],
      [0.0, 0.5998905309250137, 0.4993160054719562, 0.666970802919708,
       0.5006839945280438],
      [0.0, 0.4001094690749863, 0.5006839945280438, 0.3330291970802919,
       0.4993160054719562]]} in
  let divs_41 = [0.00026609544843735446, 0.00008445945945945946,
                 0.0008333333333333334] in
  let {untuple_502} =
    redomapT(fn {real} (real x_42, real y_43) =>
               let val_44 = x_42 + y_43 in
               {val_44},
             fn {real} (real x_45, int x_46) =>
               let val_47 = x_46 + 1 in
               let bop_48 = val_47 >> 1 in
               let val_49 = bop_48 ^ val_47 in
               // untuple_382 aliases dir_vs_15
               let {untuple_382} =
                 mapT(fn {[real]} ([[int]] pullReshape_param_50) =>
                        let bbrow_51 = replicate(5, 0.0) in
                        let {pullReshape_bnd_286} =
                          mapT(fn {real} ([int] param_0_52) =>
                                 let {untuple_73} =
                                   redomapT(fn {int} (int x_53, int y_54) =>
                                              let val_55 = x_53 ^ y_54 in
                                              {val_55},
                                            fn {int} (int x_56,
                                                      int param_0_57) =>
                                              let t_61 = 1 << param_0_57 in
                                              let bop_63 = val_49 & t_61 in
                                              let val_64 = bop_63 = t_61 in
                                              if val_64
                                              then let val_68 = x_56 ^ param_0_52[param_0_57] in
                                                   {val_68}
                                              else {x_56},
                                            {0}, iota(30)) in
                                 let tmp_call_74 = toReal(untuple_73) in
                                 let val_75 = tmp_call_74 / 1073741824.0 in
                                 let dp_81 = val_75 - 0.5 in
                                 let bop_82 = 0.5 - dp_81 in
                                 let bop_83 = dp_81 + 0.5 in
                                 let bop_84 = dp_81 * dp_81 in
                                 let val_85 = 0.180625 - bop_84 in
                                 let bop_86 = val_85 * 2509.0809287301227 in
                                 let bop_87 = bop_86 + 33430.57558358813 in
                                 let bop_88 = val_85 * bop_87 in
                                 let bop_89 = bop_88 + 67265.7709270087 in
                                 let bop_91 = val_85 * bop_89 in
                                 let bop_92 = bop_91 + 45921.95393154987 in
                                 let bop_93 = val_85 * bop_92 in
                                 let bop_94 = bop_93 + 13731.69376550946 in
                                 let bop_95 = val_85 * bop_94 in
                                 let bop_96 = bop_95 + 1971.5909503065513 in
                                 let bop_97 = val_85 * bop_96 in
                                 let bop_98 = bop_97 + 133.14166789178438 in
                                 let bop_100 = val_85 * bop_98 in
                                 let bop_101 = bop_100 + 3.3871328727963665 in
                                 let bop_104 = val_85 * 5226.495278852854 in
                                 let bop_105 = bop_104 + 28729.085735721943 in
                                 let bop_116 = val_85 * bop_105 in
                                 let bop_117 = bop_116 + 39307.89580009271 in
                                 let bop_118 = val_85 * bop_117 in
                                 let bop_119 = bop_118 + 21213.794301586597 in
                                 let bop_120 = val_85 * bop_119 in
                                 let bop_121 = bop_120 + 5394.196021424751 in
                                 let bop_122 = val_85 * bop_121 in
                                 let bop_123 = bop_122 + 687.1870074920579 in
                                 let bop_124 = val_85 * bop_123 in
                                 let bop_125 = bop_124 + 42.31333070160091 in
                                 let bop_126 = val_85 * bop_125 in
                                 let bop_127 = bop_126 + 1.0 in
                                 let bop_128 = dp_81 <= 0.425 in
                                 let bop_129 = 0.0 <= dp_81 in
                                 let norm_130 = bop_129 && bop_128 in
                                 let bop_131 = 0.0 - dp_81 in
                                 let bop_132 = bop_131 <= 0.425 in
                                 let bop_133 = dp_81 < 0.0 in
                                 let norm_134 = bop_133 && bop_132 in
                                 let norm_135 = norm_134 || norm_130 in
                                 let val_285 = if norm_135
                                               then let tmp_bop_136 = bop_101 / bop_127 in
                                                    let bop_137 = dp_81 * tmp_bop_136 in
                                                    bop_137
                                               else let pp_138 = if bop_133
                                                                 then bop_83
                                                                 else bop_82 in
                                                    let tmp_call_139 = log(pp_138) in
                                                    let val_140 = -tmp_call_139 in
                                                    let tmp_call_141 = sqrt(val_140) in
                                                    let bop_142 = tmp_call_141 <= 5.0 in
                                                    let val_143 = tmp_call_141 - 1.6 in
                                                    let bop_144 = val_143 * 0.0007745450142783414 in
                                                    let bop_145 = bop_144 + 0.022723844989269184 in
                                                    let bop_146 = val_143 * bop_145 in
                                                    let bop_147 = bop_146 + 0.2417807251774506 in
                                                    let bop_148 = val_143 * bop_147 in
                                                    let bop_149 = bop_148 + 1.2704582524523684 in
                                                    let bop_150 = val_143 * bop_149 in
                                                    let bop_151 = bop_150 + 3.6478483247632045 in
                                                    let bop_152 = val_143 * bop_151 in
                                                    let bop_153 = bop_152 + 5.769497221460691 in
                                                    let bop_154 = val_143 * bop_153 in
                                                    let bop_155 = bop_154 + 4.630337846156546 in
                                                    let bop_156 = val_143 * bop_155 in
                                                    let bop_157 = bop_156 + 1.4234371107496835 in
                                                    let bop_158 = val_143 * 0.0000000010507500716444169 in
                                                    let bop_159 = bop_158 + 0.0005475938084995345 in
                                                    let bop_160 = val_143 * bop_159 in
                                                    let bop_161 = bop_160 + 0.015198666563616457 in
                                                    let bop_162 = val_143 * bop_161 in
                                                    let bop_163 = bop_162 + 0.14810397642748008 in
                                                    let bop_164 = val_143 * bop_163 in
                                                    let bop_165 = bop_164 + 0.6897673349851 in
                                                    let bop_166 = val_143 * bop_165 in
                                                    let bop_167 = bop_166 + 1.6763848301838038 in
                                                    let bop_168 = val_143 * bop_167 in
                                                    let bop_169 = bop_168 + 2.053191626637759 in
                                                    let bop_170 = val_143 * bop_169 in
                                                    let bop_171 = bop_170 + 1.0 in
                                                    let val_172 = tmp_call_141 - 5.0 in
                                                    let bop_173 = val_172 * 0.00000020103343992922881 in
                                                    let bop_174 = bop_173 + 0.000027115555687434876 in
                                                    let bop_175 = val_172 * bop_174 in
                                                    let bop_176 = bop_175 + 0.0012426609473880784 in
                                                    let bop_177 = val_172 * bop_176 in
                                                    let bop_178 = bop_177 + 0.026532189526576124 in
                                                    let bop_179 = val_172 * bop_178 in
                                                    let bop_180 = bop_179 + 0.29656057182850487 in
                                                    let bop_181 = val_172 * bop_180 in
                                                    let bop_182 = bop_181 + 1.7848265399172913 in
                                                    let bop_183 = val_172 * bop_182 in
                                                    let bop_184 = bop_183 + 5.463784911164114 in
                                                    let bop_185 = val_172 * bop_184 in
                                                    let bop_186 = bop_185 + 6.657904643501103 in
                                                    let bop_187 = val_172 * 0.000020442631033899398 in
                                                    let bop_188 = bop_187 + 0.0000001421511758316446 in
                                                    let bop_189 = val_172 * bop_188 in
                                                    let bop_190 = bop_189 + 0.000018463183175100548 in
                                                    let bop_191 = val_172 * bop_190 in
                                                    let bop_192 = bop_191 + 0.0007868691311456133 in
                                                    let bop_193 = val_172 * bop_192 in
                                                    let bop_194 = bop_193 + 0.014875361290850615 in
                                                    let bop_195 = val_172 * bop_194 in
                                                    let bop_196 = bop_195 + 0.1369298809227358 in
                                                    let bop_197 = val_172 * bop_196 in
                                                    let bop_206 = bop_197 + 0.599832206555888 in
                                                    let bop_215 = val_172 * bop_206 in
                                                    let bop_223 = bop_215 + 1.0 in
                                                    let x_236 = if bop_142
                                                                then let bop_229 = bop_157 / bop_171 in
                                                                     bop_229
                                                                else let bop_230 = bop_186 / bop_223 in
                                                                     bop_230 in
                                                    let bop_237 = 0.0 - x_236 in
                                                    if bop_133
                                                    then bop_237
                                                    else x_236 in
                                 {val_285},
                               pullReshape_param_50) in
                        let val_333 = 2.237292884728058 * pullReshape_bnd_286[0] in
                        let letwith_dst_9 = bbrow_51 with [4] <- val_333 in
                        // bbrow_340 aliases letwith_dst_9
                        loop (bbrow_340 = letwith_dst_9) = for i_355 < 4 do
                          let bop_357 = i_355 + 1 in
                          let j_359 = bb_inds_39[1, bop_357] - 1 in
                          let bop_361 = j_359 + 1 in
                          let bop_362 = bop_361 = 0 in
                          let k_364 = bb_inds_39[2, bop_357] - 1 in
                          let bop_366 = bb_data_40[2,
                                                   bop_357] * bbrow_340[k_364] in
                          let l_367 = bb_inds_39[0, bop_357] - 1 in
                          let bop_372 = bb_data_40[0,
                                                   bop_357] * pullReshape_bnd_286[bop_357] in
                          let tmp_373 = bop_366 + bop_372 in
                          let val_377 = if bop_362
                                        then tmp_373
                                        else let bop_374 = bb_data_40[1,
                                                                      bop_357] * bbrow_340[j_359] in
                                             let bop_376 = tmp_373 + bop_374 in
                                             bop_376 in
                          let letwith_dst_11 = bbrow_340 with [l_367] <- val_377 in
                          letwith_dst_11 in
                        // bbrow_341 aliases bbrow_340
                        loop (bbrow_341 = bbrow_340) = for ii_342 < 4 do
                          let bop_348 = ii_342 + 1 in
                          let i_351 = 5 - bop_348 in
                          let bop_352 = i_351 - 1 in
                          let val_353 = bbrow_341[i_351] - bbrow_341[bop_352] in
                          let letwith_dst_12 = bbrow_341 with [i_351] <- val_353 in
                          letwith_dst_12 in
                        {bbrow_341},
                      transpose(reshape((5, 3, 30), dir_vs_15))) in
               // tmp_repl_383 aliases untuple_382, dir_vs_15
               let tmp_repl_383 = replicate(3, transpose(untuple_382)) in
               let tmp_repl_384 = replicate(5, iota(3)) in
               // untuple_trns_476 aliases val_24, val_20, tmp_lit_25, val_21, val_22, norm_2, untuple_382, tmp_repl_383, dir_vs_15, val_23, norm_3
               let {untuple_trns_476} =
                 <comb_cert_29, zip_assert_33>
                 mapT(fn {[real]} ([real] arg_385, [real] arg_422, real x_423,
                                   [[real]] param_0_424, *[int] j_rep_425) =>
                        let {untuple_461} =
                          <comb_cert_29, zip_assert_33>
                          mapT(fn {real} (real arg_429, int j_430, real arg_433,
                                          [real] param_0_wasfree_435) =>
                                 let val_437 = j_430 + 1 in
                                 let {first_439, rest_441} = split(val_437,
                                                                   param_0_wasfree_435) in
                                 let {first_443, rest_444} = split(val_437,
                                                                   norm_1[j_430]) in
                                 let {untuple_456} =
                                   redomapT(fn {real} (real x_445,
                                                       real y_446) =>
                                              let val_447 = x_445 + y_446 in
                                              {val_447},
                                            fn {real} (real x_449, real arg_450,
                                                       real arg_452) =>
                                              let val_453 = arg_450 * arg_452 in
                                              let val_455 = x_449 + val_453 in
                                              {val_455},
                                            {0.0}, first_439, first_443) in
                                 let val_459 = untuple_456 * arg_433 in
                                 let val_460 = arg_429 + val_459 in
                                 {val_460},
                               arg_422, j_rep_425, arg_385, param_0_424) in
                        // untuple_472 aliases untuple_461
                        let {untuple_472} =
                          <zip_assert_36>
                          scanT(fn {real} (real arg_462, real param_0_466) =>
                                  let val_468 = exp(param_0_466) in
                                  let val_470 = arg_462 * val_468 in
                                  {val_470},
                                {x_423}, untuple_461) in
                        {untuple_472},
                      <zip_assert_36>transpose(norm_2),
                      <zip_assert_36>transpose(tmp_lit_25), norm_3,
                      <zip_assert_36>transpose(transpose(tmp_repl_383)),
                      <zip_assert_36>transpose(tmp_repl_384)) in
               let {untuple_491} =
                 mapT(fn {real} ([real] xs_477) =>
                        let val_478 = <zip_assert_38>xs_477[0] * 0.00026609544843735446 in
                        let {untuple_490} =
                          <zip_assert_38>
                          redomapT(fn {real} (real x_479, real y_480) =>
                                     let bop_481 = x_479 < y_480 in
                                     let val_483 = if bop_481
                                                   then x_479
                                                   else y_480 in
                                     {val_483},
                                   fn {real} (real x_484, real arg_485,
                                              real arg_486) =>
                                     let val_487 = arg_486 * arg_485 in
                                     let bop_488 = x_484 < val_487 in
                                     let val_489 = if bop_488
                                                   then x_484
                                                   else val_487 in
                                     {val_489},
                                   {val_478}, divs_41, xs_477) in
                        {untuple_490},
                      <zip_assert_36>transpose(untuple_trns_476)) in
               let bop_492 = 1.0 <= untuple_491[0] in
               let val_500 = if bop_492
                             then 1126.754229107682
                             else let bop_493 = 1.0 <= untuple_491[1] in
                                  if bop_493
                                  then 1235.7473027229837
                                  else let bop_494 = 1.0 <= untuple_491[2] in
                                       if bop_494
                                       then 1336.1201435873802
                                       else let bop_495 = 1.0 <= untuple_491[3] in
                                            if bop_495
                                            then 1425.0708889426294
                                            else let val_496 = 1000.0 * untuple_491[4] in
                                                 let bop_497 = val_496 * 0.8588567633110704 in
                                                 let bop_498 = 0.75 < untuple_491[4] in
                                                 let bop_499 = 1.0 <= untuple_491[4] in
                                                 if bop_499
                                                 then 1502.9993357943733
                                                 else if bop_498
                                                      then 858.8567633110704
                                                      else bop_497 in
               let val_501 = x_45 + val_500 in
               {val_501},
             {0.0}, iota(1000)) in
  let bop_503 = untuple_502 / 1000.0 in
  bop_503
