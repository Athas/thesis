fun [real] main() =
  let norm_0 = [0.0] in
  let {zip_cert_Dxxlow_1, Dxxlow_4, Dxxlow_6, Dxxlow_8} =
    {Checked,
     [0.0],
     [0.0],
     [0.0]} in
  let {untuple_851} =
    mapT(fn {real} (int i_9) =>
           let {untuple_20} =
             mapT(fn {real} (int i_12) =>
                    let tmp_call_14 = toReal(i_12) in
                    let bop_17 = 5.0 * tmp_call_14 in
                    let val_19 = bop_17 / 31.0 in
                    {val_19},
                  iota(32)) in
           let {untuple_31} =
             mapT(fn {real} (int i_21) =>
                    let tmp_call_22 = toReal(i_21) in
                    let bop_28 = tmp_call_22 * 0.008385254915624212 in
                    let bop_29 = bop_28 - 0.025155764746872637 in
                    let val_30 = bop_29 + 0.03 in
                    {val_30},
                  iota(32)) in
           let dxu_32 = untuple_31[1] - untuple_31[0] in
           let bop_33 = 1.0 / dxu_32 in
           let negate_34 = -bop_33 in
           let norm_35 = [negate_34] in
           let concat_x_36 = size(0, norm_35) in
           let concat_sz_37 = concat_x_36 + 30 in
           let norm_38 = [bop_33] in
           let concat_x_39 = size(0, norm_38) in
           let concat_sz_40 = concat_x_39 + 30 in
           let concat_sz_41 = concat_sz_40 + 1 in
           let tmp_e_42 = concat_sz_41 = 32 in
           let zip_assert_43 = assert(tmp_e_42) in
           let dxl_44 = untuple_31[31] - untuple_31[30] in
           let bop_45 = 1.0 / dxl_44 in
           let negate_46 = -bop_45 in
           let norm_47 = [negate_46] in
           let concat_y_48 = size(0, norm_47) in
           let concat_sz_49 = 31 + concat_y_48 in
           let norm_50 = [bop_45] in
           let concat_y_51 = size(0, norm_50) in
           let concat_sz_52 = concat_sz_37 + concat_y_51 in
           let tmp_e_53 = concat_sz_49 = concat_sz_52 in
           let zip_assert_54 = assert(tmp_e_53) in
           let tmp_e_55 = concat_sz_52 = concat_sz_41 in
           let zip_assert_56 = assert(tmp_e_55) in
           let {soac_v_71, soac_v_72, soac_v_73} =
             mapT(fn {real, real, real} (int y_57) =>
                    let val_58 = 1 + y_57 in
                    let bop_59 = val_58 + 1 in
                    let bop_60 = val_58 - 1 in
                    let dxl_61 = untuple_31[val_58] - untuple_31[bop_60] in
                    let dxu_62 = untuple_31[bop_59] - untuple_31[val_58] in
                    let bop_63 = dxu_62 / dxl_61 in
                    let bop_64 = dxl_61 + dxu_62 in
                    let bop_65 = bop_63 / bop_64 in
                    let negate_66 = -bop_65 in
                    let bop_67 = dxl_61 / dxu_62 in
                    let bop_68 = bop_63 - bop_67 in
                    let bop_69 = bop_68 / bop_64 in
                    let bop_70 = bop_67 / bop_64 in
                    {negate_66, bop_69, bop_70},
                  iota(30)) in
           // tmp_conc_74 aliases norm_0
           let tmp_conc_74 = concat(norm_0, soac_v_71) in
           // tmp_conc_75 aliases norm_0, tmp_conc_74
           let tmp_conc_75 = concat(tmp_conc_74, norm_47) in
           // tmp_conc_76 aliases norm_35
           let tmp_conc_76 = concat(norm_35, soac_v_72) in
           // tmp_conc_77 aliases tmp_conc_76, norm_35
           let tmp_conc_77 = concat(tmp_conc_76, norm_50) in
           // tmp_conc_78 aliases norm_38
           let tmp_conc_78 = concat(norm_38, soac_v_73) in
           // tmp_conc_79 aliases norm_38, tmp_conc_78
           let tmp_conc_79 = concat(tmp_conc_78, norm_0) in
           let {soac_v_97, soac_v_98, soac_v_99} =
             mapT(fn {real, real, real} (int y_80) =>
                    let val_81 = 1 + y_80 in
                    let bop_82 = val_81 + 1 in
                    let bop_83 = val_81 - 1 in
                    let dxl_84 = untuple_31[val_81] - untuple_31[bop_83] in
                    let bop_85 = 2.0 / dxl_84 in
                    let bop_86 = 1.0 / dxl_84 in
                    let dxu_87 = untuple_31[bop_82] - untuple_31[val_81] in
                    let bop_88 = dxl_84 + dxu_87 in
                    let bop_89 = bop_85 / bop_88 in
                    let bop_90 = 1.0 / dxu_87 in
                    let bop_91 = bop_86 + bop_90 in
                    let bop_92 = 2.0 * bop_91 in
                    let bop_93 = bop_92 / bop_88 in
                    let negate_94 = -bop_93 in
                    let bop_95 = 2.0 / dxu_87 in
                    let bop_96 = bop_95 / bop_88 in
                    {bop_89, negate_94, bop_96},
                  iota(30)) in
           // tmp_conc_100 aliases Dxxlow_4
           let tmp_conc_100 = concat(Dxxlow_4, soac_v_97) in
           // tmp_conc_101 aliases tmp_conc_100, Dxxlow_4
           let tmp_conc_101 = concat(tmp_conc_100, Dxxlow_4) in
           // tmp_conc_102 aliases Dxxlow_6
           let tmp_conc_102 = concat(Dxxlow_6, soac_v_98) in
           // tmp_conc_103 aliases tmp_conc_102, Dxxlow_6
           let tmp_conc_103 = concat(tmp_conc_102, Dxxlow_6) in
           // tmp_conc_104 aliases Dxxlow_8
           let tmp_conc_104 = concat(Dxxlow_8, soac_v_99) in
           // tmp_conc_105 aliases Dxxlow_8, tmp_conc_104
           let tmp_conc_105 = concat(tmp_conc_104, Dxxlow_8) in
           let {untuple_111} =
             mapT(fn {real} (int i_106) =>
                    let tmp_call_107 = toReal(i_106) in
                    let bop_108 = tmp_call_107 * 0.8385254915624212 in
                    let bop_109 = bop_108 - 6.708203932499369 in
                    let val_110 = bop_109 + -1.6094379124341003 in
                    {val_110},
                  iota(16)) in
           let dxu_112 = untuple_111[1] - untuple_111[0] in
           let bop_113 = 1.0 / dxu_112 in
           let negate_114 = -bop_113 in
           let norm_115 = [negate_114] in
           let concat_x_116 = size(0, norm_115) in
           let concat_sz_117 = concat_x_116 + 14 in
           let norm_118 = [bop_113] in
           let concat_x_119 = size(0, norm_118) in
           let concat_sz_120 = concat_x_119 + 14 in
           let concat_sz_121 = concat_sz_120 + 1 in
           let tmp_e_122 = concat_sz_121 = 16 in
           let zip_assert_123 = assert(tmp_e_122) in
           let dxl_124 = untuple_111[15] - untuple_111[14] in
           let bop_125 = 1.0 / dxl_124 in
           let negate_126 = -bop_125 in
           let norm_127 = [negate_126] in
           let concat_y_128 = size(0, norm_127) in
           let concat_sz_129 = 15 + concat_y_128 in
           let norm_130 = [bop_125] in
           let concat_y_131 = size(0, norm_130) in
           let concat_sz_132 = concat_sz_117 + concat_y_131 in
           let tmp_e_133 = concat_sz_129 = concat_sz_132 in
           let zip_assert_134 = assert(tmp_e_133) in
           let tmp_e_135 = concat_sz_132 = concat_sz_121 in
           let zip_assert_136 = assert(tmp_e_135) in
           let {soac_v_151, soac_v_152, soac_v_153} =
             mapT(fn {real, real, real} (int y_137) =>
                    let val_138 = 1 + y_137 in
                    let bop_139 = val_138 + 1 in
                    let bop_140 = val_138 - 1 in
                    let dxl_141 = untuple_111[val_138] - untuple_111[bop_140] in
                    let dxu_142 = untuple_111[bop_139] - untuple_111[val_138] in
                    let bop_143 = dxu_142 / dxl_141 in
                    let bop_144 = dxl_141 + dxu_142 in
                    let bop_145 = bop_143 / bop_144 in
                    let negate_146 = -bop_145 in
                    let bop_147 = dxl_141 / dxu_142 in
                    let bop_148 = bop_143 - bop_147 in
                    let bop_149 = bop_148 / bop_144 in
                    let bop_150 = bop_147 / bop_144 in
                    {negate_146, bop_149, bop_150},
                  iota(14)) in
           // tmp_conc_154 aliases norm_0, tmp_conc_74, tmp_conc_75
           let tmp_conc_154 = concat(norm_0, soac_v_151) in
           // tmp_conc_155 aliases norm_0, tmp_conc_74, tmp_conc_154, tmp_conc_75
           let tmp_conc_155 = concat(tmp_conc_154, norm_127) in
           // tmp_conc_156 aliases norm_115
           let tmp_conc_156 = concat(norm_115, soac_v_152) in
           // tmp_conc_157 aliases tmp_conc_156, norm_115
           let tmp_conc_157 = concat(tmp_conc_156, norm_130) in
           // tmp_conc_158 aliases norm_118
           let tmp_conc_158 = concat(norm_118, soac_v_153) in
           // tmp_conc_159 aliases tmp_conc_158, norm_118
           let tmp_conc_159 = concat(tmp_conc_158, norm_0) in
           let {soac_v_177, soac_v_178, soac_v_179} =
             mapT(fn {real, real, real} (int y_160) =>
                    let val_161 = 1 + y_160 in
                    let bop_162 = val_161 + 1 in
                    let bop_163 = val_161 - 1 in
                    let dxl_164 = untuple_111[val_161] - untuple_111[bop_163] in
                    let bop_165 = 2.0 / dxl_164 in
                    let bop_166 = 1.0 / dxl_164 in
                    let dxu_167 = untuple_111[bop_162] - untuple_111[val_161] in
                    let bop_168 = dxl_164 + dxu_167 in
                    let bop_169 = bop_165 / bop_168 in
                    let bop_170 = 1.0 / dxu_167 in
                    let bop_171 = bop_166 + bop_170 in
                    let bop_172 = 2.0 * bop_171 in
                    let bop_173 = bop_172 / bop_168 in
                    let negate_174 = -bop_173 in
                    let bop_175 = 2.0 / dxu_167 in
                    let bop_176 = bop_175 / bop_168 in
                    {bop_169, negate_174, bop_176},
                  iota(14)) in
           // tmp_conc_180 aliases tmp_conc_100, Dxxlow_4, tmp_conc_101
           let tmp_conc_180 = concat(Dxxlow_4, soac_v_177) in
           // tmp_conc_181 aliases tmp_conc_100, tmp_conc_180, Dxxlow_4, tmp_conc_101
           let tmp_conc_181 = concat(tmp_conc_180, Dxxlow_4) in
           // tmp_conc_182 aliases tmp_conc_102, Dxxlow_6, tmp_conc_103
           let tmp_conc_182 = concat(Dxxlow_6, soac_v_178) in
           // tmp_conc_183 aliases tmp_conc_102, tmp_conc_182, Dxxlow_6, tmp_conc_103
           let tmp_conc_183 = concat(tmp_conc_182, Dxxlow_6) in
           // tmp_conc_184 aliases Dxxlow_8, tmp_conc_104, tmp_conc_105
           let tmp_conc_184 = concat(Dxxlow_8, soac_v_179) in
           // tmp_conc_185 aliases Dxxlow_8, tmp_conc_104, tmp_conc_184, tmp_conc_105
           let tmp_conc_185 = concat(tmp_conc_184, Dxxlow_8) in
           let tmp_repl_186 = replicate(16, 0.0) in
           // xXy_187 aliases tmp_repl_186
           let xXy_187 = replicate(32, tmp_repl_186) in
           let tmp_call_188 = toReal(i_9) in
           let val_189 = 0.001 * tmp_call_188 in
           let {untuple_195} =
             mapT(fn {*[real]} (real xi_190) =>
                    let val_191 = xi_190 - val_189 in
                    let bop_192 = 0.0 < val_191 in
                    let tmp_arr_193 =
                      if bop_192
                      then val_191
                      else 0.0 in
                    let val_194 = replicate(16, tmp_arr_193) in
                    {val_194},
                  untuple_31) in
           // myResult_196 aliases untuple_195
           // myMuX_197 aliases tmp_repl_186, xXy_187
           // myVarX_198 aliases tmp_repl_186, xXy_187
           // myMuY_199 aliases tmp_repl_186, xXy_187
           // myVarY_200 aliases tmp_repl_186, xXy_187
           loop ({myResult_196, myMuX_197, myVarX_198, myMuY_199,
                  myVarY_200} = {untuple_195, xXy_187, xXy_187, xXy_187,
                                 xXy_187}) = for i_201 < 31 do
             let i_202 = 30 - i_201 in
             let bop_203 = i_202 + 1 in
             let bop_207 = 0.18 * untuple_20[i_202] in
             let {soac_v_223, soac_v_224, soac_v_225, soac_v_226} =
               mapT(fn {*[real], *[real], *[real], *[real]} (real xi_208) =>
                      let tmp_call_209 = log(xi_208) in
                      let bop_210 = 0.5 * tmp_call_209 in
                      let {soac_v_217, soac_v_219, soac_v_220, soac_v_222} =
                        mapT(fn {real, real, real, real} (real yj_211) =>
                               let bop_212 = bop_210 + yj_211 in
                               let bop_213 = bop_212 - bop_207 in
                               let val_215 = 2.0 * bop_213 in
                               let tmp_call_216 = exp(val_215) in
                               {0.0, tmp_call_216, 0.0, 0.36},
                             untuple_111) in
                      {soac_v_217, soac_v_219, soac_v_220, soac_v_222},
                    untuple_31) in
             let tmp_size_248 = size(1, soac_v_223) in
             let tmp_e_262 = 16 = tmp_size_248 in
             let zip_assert_263 = assert(tmp_e_262) in
             let tmp_size_264 = size(1, soac_v_224) in
             let tmp_e_265 = tmp_size_248 = tmp_size_264 in
             let zip_assert_266 = assert(tmp_e_265) in
             let comb_cert_268 = conjoin(zip_assert_263, zip_assert_266) in
             let comb_cert_273 = conjoin(zip_assert_43, zip_assert_54,
                                         zip_assert_56, zip_assert_263,
                                         zip_assert_266) in
             let bop_277 = untuple_20[bop_203] - untuple_20[i_202] in
             let dtInv_287 = 1.0 / bop_277 in
             let tmp_repl_288 = replicate(16, iota(32)) in
             let tmp_repl_289 = replicate(32, iota(16)) in
             // untuple_612 aliases soac_v_224, soac_v_223
             let {untuple_612} =
               <comb_cert_268>
               mapT(fn {[real]} (int repl_x_290, *[int] i_291, [real] arg_315,
                                 [real] arg_316, *[int] j_rep_317) =>
                      let {untuple_398} =
                        mapT(fn {real} (int j_318, int i_wasfree_339) =>
                               let bop_341 = soac_v_225[i_wasfree_339, j_318]
                                             * tmp_conc_157[j_318] in
                               let bop_343 = 0.5 * soac_v_226[i_wasfree_339,
                                                              j_318] in
                               let bop_344 = bop_343 * tmp_conc_183[j_318] in
                               let bop_345 = bop_341 + bop_344 in
                               let bop_346 = bop_345
                                             * myResult_196[i_wasfree_339,
                                                            j_318] in
                               let bop_347 = j_318 = 0 in
                               let bop_348 = j_318 - 1 in
                               let tmp_bop_359 =
                                 if bop_347
                                 then 0.0
                                 else let bop_349 = soac_v_225[i_wasfree_339,
                                                               j_318]
                                                    * tmp_conc_155[j_318] in
                                      let bop_350 = bop_343
                                                    * tmp_conc_181[j_318] in
                                      let bop_351 = bop_349 + bop_350 in
                                      let bop_358 = bop_351
                                                    * myResult_196[i_wasfree_339,
                                                                   bop_348] in
                                      bop_358 in
                               let res_365 = tmp_bop_359 + bop_346 in
                               let bop_369 = j_318 = 15 in
                               let bop_374 = j_318 + 1 in
                               let tmp_bop_387 =
                                 if bop_369
                                 then 0.0
                                 else let bop_375 = soac_v_225[i_wasfree_339,
                                                               j_318]
                                                    * tmp_conc_159[j_318] in
                                      let bop_381 = bop_343
                                                    * tmp_conc_185[j_318] in
                                      let bop_383 = bop_375 + bop_381 in
                                      let bop_386 = bop_383
                                                    * myResult_196[i_wasfree_339,
                                                                   bop_374] in
                                      bop_386 in
                               let res_389 = res_365 + tmp_bop_387 in
                               {res_389},
                             j_rep_317, i_291) in
                      let bop_399 = <comb_cert_273>arg_316[0]
                                    * <comb_cert_273>tmp_conc_77[0] in
                      let bop_400 = 0.5 * <comb_cert_273>arg_315[0] in
                      let bop_401 = bop_400 * <comb_cert_273>tmp_conc_103[0] in
                      let bop_417 = bop_399 + bop_401 in
                      let bop_420 = 0.5 * bop_417 in
                      let bop_423 = dtInv_287 - bop_420 in
                      let bet_428 = 1.0 / bop_423 in
                      let {untuple_524} =
                        mapT(fn {real} (int i_429) =>
                               let res_430 = dtInv_287 * myResult_196[i_429,
                                                                      repl_x_290] in
                               let bop_431 = soac_v_223[i_429, repl_x_290]
                                             * tmp_conc_77[i_429] in
                               let bop_455 = 0.5 * soac_v_224[i_429,
                                                              repl_x_290] in
                               let bop_456 = bop_455 * tmp_conc_103[i_429] in
                               let bop_457 = bop_431 + bop_456 in
                               let bop_458 = 0.5 * bop_457 in
                               let bop_464 = bop_458 * myResult_196[i_429,
                                                                    repl_x_290] in
                               let bop_475 = i_429 = 0 in
                               let bop_479 = i_429 - 1 in
                               let tmp_bop_508 =
                                 if bop_475
                                 then 0.0
                                 else let bop_480 = soac_v_223[i_429,
                                                               repl_x_290]
                                                    * tmp_conc_75[i_429] in
                                      let bop_498 = bop_455
                                                    * tmp_conc_101[i_429] in
                                      let bop_499 = bop_480 + bop_498 in
                                      let bop_501 = 0.5 * bop_499 in
                                      let bop_505 = bop_501
                                                    * myResult_196[bop_479,
                                                                   repl_x_290] in
                                      bop_505 in
                               let res_510 = res_430 + tmp_bop_508 in
                               let res_511 = res_510 + bop_464 in
                               let bop_512 = i_429 = 31 in
                               let bop_513 = i_429 + 1 in
                               let tmp_bop_522 =
                                 if bop_512
                                 then 0.0
                                 else let bop_514 = soac_v_223[i_429,
                                                               repl_x_290]
                                                    * tmp_conc_79[i_429] in
                                      let bop_515 = bop_455
                                                    * tmp_conc_105[i_429] in
                                      let bop_518 = bop_514 + bop_515 in
                                      let bop_519 = 0.5 * bop_518 in
                                      let bop_520 = bop_519
                                                    * myResult_196[bop_513,
                                                                   repl_x_290] in
                                      bop_520 in
                               let res_523 = res_511 + tmp_bop_522 in
                               {res_523},
                             iota(32)) in
                      let val_525 = untuple_524[0] + untuple_398[0] in
                      let val_527 = val_525 * bet_428 in
                      let tmp_repl_528 = replicate(32, 0.0) in
                      let tmp_repl_531 = replicate(32, 0.0) in
                      // u_532 aliases tmp_repl_528
                      // uu_533 aliases tmp_repl_531
                      let {u_532, uu_533} = {tmp_repl_528, tmp_repl_531} in
                      let letwith_dst_5 = u_532 with [0] <- val_527 in
                      // u_540 aliases letwith_dst_5
                      // uu_541 aliases uu_533, tmp_repl_531
                      loop ({u_540, uu_541, bet_542} = {letwith_dst_5,
                                                        tmp_repl_531,
                                                        bet_428}) = for j_554 < 31 do
                        let j_556 = j_554 + 1 in
                        let bop_564 = j_556 - 1 in
                        let bop_565 = 0.5 * <comb_cert_273>arg_315[bop_564] in
                        let bop_566 = bop_565
                                      * <comb_cert_273>tmp_conc_105[bop_564] in
                        let bop_570 = <comb_cert_273>arg_316[bop_564]
                                      * <comb_cert_273>tmp_conc_79[bop_564] in
                        let bop_572 = bop_570 + bop_566 in
                        let bop_574 = 0.5 * bop_572 in
                        let negate_575 = -bop_574 in
                        let val_576 = negate_575 * bet_542 in
                        let val_579 = untuple_524[j_556] + untuple_398[j_556] in
                        let bop_580 = 0.5 * <comb_cert_273>arg_315[j_556] in
                        let bop_581 = bop_580
                                      * <comb_cert_273>tmp_conc_101[j_556] in
                        let bop_583 = bop_580
                                      * <comb_cert_273>tmp_conc_103[j_556] in
                        let bop_587 = <comb_cert_273>arg_316[j_556]
                                      * <comb_cert_273>tmp_conc_77[j_556] in
                        let bop_588 = bop_587 + bop_583 in
                        let bop_589 = 0.5 * bop_588 in
                        let bop_590 = dtInv_287 - bop_589 in
                        let bop_591 = <comb_cert_273>arg_316[j_556]
                                      * <comb_cert_273>tmp_conc_75[j_556] in
                        let bop_592 = bop_591 + bop_581 in
                        let bop_593 = 0.5 * bop_592 in
                        let negate_595 = -bop_593 in
                        let bop_597 = negate_595 * u_540[bop_564] in
                        let bop_598 = val_579 - bop_597 in
                        let letwith_dst_11 = uu_541 with [j_556] <- val_576 in
                        let bop_603 = negate_595 * letwith_dst_11[j_556] in
                        let bop_605 = bop_590 - bop_603 in
                        let bet_606 = 1.0 / bop_605 in
                        let val_607 = bop_598 * bet_606 in
                        let letwith_dst_16 = u_540 with [j_556] <- val_607 in
                        {letwith_dst_16, letwith_dst_11, bet_606} in
                      // u_544 aliases u_540
                      loop (u_544 = u_540) = for j_545 < 31 do
                        let j_546 = 30 - j_545 in
                        let bop_548 = j_546 + 1 in
                        let bop_549 = uu_541[bop_548] * u_544[bop_548] in
                        let val_551 = u_544[j_546] - bop_549 in
                        let letwith_dst_205 = u_544 with [j_546] <- val_551 in
                        letwith_dst_205 in
                      {u_544},
                    iota(16), transpose(transpose(tmp_repl_288)),
                    transpose(soac_v_224), transpose(soac_v_223),
                    transpose(tmp_repl_289)) in
             let tmp_size_614 = size(1, untuple_612) in
             let tmp_e_616 = tmp_size_614 = 32 in
             let zip_assert_618 = assert(tmp_e_616) in
             let tmp_size_619 = <zip_assert_618>size(1, soac_v_225) in
             let tmp_e_621 = 16 = tmp_size_619 in
             let zip_assert_622 = assert(tmp_e_621) in
             let tmp_size_623 = <zip_assert_618>size(1, soac_v_226) in
             let tmp_e_626 = tmp_size_619 = tmp_size_623 in
             let zip_assert_627 = assert(tmp_e_626) in
             let comb_cert_628 = conjoin(zip_assert_123, zip_assert_134,
                                         zip_assert_136, zip_assert_618,
                                         zip_assert_622, zip_assert_627) in
             let {untuple_850} =
               <zip_assert_618>
               mapT(fn {*[real]} (int i_629, [real] arg_632, [real] arg_633,
                                  [real] arg_634) =>
                      let {untuple_664} =
                        mapT(fn {real} (int j_636) =>
                               let bop_637 = soac_v_225[i_629, j_636]
                                             * tmp_conc_157[j_636] in
                               let bop_639 = 0.5 * soac_v_226[i_629, j_636] in
                               let bop_640 = bop_639 * tmp_conc_183[j_636] in
                               let bop_641 = bop_637 + bop_640 in
                               let bop_644 = bop_641 * myResult_196[i_629,
                                                                    j_636] in
                               let bop_645 = j_636 = 0 in
                               let bop_646 = j_636 - 1 in
                               let tmp_bop_651 =
                                 if bop_645
                                 then 0.0
                                 else let bop_647 = soac_v_225[i_629, j_636]
                                                    * tmp_conc_155[j_636] in
                                      let bop_648 = bop_639
                                                    * tmp_conc_181[j_636] in
                                      let bop_649 = bop_647 + bop_648 in
                                      let bop_650 = bop_649
                                                    * myResult_196[i_629,
                                                                   bop_646] in
                                      bop_650 in
                               let res_653 = tmp_bop_651 + bop_644 in
                               let bop_654 = j_636 = 15 in
                               let bop_655 = j_636 + 1 in
                               let tmp_bop_662 =
                                 if bop_654
                                 then 0.0
                                 else let bop_657 = soac_v_225[i_629, j_636]
                                                    * tmp_conc_159[j_636] in
                                      let bop_658 = bop_639
                                                    * tmp_conc_185[j_636] in
                                      let bop_659 = bop_657 + bop_658 in
                                      let bop_660 = bop_659
                                                    * myResult_196[i_629,
                                                                   bop_655] in
                                      bop_660 in
                               let res_663 = res_653 + tmp_bop_662 in
                               {res_663},
                             iota(16)) in
                      let bop_665 = 0.5 * untuple_664[0] in
                      let bop_666 = dtInv_287 * arg_633[0] in
                      let val_668 = bop_666 - bop_665 in
                      let bop_669 = <comb_cert_628>arg_634[0]
                                    * <comb_cert_628>tmp_conc_157[0] in
                      let bop_670 = 0.5 * <comb_cert_628>arg_632[0] in
                      let bop_671 = bop_670 * <comb_cert_628>tmp_conc_183[0] in
                      let bop_673 = bop_669 + bop_671 in
                      let bop_674 = 0.5 * bop_673 in
                      let bop_675 = dtInv_287 - bop_674 in
                      let bet_676 = 1.0 / bop_675 in
                      let val_682 = val_668 * bet_676 in
                      let tmp_repl_683 = replicate(16, 0.0) in
                      let tmp_repl_684 = replicate(16, 0.0) in
                      // u_709 aliases tmp_repl_683
                      // uu_710 aliases tmp_repl_684
                      let {u_709, uu_710} = {tmp_repl_683, tmp_repl_684} in
                      let letwith_dst_206 = u_709 with [0] <- val_682 in
                      // u_735 aliases letwith_dst_206
                      // uu_740 aliases tmp_repl_684, uu_710
                      loop ({u_735, uu_740, bet_752} = {letwith_dst_206,
                                                        tmp_repl_684,
                                                        bet_676}) = for j_816 < 15 do
                        let j_818 = j_816 + 1 in
                        let bop_819 = j_818 - 1 in
                        let bop_820 = 0.5 * <comb_cert_628>arg_632[bop_819] in
                        let bop_821 = bop_820
                                      * <comb_cert_628>tmp_conc_185[bop_819] in
                        let bop_822 = <comb_cert_628>arg_634[bop_819]
                                      * <comb_cert_628>tmp_conc_159[bop_819] in
                        let bop_823 = bop_822 + bop_821 in
                        let bop_824 = 0.5 * bop_823 in
                        let negate_825 = -bop_824 in
                        let val_826 = negate_825 * bet_752 in
                        let bop_827 = dtInv_287 * arg_633[j_818] in
                        let bop_828 = 0.5 * untuple_664[j_818] in
                        let val_829 = bop_827 - bop_828 in
                        let bop_830 = 0.5 * <comb_cert_628>arg_632[j_818] in
                        let bop_831 = bop_830
                                      * <comb_cert_628>tmp_conc_181[j_818] in
                        let bop_832 = bop_830
                                      * <comb_cert_628>tmp_conc_183[j_818] in
                        let bop_833 = <comb_cert_628>arg_634[j_818]
                                      * <comb_cert_628>tmp_conc_157[j_818] in
                        let bop_834 = bop_833 + bop_832 in
                        let bop_835 = 0.5 * bop_834 in
                        let bop_836 = dtInv_287 - bop_835 in
                        let bop_837 = <comb_cert_628>arg_634[j_818]
                                      * <comb_cert_628>tmp_conc_155[j_818] in
                        let bop_838 = bop_837 + bop_831 in
                        let bop_839 = 0.5 * bop_838 in
                        let negate_840 = -bop_839 in
                        let bop_841 = negate_840 * u_735[bop_819] in
                        let bop_842 = val_829 - bop_841 in
                        let letwith_dst_214 = uu_740 with [j_818] <- val_826 in
                        let bop_845 = negate_840 * letwith_dst_214[j_818] in
                        let bop_846 = bop_836 - bop_845 in
                        let bet_847 = 1.0 / bop_846 in
                        let val_848 = bop_842 * bet_847 in
                        let letwith_dst_218 = u_735 with [j_818] <- val_848 in
                        {letwith_dst_218, letwith_dst_214, bet_847} in
                      // u_771 aliases u_735
                      loop (u_771 = u_735) = for j_773 < 15 do
                        let j_781 = 14 - j_773 in
                        let bop_784 = j_781 + 1 in
                        let bop_808 = uu_740[bop_784] * u_771[bop_784] in
                        let val_812 = u_771[j_781] - bop_808 in
                        let letwith_dst_221 = u_771 with [j_781] <- val_812 in
                        letwith_dst_221 in
                      {u_771},
                    iota(32), soac_v_226, transpose(untuple_612), soac_v_225) in
             {untuple_850, soac_v_223, soac_v_224, soac_v_225, soac_v_226} in
           {myResult_196[3, 8]},
         iota(8)) in
  untuple_851
