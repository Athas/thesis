fun real main() =
  let {num_mc_it_0, num_dates_1, num_und_2, num_bits_3, dir_vs_4} =
    {1000,
     5,
     3,
     30,
     [[536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608,
       4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384,
       8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],
      [536870912, 805306368, 671088640, 1006632960, 570425344, 855638016,
       713031680, 1069547520, 538968064, 808452096, 673710080, 1010565120,
       572653568, 858980352, 715816960, 1073725440, 536879104, 805318656,
       671098880, 1006648320, 570434048, 855651072, 713042560, 1069563840,
       538976288, 808464432, 673720360, 1010580540, 572662306, 858993459],
      [536870912, 805306368, 402653184, 603979776, 973078528, 385875968,
       595591168, 826277888, 438304768, 657457152, 999817216, 358875136,
       538574848, 807862272, 406552576, 605372416, 975183872, 389033984,
       597170176, 828646400, 437926400, 656873216, 1002152832, 357921088,
       536885792, 805312304, 402662296, 603992420, 973085210, 385885991],
      [536870912, 805306368, 939524096, 335544320, 234881024, 721420288,
       411041792, 616562688, 920649728, 1062207488, 381157376, 258736128,
       771883008, 453181440, 545488896, 817971200, 954261504, 340963328,
       238651392, 732843008, 417426944, 609285376, 909831040, 1068349120,
       383778848, 256901168, 783810616, 460062740, 537001998, 805503019],
      [536870912, 805306368, 402653184, 1006632960, 167772160, 285212672,
       713031680, 566231040, 853540864, 489684992, 952631296, 208928768,
       316801024, 758317056, 550076416, 813154304, 417505280, 1009913856,
       172697600, 297131008, 704744960, 553894656, 847291520, 499194688,
       954376224, 204607536, 306915352, 766893116, 536972810, 805552913],
      [536870912, 805306368, 402653184, 469762048, 301989888, 721420288,
       92274688, 264241152, 941621248, 741343232, 169345024, 924581888,
       395444224, 619380736, 1034256384, 603963392, 838868992, 452997120,
       494934016, 331357184, 706744832, 120597248, 261621120, 953946048,
       800208928, 148581424, 935168536, 350484252, 630339474, 1072370923],
      [536870912, 805306368, 134217728, 1006632960, 503316480, 754974720,
       629145600, 440401920, 94371840, 711983104, 229113856, 374079488,
       330694656, 996212736, 907247616, 557531136, 867573760, 190918656,
       1041467392, 490437632, 766918144, 643898624, 462663040, 125527616,
       672545696, 202454896, 373006376, 288845836, 1000351766, 930090001],
      [536870912, 268435456, 402653184, 872415232, 838860800, 956301312,
       612368384, 717225984, 211812352, 386924544, 302514176, 688128000,
       1015414784, 516751360, 1051492352, 773734400, 914432000, 63877120,
       807741440, 165200896, 748683776, 118489344, 168296832, 486802240,
       243663648, 667747216, 439124552, 81674924, 975249610, 350138737],
      [536870912, 268435456, 671088640, 469762048, 973078528, 1023410176,
       713031680, 339738624, 912261120, 797966336, 176685056, 71565312,
       510263296, 865533952, 814120960, 961232896, 887136256, 668078080,
       116070400, 382772224, 1047134720, 597098752, 411468416, 625689024,
       249602976, 449975248, 745216680, 43033924, 134873446, 201786361],
      [536870912, 268435456, 402653184, 67108864, 704643072, 385875968,
       696254464, 205520896, 920649728, 946864128, 359137280, 859045888,
       302907392, 50659328, 462192640, 524599296, 895541248, 590794752,
       168810496, 118033408, 831447552, 138662144, 485185920, 796511296,
       1021313184, 1064304752, 619184920, 997458052, 250479054, 745865975],
      [536870912, 268435456, 939524096, 1006632960, 838860800, 889192448,
       645922816, 46137344, 476053504, 584056832, 210239488, 465829888,
       820903936, 689897472, 73695232, 249118720, 110075904, 315338752,
       610637824, 517665792, 1049494016, 785318144, 376210304, 735921088,
       402760480, 738505552, 168368744, 151499820, 344957894, 936096557],
      [536870912, 805306368, 939524096, 1006632960, 503316480, 922746880,
       41943040, 423624704, 228589568, 651165696, 195559424, 500957184,
       791019520, 261292032, 1040285696, 118407168, 982065152, 625250304,
       329533440, 298984448, 153690624, 76845824, 579619712, 692987840,
       900670432, 450334832, 363187112, 719119956, 765461306, 382730781],
      [536870912, 805306368, 402653184, 603979776, 838860800, 117440512,
       478150656, 658505728, 752877568, 1060110336, 141033472, 209453056,
       244187136, 272957440, 678068224, 1014546432, 377724928, 876875776,
       443160576, 998185984, 168665600, 318837504, 914397568, 71818816,
       40763680, 527762288, 939688008, 335855668, 705536494, 587273091],
      [536870912, 268435456, 671088640, 738197504, 637534208, 150994944,
       813694976, 943718400, 77594624, 179306496, 798490624, 967049216,
       134348800, 1006698496, 235044864, 620937216, 377643008, 826314752,
       874711040, 854819840, 725109248, 856992512, 664336768, 94804544,
       100663328, 419430416, 411041832, 339738668, 580911142, 61865993],
      [536870912, 805306368, 939524096, 603979776, 100663296, 452984832,
       998244352, 188743680, 866123776, 389021696, 287834112, 172228608,
       824836096, 977731584, 153714688, 507854848, 254402560, 88403968,
       883578880, 235160576, 118055424, 422917888, 371224704, 326210368,
       654926368, 691353392, 773877944, 930190180, 554263078, 842348331]]} in
  let val_8 = [-0.0283491736871803, 0.0178771081725381, 0.0043096808044729] in
  let val_9 = [-0.0183841413744211, -0.0044530897672834, 0.0024263805987983] in
  let val_10 = [-0.0172686581005089, 0.0125638544546015, 0.0094452810918001] in
  let val_11 = [-0.0144179417871814, 0.0157411263968213, 0.0125315353728014] in
  let val_15 = [-0.0121497422218761, 0.0182904634062437, 0.0151125070556484] in
  // tmp_lit_16 aliases val_8, val_9, val_10, val_11, val_15
  let tmp_lit_16 = [val_8,
                    val_9,
                    val_10,
                    val_11,
                    val_15] in
  // md_drifts_19 aliases val_8, tmp_lit_16, val_9, val_10, val_11, val_15
  let {md_c_17, md_vols_18, md_drifts_19, md_st_20, md_dv_24, md_disc_25} =
    {[[1.0, 0.6, 0.8],
      [0.6, 0.8, 0.15],
      [0.8, 0.15, 0.5809475019311124]],
     [[0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15],
      [0.19, 0.19, 0.15]],
     tmp_lit_16,
     [3758.05, 11840.0, 1200.0],
     [0.9997670577741848],
     [0.979786286180593, 0.9505748482484491, 0.9214621679912968,
      0.8906693055891434, 0.8588567633110704]} in
  let {bb_inds_29, bb_data_30} =
    {[[5, 2, 1, 3, 4],
      [0, 0, 0, 2, 3],
      [0, 5, 2, 5, 5]],
     [[2.237292884728058, 1.096095158985383, 0.7075902730592357,
       0.816682804349221, 0.7075902730592357],
      [0.0, 0.5998905309250137, 0.4993160054719562, 0.666970802919708,
       0.5006839945280438],
      [0.0, 0.4001094690749863, 0.5006839945280438, 0.3330291970802919,
       0.4993160054719562]]} in
  let {untuple_40} =
    mapT(fn {int} (int x_37) =>
           let val_39 = x_37 + 1 in
           {val_39},
         iota(1000)) in
  // untuple_68 aliases untuple_40
  let {untuple_68} =
    mapT(fn {[real]} (int param_0_41) =>
           let {untuple_60} =
             mapT(fn {int} ([int] param_0_42) =>
                    let {untuple_53} =
                      filterT(fn {bool} (int param_0_46) =>
                                let val_50 = param_0_41 >> 1 ^ param_0_41 in
                                let t_51 = 1 << param_0_46 in
                                let val_52 = (val_50 & t_51) = t_51 in
                                {val_52},
                              iota(30)) in
                    let {untuple_55} =
                      mapT(fn {int} (int param_0_54) =>
                             {param_0_42[param_0_54]},
                           untuple_53) in
                    let {untuple_59} =
                      reduceT(fn {int} (int x_56, int y_57) =>
                                let val_58 = x_56 ^ y_57 in
                                {val_58},
                              {0}, untuple_55) in
                    {untuple_59},
                  dir_vs_4) in
           let {untuple_64} =
             mapT(fn {real} (int x_61) =>
                    let tmp_call_62 = toReal(x_61) in
                    let val_63 = tmp_call_62 / 1073741824.0 in
                    {val_63},
                  untuple_60) in
           {untuple_64},
         untuple_40) in
  // untuple_85 aliases untuple_68, untuple_40
  let {untuple_85} =
    mapT(fn {[real]} ([real] param_0_69) =>
           let {untuple_84} =
             mapT(fn {real} (real param_0_71) =>
                    let dp_72 = param_0_71 - 0.5 in
                    let val_83 =
                      if dp_72 < 0.0 && 0.0 - dp_72 <= 0.425 || 0.0 <= dp_72
                      && dp_72 <= 0.425
                      then let val_73 = 0.180625 - (dp_72 * dp_72) in
                           let tmp_bop_74 = (val_73 * (val_73 * (val_73
                                                                 * (val_73
                                                                    * (val_73
                                                                       * (val_73
                                                                          * (val_73
                                                                             * 2509.0809287301227
                                                                             + 33430.57558358813)
                                                                          + 67265.7709270087)
                                                                       + 45921.95393154987)
                                                                    + 13731.69376550946)
                                                                 + 1971.5909503065513)
                                                       + 133.14166789178438)
                                             + 3.3871328727963665) / (val_73
                                                                      * (val_73
                                                                         * (val_73
                                                                            * (val_73
                                                                               * (val_73
                                                                                  * (val_73
                                                                                     * (val_73
                                                                                        * 5226.495278852854
                                                                                        + 28729.085735721943)
                                                                                     + 39307.89580009271)
                                                                                  + 21213.794301586597)
                                                                               + 5394.196021424751)
                                                                            + 687.1870074920579)
                                                                         + 42.31333070160091)
                                                                      + 1.0) in
                           dp_72 * tmp_bop_74
                      else let pp_75 =
                             if dp_72 < 0.0
                             then dp_72 + 0.5
                             else 0.5 - dp_72 in
                           let tmp_call_76 = log(pp_75) in
                           let val_77 = -tmp_call_76 in
                           let tmp_call_78 = sqrt(val_77) in
                           let x_82 =
                             if tmp_call_78 <= 5.0
                             then let val_79 = tmp_call_78 - 1.6 in
                                  (val_79 * (val_79 * (val_79 * (val_79
                                                                 * (val_79
                                                                    * (val_79
                                                                       * (val_79
                                                                          * 0.0007745450142783414
                                                                          + 0.022723844989269184)
                                                                       + 0.2417807251774506)
                                                                    + 1.2704582524523684)
                                                                 + 3.6478483247632045)
                                                       + 5.769497221460691)
                                             + 4.630337846156546)
                                   + 1.4234371107496835) / (val_79 * (val_79
                                                                      * (val_79
                                                                         * (val_79
                                                                            * (val_79
                                                                               * (val_79
                                                                                  * (val_79
                                                                                     * 0.0000000010507500716444169
                                                                                     + 0.0005475938084995345)
                                                                                  + 0.015198666563616457)
                                                                               + 0.14810397642748008)
                                                                            + 0.6897673349851)
                                                                         + 1.6763848301838038)
                                                                      + 2.053191626637759)
                                                            + 1.0)
                             else let val_80 = tmp_call_78 - 5.0 in
                                  (val_80 * (val_80 * (val_80 * (val_80
                                                                 * (val_80
                                                                    * (val_80
                                                                       * (val_80
                                                                          * 0.00000020103343992922881
                                                                          + 0.000027115555687434876)
                                                                       + 0.0012426609473880784)
                                                                    + 0.026532189526576124)
                                                                 + 0.29656057182850487)
                                                       + 1.7848265399172913)
                                             + 5.463784911164114)
                                   + 6.657904643501103) / (val_80 * (val_80
                                                                     * (val_80
                                                                        * (val_80
                                                                           * (val_80
                                                                              * (val_80
                                                                                 * (val_80
                                                                                    * 0.000020442631033899398
                                                                                    + 0.0000001421511758316446)
                                                                                 + 0.000018463183175100548)
                                                                              + 0.0007868691311456133)
                                                                           + 0.014875361290850615)
                                                                        + 0.1369298809227358)
                                                                     + 0.599832206555888)
                                                           + 1.0) in
                           if dp_72 < 0.0
                           then 0.0 - x_82
                           else x_82 in
                    {val_83},
                  param_0_69) in
           {untuple_84},
         untuple_68) in
  // untuple_106 aliases untuple_68, untuple_40, untuple_85
  let {untuple_106} =
    mapT(fn {[[real]]} ([real] param_0_86) =>
           // untuple_105 aliases param_0_86
           let {untuple_105} =
             mapT(fn {[real]} ([real] param_0_87) =>
                    let bbrow_88 = replicate(5, 0.0) in
                    let val_89 = 2.237292884728058 * param_0_87[0] in
                    let letwith_dst_13 = bbrow_88 with [4] <- val_89 in
                    // bbrow_91 aliases letwith_dst_13
                    loop (bbrow_91 = letwith_dst_13) = for i_98 < 4 do
                      let j_99 = bb_inds_29[1, i_98 + 1] - 1 in
                      let k_100 = bb_inds_29[2, i_98 + 1] - 1 in
                      let l_101 = bb_inds_29[0, i_98 + 1] - 1 in
                      let tmp_102 = bb_data_30[2, i_98 + 1] * bbrow_91[k_100]
                                    + bb_data_30[0, i_98 + 1] * param_0_87[i_98
                                                                           + 1] in
                      let val_103 =
                        if j_99 + 1 = 0
                        then tmp_102
                        else tmp_102 + bb_data_30[1, i_98 + 1]
                             * bbrow_91[j_99] in
                      let letwith_dst_14 = bbrow_91 with [l_101] <- val_103 in
                      letwith_dst_14 in
                    // bbrow_92 aliases bbrow_91
                    loop (bbrow_92 = bbrow_91) = for ii_93 < 4 do
                      let i_94 = 5 - (ii_93 + 1) in
                      let val_95 = bbrow_92[i_94] - bbrow_92[i_94 - 1] in
                      let letwith_dst_21 = bbrow_92 with [i_94] <- val_95 in
                      letwith_dst_21 in
                    {bbrow_92},
                  transpose(reshape((5, 3), param_0_86))) in
           {transpose(untuple_105)},
         untuple_85) in
  // untuple_183 aliases untuple_68, untuple_40, untuple_85, untuple_106
  let {untuple_183} =
    mapT(fn {[[real]]} ([[real]] param_0_107) =>
           // untuple_139 aliases param_0_107
           let {untuple_139} =
             mapT(fn {[real]} ([real] param_0_108) =>
                    let {untuple_138} =
                      mapT(fn {real} (int j_109) =>
                             let val_111 = j_109 + 1 in
                             let {first_112, rest_114} = split(val_111,
                                                               param_0_108) in
                             let val_115 = j_109 + 1 in
                             let {first_116, rest_117} = split(val_115,
                                                               md_c_17[j_109]) in
                             let tmp_size_118 = size(0, first_112) in
                             let tmp_size_119 = size(0, first_116) in
                             let tmp_e_120 = tmp_size_118 = tmp_size_119 in
                             let zip_assert_121 = assert(tmp_e_120) in
                             let tmp_size_123 = size(0, first_116) in
                             let tmp_size_124 = j_109 + 1 in
                             let tmp_e_125 = tmp_size_123 = tmp_size_124 in
                             let zip_assert_126 = assert(tmp_e_125) in
                             let comb_cert_127 = conjoin(zip_assert_121,
                                                         zip_assert_126) in
                             let {untuple_133} =
                               <comb_cert_127>
                               mapT(fn {real} (real arg_128, real arg_130,
                                               int arg_131) =>
                                      let val_132 = arg_128 * arg_130 in
                                      {val_132},
                                    first_112, first_116, iota(j_109 + 1)) in
                             let {untuple_137} =
                               reduceT(fn {real} (real x_134, real y_135) =>
                                         let val_136 = x_134 + y_135 in
                                         {val_136},
                                       {0.0}, untuple_133) in
                             {untuple_137},
                           iota(3)) in
                    {untuple_138},
                  param_0_107) in
           let tmp_size_140 = size(0, untuple_139) in
           let tmp_e_141 = tmp_size_140 = 5 in
           let zip_assert_142 = assert(tmp_e_141) in
           let tmp_size_143 = size(0, tmp_lit_16) in
           let tmp_e_144 = 5 = tmp_size_143 in
           let zip_assert_145 = assert(tmp_e_144) in
           let comb_cert_146 = conjoin(zip_assert_142, zip_assert_145) in
           // untuple_166 aliases val_8, tmp_lit_16, val_9, val_10, md_vols_18, val_11, untuple_139, md_drifts_19, param_0_107, val_15
           let {untuple_166} =
             <comb_cert_146>
             mapT(fn {[real]} ([real] arg_147, [real] arg_148,
                               [real] arg_149) =>
                    let tmp_size_150 = size(0, arg_147) in
                    let tmp_size_151 = size(0, arg_148) in
                    let tmp_e_152 = tmp_size_150 = tmp_size_151 in
                    let zip_assert_153 = assert(tmp_e_152) in
                    let {untuple_157} =
                      <zip_assert_153>
                      mapT(fn {real} (real arg_154, real arg_155) =>
                             let val_156 = arg_154 * arg_155 in
                             {val_156},
                           arg_147, arg_148) in
                    let tmp_size_158 = size(0, arg_149) in
                    let tmp_size_159 = size(0, untuple_157) in
                    let tmp_e_160 = tmp_size_158 = tmp_size_159 in
                    let zip_assert_161 = assert(tmp_e_160) in
                    let {untuple_165} =
                      <zip_assert_161>
                      mapT(fn {real} (real arg_162, real arg_163) =>
                             let val_164 = arg_162 + arg_163 in
                             {val_164},
                           arg_149, untuple_157) in
                    {untuple_165},
                  untuple_139, md_vols_18, tmp_lit_16) in
           // untuple_171 aliases val_8, tmp_lit_16, val_9, untuple_166, val_10, md_vols_18, val_11, untuple_139, md_drifts_19, param_0_107, val_15
           let {untuple_171} =
             mapT(fn {[real]} ([real] x_167) =>
                    let {untuple_170} =
                      mapT(fn {real} (real param_0_168) =>
                             let val_169 = exp(param_0_168) in
                             {val_169},
                           x_167) in
                    {untuple_170},
                  untuple_166) in
           // untuple_182 aliases val_8, tmp_lit_16, val_9, untuple_166, val_10, md_vols_18, val_11, untuple_139, md_drifts_19, param_0_107, untuple_171, val_15
           let {untuple_182} =
             scanT(fn {[real]} ([real] x_172, [real] y_173) =>
                     let tmp_size_174 = size(0, x_172) in
                     let tmp_size_175 = size(0, y_173) in
                     let tmp_e_176 = tmp_size_174 = tmp_size_175 in
                     let zip_assert_177 = assert(tmp_e_176) in
                     let {untuple_181} =
                       <zip_assert_177>
                       mapT(fn {real} (real arg_178, real arg_179) =>
                              let val_180 = arg_178 * arg_179 in
                              {val_180},
                            x_172, y_173) in
                     {untuple_181},
                   {md_st_20}, untuple_171) in
           {untuple_182},
         untuple_106) in
  let {untuple_204} =
    mapT(fn {real} ([[real]] param_0_184) =>
           let divs_185 = [0.00026609544843735446, 0.00008445945945945946,
                           0.0008333333333333334] in
           // untuple_195 aliases param_0_184
           let {untuple_195} =
             mapT(fn {[real]} ([real] xs_186) =>
                    let tmp_size_187 = size(0, xs_186) in
                    let tmp_e_189 = tmp_size_187 = 3 in
                    let zip_assert_190 = assert(tmp_e_189) in
                    let {untuple_194} =
                      <zip_assert_190>
                      mapT(fn {real} (real arg_191, real arg_192) =>
                             let val_193 = arg_191 * arg_192 in
                             {val_193},
                           xs_186, divs_185) in
                    {untuple_194},
                  param_0_184) in
           let {untuple_201} =
             mapT(fn {real} ([real] param_0_196) =>
                    let {untuple_200} =
                      reduceT(fn {real} (real x_197, real y_198) =>
                                let val_199 =
                                  if x_197 < y_198
                                  then x_197
                                  else y_198 in
                                {val_199},
                              {param_0_196[0]}, param_0_196) in
                    {untuple_200},
                  untuple_195) in
           let val_203 =
             if 1.0 <= untuple_201[0]
             then 1126.754229107682
             else if 1.0 <= untuple_201[1]
                  then 1235.7473027229837
                  else if 1.0 <= untuple_201[2]
                       then 1336.1201435873802
                       else if 1.0 <= untuple_201[3]
                            then 1425.0708889426294
                            else if 1.0 <= untuple_201[4]
                                 then 1502.9993357943733
                                 else if 0.75 < untuple_201[4]
                                      then 858.8567633110704
                                      else let val_202 = 1000.0
                                                         * untuple_201[4] in
                                           val_202 * 0.8588567633110704 in
           {val_203},
         untuple_183) in
  let {untuple_208} =
    reduceT(fn {real} (real x_205, real y_206) =>
              let val_207 = x_205 + y_206 in
              {val_207},
            {0.0}, untuple_204) in
  untuple_208 / 1000.0
