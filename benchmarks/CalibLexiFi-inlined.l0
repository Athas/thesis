fun real main() =
  let {zip_cert_tmp_arr_1, tmp_arr_2, tmp_arr_5, tmp_arr_9, tmp_arr_12} =
    {Checked,
     [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0,
      30.0],
     [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0,
      2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0,
      3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0,
      5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0,
      7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0,
      8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
      9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
      10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 15.0, 15.0, 15.0, 15.0, 15.0,
      15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 20.0, 20.0, 20.0,
      20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 25.0,
      25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,
      25.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0,
      30.0, 30.0, 30.0],
     [1.052, 0.81485, 0.6165, 0.46995, 0.38295, 0.3325, 0.3016, 0.2815, 0.26435,
      0.2496, 0.2516, 0.28835, 0.27155, 0.23465, 0.61445, 0.54805, 0.46795,
      0.3919, 0.3434, 0.3083, 0.28655, 0.2697, 0.25775, 0.2443, 0.26495,
      0.28195, 0.26845, 0.20995, 0.5835, 0.49255, 0.42825, 0.3695, 0.329,
      0.3022, 0.28165, 0.26615, 0.25485, 0.24375, 0.2718, 0.28135, 0.26865,
      0.2131, 0.5415, 0.46235, 0.403, 0.3559, 0.3232, 0.29675, 0.27715, 0.26385,
      0.254, 0.2454, 0.27845, 0.2821, 0.2678, 0.2131, 0.517, 0.446, 0.3903,
      0.34755, 0.3166, 0.29305, 0.2745, 0.2639, 0.2534, 0.2499, 0.28315, 0.2825,
      0.277, 0.21175, 0.478, 0.42105, 0.37715, 0.3378, 0.311, 0.2895, 0.2745,
      0.264, 0.2573, 0.25475, 0.28815, 0.28195, 0.26015, 0.2097, 0.452, 0.4074,
      0.368, 0.3307, 0.30645, 0.2877, 0.27475, 0.2664, 0.26155, 0.26035, 0.292,
      0.2825, 0.25685, 0.2081, 0.43395, 0.39445, 0.35885, 0.3281, 0.30395,
      0.28745, 0.2767, 0.27065, 0.26625, 0.26625, 0.2921, 0.2814, 0.25265,
      0.2083, 0.42285, 0.3857, 0.3521, 0.3239, 0.30285, 0.2895, 0.2799, 0.27485,
      0.2712, 0.27205, 0.29205, 0.27855, 0.24945, 0.219, 0.41765, 0.38095,
      0.34795, 0.3217, 0.30365, 0.2916, 0.2842, 0.27985, 0.2769, 0.2775, 0.306,
      0.2763, 0.2458, 0.22, 0.37905, 0.35465, 0.33505, 0.31725, 0.3008, 0.29075,
      0.28365, 0.2787, 0.27385, 0.2709, 0.2689, 0.24225, 0.2096, 0.18285,
      0.37975, 0.3605, 0.3407, 0.321, 0.3063, 0.29315, 0.28395, 0.2777, 0.27205,
      0.26675, 0.24875, 0.21735, 0.1939, 0.17205, 0.38115, 0.3627, 0.34425,
      0.3222, 0.3084, 0.2941, 0.28285, 0.2751, 0.2663, 0.26055, 0.2338, 0.20735,
      0.1823, 0.1686, 0.38285, 0.3633, 0.34125, 0.3188, 0.30305, 0.2888, 0.2748,
      0.26725, 0.25985, 0.25165, 0.2267, 0.1989, 0.18115, 0.16355]} in
  let {untuple_1801} =
    mapT(fn {real} (real arg_14, real arg_17, real arg_22, real arg_23) =>
           let rnbmonths_25 = arg_14 * 12.0 in
           let nbmonths_28 = trunc(rnbmonths_25) in
           let m_32 = 1 + nbmonths_28 in
           let x_34 = m_32 - 1 in
           let tmp_bop_48 = x_34 - (x_34 / 12 * 12) in
           let {y_51, m_52} = {2012 + (m_32 - 1) / 12, tmp_bop_48 + 1} in
           let {y_54, m_55} = if m_52 <= 0
                              then {y_51 - 1, m_52 + 12}
                              else {y_51, m_52} in
           let tmp_bop_64 = y_54 - (y_54 / 4 * 4) in
           let tmp_bop_69 = y_54 - (y_54 / 100 * 100) in
           let tmp_bop_75 = y_54 - (y_54 / 400 * 400) in
           let tmp_and_81 = tmp_bop_64 = 0 && not (tmp_bop_69 = 0) || tmp_bop_75 = 0 in
           let b_83 = if m_55 = 2 && tmp_and_81
                      then 29
                      else if m_55 = 2
                           then 28
                           else if m_55 = 4 || m_55 = 6 || m_55 = 9 || m_55 = 11
                                then 30
                                else 31 in
           let tmp_lit_84 = if 1 < b_83
                            then 1
                            else b_83 in
           let ym_85 = if m_55 = 1 || m_55 = 2
                       then 1461 * (y_54 + 4800 - 1) / 4 + 367 * (m_55 + 10) / 12 - (3 * (y_54 + 4900 - 1) / 100 / 4)
                       else 1461 * (y_54 + 4800) / 4 + 367 * (m_55 - 2) / 12 - (3 * (y_54 + 4900) / 100 / 4) in
           let tmp_86 = ym_85 + tmp_lit_84 - 32075 - 2444238 in
           let resmin_87 = tmp_86 * 1440 + 720 in
           let tmp_call_88 = toReal(resmin_87) in
           let val_89 = 12.0 * arg_22 / arg_17 in
           let tmp_call_90 = trunc(val_89) in
           let {soac_v_286, soac_v_288} =
             mapT(fn {real, real} (int i_91) =>
                    let tmp_call_92 = toReal(i_91) in
                    let rnbmonths_93 = tmp_call_92 * arg_17 in
                    let nbmonths_94 = trunc(rnbmonths_93) in
                    let minutes_since_epoch_101 = trunc(tmp_call_88) in
                    let jul_108 = minutes_since_epoch_101 / 1440 in
                    let l_109 = jul_108 + 68569 + 2444238 in
                    let n_110 = 4 * l_109 / 146097 in
                    let l_111 = l_109 - ((146097 * n_110 + 3) / 4) in
                    let i_114 = 4000 * (l_111 + 1) / 1461001 in
                    let l_117 = l_111 - (1461 * i_114 / 4) + 31 in
                    let j_119 = 80 * l_117 / 2447 in
                    let d_122 = l_117 - (2447 * j_119 / 80) in
                    let l_123 = j_119 / 11 in
                    let m_124 = j_119 + 2 - (12 * l_123) in
                    let y_126 = 100 * (n_110 - 49) + i_114 + l_123 in
                    let daytime_127 = minutes_since_epoch_101 - (minutes_since_epoch_101 / 1440 * 1440) in
                    let {y_138, m_139, d_146, h_151,
                         min_152} = if daytime_127 = 720
                                    then {y_126, m_124, d_122, 12, 0}
                                    else let tmp_lit_132 = daytime_127 - (daytime_127 / 60 * 60) in
                                         {y_126, m_124, d_122, daytime_127 / 60,
                                          tmp_lit_132} in
                    let m_153 = m_139 + nbmonths_94 in
                    let x_155 = m_153 - 1 in
                    let tmp_bop_156 = x_155 - (x_155 / 12 * 12) in
                    let {y_160, m_161} = {y_138 + (m_153 - 1) / 12,
                                          tmp_bop_156 + 1} in
                    let {y_162, m_164} = if m_161 <= 0
                                         then {y_160 - 1, m_161 + 12}
                                         else {y_160, m_161} in
                    let tmp_bop_168 = y_162 - (y_162 / 4 * 4) in
                    let tmp_bop_169 = y_162 - (y_162 / 100 * 100) in
                    let tmp_bop_173 = y_162 - (y_162 / 400 * 400) in
                    let tmp_and_174 = tmp_bop_168 = 0 && not (tmp_bop_169 = 0) || tmp_bop_173 = 0 in
                    let b_181 = if m_164 = 2 && tmp_and_174
                                then 29
                                else if m_164 = 2
                                     then 28
                                     else if m_164 = 4 || m_164 = 6 || m_164 = 9 || m_164 = 11
                                          then 30
                                          else 31 in
                    let tmp_lit_186 = if d_146 < b_181
                                      then d_146
                                      else b_181 in
                    let ym_187 = if m_164 = 1 || m_164 = 2
                                 then 1461 * (y_162 + 4800 - 1) / 4 + 367 * (m_164 + 10) / 12 - (3 * (y_162 + 4900 - 1) / 100 / 4)
                                 else 1461 * (y_162 + 4800) / 4 + 367 * (m_164 - 2) / 12 - (3 * (y_162 + 4900) / 100 / 4) in
                    let tmp_190 = ym_187 + tmp_lit_186 - 32075 - 2444238 in
                    let resmin_191 = tmp_190 * 1440 + 720 in
                    let tmp_call_194 = toReal(resmin_191) in
                    let nbmonths_195 = trunc(arg_17) in
                    let minutes_since_epoch_197 = trunc(tmp_call_194) in
                    let jul_202 = minutes_since_epoch_197 / 1440 in
                    let l_203 = jul_202 + 68569 + 2444238 in
                    let n_204 = 4 * l_203 / 146097 in
                    let l_205 = l_203 - ((146097 * n_204 + 3) / 4) in
                    let i_206 = 4000 * (l_205 + 1) / 1461001 in
                    let l_208 = l_205 - (1461 * i_206 / 4) + 31 in
                    let j_209 = 80 * l_208 / 2447 in
                    let d_211 = l_208 - (2447 * j_209 / 80) in
                    let l_212 = j_209 / 11 in
                    let m_214 = j_209 + 2 - (12 * l_212) in
                    let y_215 = 100 * (n_204 - 49) + i_206 + l_212 in
                    let daytime_217 = minutes_since_epoch_197 - (minutes_since_epoch_197 / 1440 * 1440) in
                    let {y_225, m_229, d_230, h_231,
                         min_232} = if daytime_217 = 720
                                    then {y_215, m_214, d_211, 12, 0}
                                    else let tmp_lit_223 = daytime_217 - (daytime_217 / 60 * 60) in
                                         {y_215, m_214, d_211, daytime_217 / 60,
                                          tmp_lit_223} in
                    let m_234 = m_229 + nbmonths_195 in
                    let x_235 = m_234 - 1 in
                    let tmp_bop_237 = x_235 - (x_235 / 12 * 12) in
                    let {y_238, m_240} = {y_225 + (m_234 - 1) / 12,
                                          tmp_bop_237 + 1} in
                    let {y_241, m_243} = if m_240 <= 0
                                         then {y_238 - 1, m_240 + 12}
                                         else {y_238, m_240} in
                    let tmp_bop_263 = y_241 - (y_241 / 4 * 4) in
                    let tmp_bop_267 = y_241 - (y_241 / 100 * 100) in
                    let tmp_bop_268 = y_241 - (y_241 / 400 * 400) in
                    let tmp_and_269 = tmp_bop_263 = 0 && not (tmp_bop_267 = 0) || tmp_bop_268 = 0 in
                    let b_275 = if m_243 = 2 && tmp_and_269
                                then 29
                                else if m_243 = 2
                                     then 28
                                     else if m_243 = 4 || m_243 = 6 || m_243 = 9 || m_243 = 11
                                          then 30
                                          else 31 in
                    let tmp_lit_277 = if d_230 < b_275
                                      then d_230
                                      else b_275 in
                    let ym_280 = if m_243 = 1 || m_243 = 2
                                 then 1461 * (y_241 + 4800 - 1) / 4 + 367 * (m_243 + 10) / 12 - (3 * (y_241 + 4900 - 1) / 100 / 4)
                                 else 1461 * (y_241 + 4800) / 4 + 367 * (m_243 - 2) / 12 - (3 * (y_241 + 4900) / 100 / 4) in
                    let tmp_281 = ym_280 + tmp_lit_277 - 32075 - 2444238 in
                    let resmin_284 = tmp_281 * 1440 + 720 in
                    let tmp_call_285 = toReal(resmin_284) in
                    {tmp_call_194, tmp_call_285},
                  iota(tmp_call_90)) in
           let tmp_repl_289 = replicate(tmp_call_90, 0.0) in
           let tmp_size_293 = size(0, soac_v_286) in
           let tmp_e_295 = tmp_call_90 = tmp_size_293 in
           let zip_assert_296 = assert(tmp_e_295) in
           let tmp_size_297 = size(0, soac_v_286) in
           let tmp_size_301 = size(0, soac_v_288) in
           let tmp_e_304 = tmp_size_297 = tmp_size_301 in
           let zip_assert_306 = assert(tmp_e_304) in
           let comb_cert_308 = conjoin(zip_assert_296, zip_assert_306) in
           let {lvl_341, t0_342, tn_343} =
             <comb_cert_308>
             reduceT(fn {real, real, real} (real arg_309, real arg_311,
                                            real arg_312, real arg_313,
                                            real arg_314, real arg_316) =>
                       let tmp_bop_320 = (arg_316 - 16834320.0) / 1440.0 in
                       let tmp_bop_321 = tmp_bop_320 / 365.0 in
                       let val_324 = -(0.03 * tmp_bop_321) in
                       let tmp_call_327 = exp(val_324) in
                       let tmp_bop_328 = (arg_316 - arg_314) / 1440.0 in
                       let tmp_bop_329 = tmp_bop_328 / 365.0 in
                       let tmp_lit_330 = if arg_311 < arg_314
                                         then arg_311
                                         else arg_314 in
                       let tmp_lit_331 = if arg_312 < arg_316
                                         then arg_316
                                         else arg_312 in
                       let {tup_elem_332, tup_elem_339,
                            tup_elem_340} = {arg_309 + tmp_call_327 * tmp_bop_329,
                                             tmp_lit_330, tmp_lit_331} in
                       {tup_elem_332, tmp_lit_330, tmp_lit_331},
                     {0.0, 168307199.0, 3600.0}, tmp_repl_289, soac_v_286,
                     soac_v_288) in
           let tmp_bop_344 = (t0_342 - 16834320.0) / 1440.0 in
           let tmp_bop_352 = tmp_bop_344 / 365.0 in
           let val_354 = -(0.03 * tmp_bop_352) in
           let tmp_call_357 = exp(val_354) in
           let tmp_bop_362 = (tn_343 - 16834320.0) / 1440.0 in
           let tmp_bop_364 = tmp_bop_362 / 365.0 in
           let val_365 = -(0.03 * tmp_bop_364) in
           let tmp_call_367 = exp(val_365) in
           let strike_368 = (tmp_call_357 - tmp_call_367) / lvl_341 in
           let n_schedi_369 = size(0, soac_v_286) in
           let {untuple_392} =
             mapT(fn {real} (int i_370) =>
                    let tmp_bop_373 = (soac_v_288[i_370] - soac_v_286[i_370]) / 1440.0 in
                    let tau_382 = tmp_bop_373 / 365.0 in
                    let val_388 = if i_370 = n_schedi_369 - 1
                                  then 1.0 + tau_382 * strike_368
                                  else tau_382 * strike_368 in
                    {val_388},
                  iota(n_schedi_369)) in
           let tmp_bop_394 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let tmat0_402 = tmp_bop_394 / 365.0 in
           let val_404 = -(0.02453 * tmat0_402) in
           let tmp_call_444 = exp(val_404) in
           let ba_447 = (1.0 - tmp_call_444) / 0.02453 in
           let val_453 = -(0.98376 * tmat0_402) in
           let tmp_call_467 = exp(val_453) in
           let bb_473 = (1.0 - tmp_call_467) / 0.98376 in
           let val_475 = -(0.02453 * tmat0_402) in
           let tmp_call_479 = exp(val_475) in
           let exp2xtau_480 = tmp_call_479 * tmp_call_479 in
           let t1_488 = 0.9556596754408898 * (tmat0_402 + 81.53281695882593 * tmp_call_479 - (20.383204239706483 * exp2xtau_480) - 61.149612719119446) in
           let val_492 = -(0.98376 * tmat0_402) in
           let tmp_call_493 = exp(val_492) in
           let exp2xtau_494 = tmp_call_493 * tmp_call_493 in
           let t2_495 = 0.014460761693212401 * (tmat0_402 + 2.033016182808815 * tmp_call_493 - (0.5082540457022038 * exp2xtau_494) - 1.5247621371066113) in
           let val_497 = -(1.00829 * tmat0_402) in
           let tmp_call_501 = exp(val_497) in
           let tmp_bop_503 = (1.0 - tmp_call_501) / 1.00829 in
           let t3_504 = -0.19373336527812574 * (tmat0_402 - ba_447 - bb_473 + tmp_bop_503) in
           let {v0_mat_505, dummyA_506, dummyB_507} = {t1_488 + t2_495 + t3_504,
                                                       ba_447, bb_473} in
           let tmp_bop_508 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let tmp_bop_512 = tmp_bop_508 / 365.0 in
           let val_513 = -(0.03 * tmp_bop_512) in
           let tmp_call_528 = exp(val_513) in
           let val_529 = -(0.04906 * tmat0_402) in
           let tmp_call_531 = exp(val_529) in
           let tmp_arg_532 = (1.0 - tmp_call_531) / 0.04906 in
           let tmp_call_540 = sqrt(tmp_arg_532) in
           let sigmax_545 = 0.02398 * tmp_call_540 in
           let val_547 = -(1.96752 * tmat0_402) in
           let tmp_call_548 = exp(val_547) in
           let tmp_arg_549 = (1.0 - tmp_call_548) / 1.96752 in
           let tmp_call_550 = sqrt(tmp_arg_549) in
           let sigmay_551 = 0.1183 * tmp_call_550 in
           let val_552 = -(1.00829 * tmat0_402) in
           let tmp_call_556 = exp(val_552) in
           let tmp_bop_557 = (1.0 - tmp_call_556) / 1.00829 in
           let rhoxy_558 = -0.0023375512159999998 / (sigmax_545 * sigmay_551) * tmp_bop_557 in
           let rhoxyc_559 = 1.0 - (rhoxy_558 * rhoxy_558) in
           let rhoxycs_560 = sqrt(rhoxyc_559) in
           let t2_561 = rhoxy_558 / (sigmax_545 * rhoxycs_560) in
           let sigmay_rhoxycs_562 = sigmay_551 * rhoxycs_560 in
           let t4_563 = rhoxy_558 * sigmay_551 / sigmax_545 in
           let tmp_bop_564 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let ts_565 = tmp_bop_564 / 365.0 in
           let tmp_bop_566 = (tmp_call_88 - tmp_call_88) / 1440.0 in
           let tmatt_567 = tmp_bop_566 / 365.0 in
           let tmp_bop_568 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let tmat0_569 = tmp_bop_568 / 365.0 in
           let tmp_bop_570 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let tmats_571 = tmp_bop_570 / 365.0 in
           let tmp_bop_572 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let t0_573 = tmp_bop_572 / 365.0 in
           let val_574 = -(0.02453 * ts_565) in
           let tmp_call_575 = exp(val_574) in
           let tmp2_576 = 1.0 - tmp_call_575 in
           let val_577 = -(0.02453 * tmatt_567) in
           let tmp_call_578 = exp(val_577) in
           let val_579 = -(0.02453 * (tmats_571 + ts_565)) in
           let tmp_call_580 = exp(val_579) in
           let tmp5_581 = tmp_call_578 - tmp_call_580 in
           let val_582 = -(0.98376 * tmatt_567) in
           let tmp_call_583 = exp(val_582) in
           let val_584 = -(0.98376 * tmat0_569) - (0.02453 * t0_573) in
           let tmp_call_585 = exp(val_584) in
           let tmp6_586 = tmp_call_583 - tmp_call_585 in
           let tmp_neg_587 = 0.858792992801827 * tmp2_576 - (0.4778298377204449 * tmp5_581) - (-0.0023566034822682085 * tmp6_586) in
           let mux_588 = -tmp_neg_587 in
           let tmp_bop_589 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let ts_590 = tmp_bop_589 / 365.0 in
           let tmp_bop_594 = (tmp_call_88 - tmp_call_88) / 1440.0 in
           let tmatt_595 = tmp_bop_594 / 365.0 in
           let tmp_bop_596 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let tmat0_597 = tmp_bop_596 / 365.0 in
           let tmp_bop_598 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let tmats_599 = tmp_bop_598 / 365.0 in
           let tmp_bop_600 = (tmp_call_88 - 16834320.0) / 1440.0 in
           let t0_601 = tmp_bop_600 / 365.0 in
           let val_602 = -(0.98376 * ts_590) in
           let tmp_call_603 = exp(val_602) in
           let tmp2_604 = 1.0 - tmp_call_603 in
           let val_605 = -(0.98376 * tmatt_595) in
           let tmp_call_606 = exp(val_605) in
           let val_607 = -(0.98376 * (tmats_599 + ts_590)) in
           let tmp_call_608 = exp(val_607) in
           let tmp5_609 = tmp_call_606 - tmp_call_608 in
           let val_610 = -(0.02453 * tmatt_595) in
           let tmp_call_611 = exp(val_610) in
           let val_612 = -(0.02453 * tmat0_597) - (0.98376 * t0_601) in
           let tmp_call_613 = exp(val_612) in
           let tmp6_614 = tmp_call_611 - tmp_call_613 in
           let tmp_neg_615 = -0.08240592094585045 * tmp2_604 - (0.007230380846606201 * tmp5_609) - (-0.09451007915679466 * tmp6_614) in
           let muy_616 = -tmp_neg_615 in
           let tmp_size_617 = size(0, soac_v_288) in
           let tmp_size_618 = size(0, untuple_392) in
           let tmp_e_619 = tmp_size_617 = tmp_size_618 in
           let zip_assert_621 = assert(tmp_e_619) in
           let {soac_v_698, soac_v_699, soac_v_700, soac_v_702, soac_v_703,
                soac_v_705} =
             <zip_assert_621>
             mapT(fn {real, real, real, real, real, real} (real arg_622,
                                                           real arg_623) =>
                    let tmp_bop_624 = (arg_622 - 16834320.0) / 1440.0 in
                    let tau_627 = tmp_bop_624 / 365.0 in
                    let val_628 = -(0.02453 * tau_627) in
                    let tmp_call_629 = exp(val_628) in
                    let ba_630 = (1.0 - tmp_call_629) / 0.02453 in
                    let val_631 = -(0.98376 * tau_627) in
                    let tmp_call_632 = exp(val_631) in
                    let bb_634 = (1.0 - tmp_call_632) / 0.98376 in
                    let val_635 = -(0.02453 * tau_627) in
                    let tmp_call_636 = exp(val_635) in
                    let exp2xtau_637 = tmp_call_636 * tmp_call_636 in
                    let t1_638 = 0.9556596754408898 * (tau_627 + 81.53281695882593 * tmp_call_636 - (20.383204239706483 * exp2xtau_637) - 61.149612719119446) in
                    let val_639 = -(0.98376 * tau_627) in
                    let tmp_call_640 = exp(val_639) in
                    let exp2xtau_641 = tmp_call_640 * tmp_call_640 in
                    let t2_642 = 0.014460761693212401 * (tau_627 + 2.033016182808815 * tmp_call_640 - (0.5082540457022038 * exp2xtau_641) - 1.5247621371066113) in
                    let val_643 = -(1.00829 * tau_627) in
                    let tmp_call_644 = exp(val_643) in
                    let tmp_bop_645 = (1.0 - tmp_call_644) / 1.00829 in
                    let t3_646 = -0.19373336527812574 * (tau_627 - ba_630 - bb_634 + tmp_bop_645) in
                    let {v0_end_648, dummyA_649,
                         dummyB_650} = {t1_638 + t2_642 + t3_646, ba_630,
                                        bb_634} in
                    let tmp_bop_651 = (arg_622 - tmp_call_88) / 1440.0 in
                    let tau_652 = tmp_bop_651 / 365.0 in
                    let val_653 = -(0.02453 * tau_652) in
                    let tmp_call_654 = exp(val_653) in
                    let ba_655 = (1.0 - tmp_call_654) / 0.02453 in
                    let val_656 = -(0.98376 * tau_652) in
                    let tmp_call_657 = exp(val_656) in
                    let bb_659 = (1.0 - tmp_call_657) / 0.98376 in
                    let val_660 = -(0.02453 * tau_652) in
                    let tmp_call_662 = exp(val_660) in
                    let exp2xtau_663 = tmp_call_662 * tmp_call_662 in
                    let t1_664 = 0.9556596754408898 * (tau_652 + 81.53281695882593 * tmp_call_662 - (20.383204239706483 * exp2xtau_663) - 61.149612719119446) in
                    let val_665 = -(0.98376 * tau_652) in
                    let tmp_call_668 = exp(val_665) in
                    let exp2xtau_669 = tmp_call_668 * tmp_call_668 in
                    let t2_670 = 0.014460761693212401 * (tau_652 + 2.033016182808815 * tmp_call_668 - (0.5082540457022038 * exp2xtau_669) - 1.5247621371066113) in
                    let val_671 = -(1.00829 * tau_652) in
                    let tmp_call_674 = exp(val_671) in
                    let tmp_bop_675 = (1.0 - tmp_call_674) / 1.00829 in
                    let t3_680 = -0.19373336527812574 * (tau_652 - ba_655 - bb_659 + tmp_bop_675) in
                    let {vt_end_681, bai_682,
                         bbi_683} = {t1_664 + t2_670 + t3_680, ba_655,
                                     bb_659} in
                    let tmp_bop_684 = (arg_622 - 16834320.0) / 1440.0 in
                    let tmp_bop_685 = tmp_bop_684 / 365.0 in
                    let val_686 = -(0.03 * tmp_bop_685) in
                    let tmp_call_687 = exp(val_686) in
                    let val_688 = 0.5 * (vt_end_681 - v0_end_648 + v0_mat_505) in
                    let tmp_call_689 = exp(val_688) in
                    let aa_690 = tmp_call_687 / tmp_call_528 * tmp_call_689 in
                    let aici_691 = arg_623 * aa_690 in
                    let log_aici_692 = log(aici_691) in
                    let t3_693 = muy_616 - (0.5 * rhoxyc_559 * sigmay_551 * sigmay_551 * bb_659) in
                    let cst_694 = bb_659 * (mux_588 * t4_563 - t3_693) in
                    let tmp_call_695 = exp(cst_694) in
                    let t1_cst_696 = aici_691 * tmp_call_695 in
                    let scale_697 = -(ba_655 + bb_659 * t4_563) in
                    {ba_655, bb_659, aici_691, log_aici_692, t1_cst_696,
                     scale_697},
                  soac_v_288, untuple_392) in
           let tmp_size_706 = size(0, soac_v_698) in
           let tmp_size_713 = size(0, soac_v_699) in
           let tmp_e_714 = tmp_size_706 = tmp_size_713 in
           let zip_assert_715 = assert(tmp_e_714) in
           let tmp_size_716 = size(0, soac_v_699) in
           let tmp_size_717 = size(0, soac_v_700) in
           let tmp_e_718 = tmp_size_716 = tmp_size_717 in
           let zip_assert_719 = assert(tmp_e_718) in
           let tmp_size_720 = size(0, soac_v_700) in
           let tmp_size_721 = size(0, soac_v_702) in
           let tmp_e_722 = tmp_size_720 = tmp_size_721 in
           let zip_assert_723 = assert(tmp_e_722) in
           let comb_cert_724 = conjoin(zip_assert_715, zip_assert_719,
                                       zip_assert_723) in
           let eps_725 = 0.5 * sigmax_545 in
           let {soac_v_738, soac_v_739} =
             <comb_cert_724>
             mapT(fn {real, real} (real arg_726, real arg_728, real arg_729,
                                   real arg_730) =>
                    let baix_731 = arg_726 * mux_588 in
                    let val_733 = -baix_731 in
                    let tmp_call_734 = exp(val_733) in
                    let {tup_elem_735, tup_elem_736} = {arg_729 * tmp_call_734,
                                                        (arg_730 - baix_731) / arg_728} in
                    {tup_elem_735, tup_elem_736},
                  soac_v_698, soac_v_699, soac_v_700, soac_v_702) in
           let {untuple_744} =
             reduceT(fn {real} (real x_740, real y_741) =>
                       let val_743 = x_740 + y_741 in
                       {val_743},
                     {0.0}, soac_v_738) in
           let {untuple_749} =
             reduceT(fn {real} (real param_0_745, real param_1_746) =>
                       let val_748 = if param_0_745 < param_1_746
                                     then param_1_746
                                     else param_0_745 in
                       {val_748},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_739) in
           let f_889 = if n_schedi_369 = 1
                       then untuple_749
                       else let log_s_750 = log(untuple_744) in
                            let tmp_751 = log_s_750 / soac_v_699[n_schedi_369 - 1] in
                            let up_753 = if tmp_751 <= 0.0
                                         then tmp_751
                                         else let tmp_752 = log_s_750 / soac_v_699[0] in
                                              if 0.0 <= tmp_752
                                              then tmp_752
                                              else -10000000000000000000000000000000000000000000000000.0 in
                            let yl_755 = untuple_749 - 0.00001 in
                            let yu_756 = up_753 + 0.00001 in
                            let y0_760 = sigmay_551 * (rhoxy_558 * (mux_588 - mux_588) / sigmax_545 + -3.71901648545568 * rhoxycs_560) - (rhoxyc_559 / 0.98376) + muy_616 in
                            let y1_761 = sigmay_551 * (rhoxy_558 * (mux_588 - mux_588) / sigmax_545 - (-3.71901648545568 * rhoxycs_560)) + muy_616 in
                            if y1_761 <= yl_755
                            then y1_761 + 1.0
                            else if yu_756 <= y0_760
                                 then y0_760 - 1.0
                                 else let tmp_size_762 = size(0, soac_v_698) in
                                      let tmp_size_763 = size(0, soac_v_700) in
                                      let tmp_e_764 = tmp_size_762 = tmp_size_763 in
                                      let zip_assert_765 = assert(tmp_e_764) in
                                      let {untuple_771} =
                                        <zip_assert_765>
                                        mapT(fn {real} (real arg_766,
                                                        real arg_767) =>
                                               let val_768 = -(arg_766 * mux_588) in
                                               let tmp_call_769 = exp(val_768) in
                                               let val_770 = arg_767 * tmp_call_769 in
                                               {val_770},
                                             soac_v_698, soac_v_700) in
                                      let root_lb_772 = if yl_755 < y0_760
                                                        then y0_760
                                                        else yl_755 in
                                      let root_ub_773 = if yu_756 < y1_761
                                                        then yu_756
                                                        else y1_761 in
                                      let tmp_size_775 = size(0, untuple_771) in
                                      let tmp_size_776 = size(0, soac_v_699) in
                                      let tmp_e_777 = tmp_size_775 = tmp_size_776 in
                                      let zip_assert_778 = assert(tmp_e_777) in
                                      let {untuple_786} =
                                        <zip_assert_778>
                                        mapT(fn {real} (real arg_780,
                                                        real arg_781) =>
                                               let val_782 = -(arg_781 * root_lb_772) in
                                               let tmp_call_783 = exp(val_782) in
                                               let val_785 = arg_780 * tmp_call_783 in
                                               {val_785},
                                             untuple_771, soac_v_699) in
                                      let {untuple_791} =
                                        reduceT(fn {real} (real x_787,
                                                           real y_788) =>
                                                  let val_790 = x_787 + y_788 in
                                                  {val_790},
                                                {0.0}, untuple_786) in
                                      let tmp_lit_792 = untuple_791 - 1.0 in
                                      let {untuple_799} =
                                        <zip_assert_778>
                                        mapT(fn {real} (real arg_793,
                                                        real arg_795) =>
                                               let val_796 = -(arg_795 * root_ub_773) in
                                               let tmp_call_797 = exp(val_796) in
                                               let val_798 = arg_793 * tmp_call_797 in
                                               {val_798},
                                             untuple_771, soac_v_699) in
                                      let {untuple_807} =
                                        reduceT(fn {real} (real x_800,
                                                           real y_802) =>
                                                  let val_803 = x_800 + y_802 in
                                                  {val_803},
                                                {0.0}, untuple_799) in
                                      let tmp_lit_808 = untuple_807 - 1.0 in
                                      let {root_886, iteration_887,
                                           error_888} = if 0.0 <= tmp_lit_792 * tmp_lit_808
                                                        then if 0.0 <= root_lb_772
                                                             then {0.0, 0,
                                                                   10000000000000000000000000000000000000000000000000.0}
                                                             else {0.0, 0,
                                                                   -10000000000000000000000000000000000000000000000000.0}
                                                        else let tmp_bop_809 = if tmp_lit_792 < 0.0
                                                                               then -tmp_lit_792
                                                                               else tmp_lit_792 in
                                                             let tmp_bop_810 = if tmp_lit_808 < 0.0
                                                                               then -tmp_lit_808
                                                                               else tmp_lit_808 in
                                                             let {fa_811,
                                                                  fb_812} = if tmp_bop_809 < tmp_bop_810
                                                                            then {tmp_lit_808,
                                                                                  tmp_lit_792}
                                                                            else {tmp_lit_792,
                                                                                  tmp_lit_808} in
                                                             loop ({a_813,
                                                                    b_814,
                                                                    c_815,
                                                                    d_816,
                                                                    fa_818,
                                                                    fb_819,
                                                                    fc_820,
                                                                    mflag_821,
                                                                    it_822} = {root_lb_772,
                                                                               root_ub_773,
                                                                               root_lb_772,
                                                                               0.0,
                                                                               fa_811,
                                                                               fb_812,
                                                                               fa_811,
                                                                               True,
                                                                               0}) = for i_823 < 1000 do
                                                               let a_824 = b_814 - a_813 in
                                                               let tmp_bop_825 = if a_824 < 0.0
                                                                                 then -a_824
                                                                                 else a_824 in
                                                               if fb_819 = 0.0 || tmp_bop_825 < 0.0001
                                                               then {a_813,
                                                                     b_814,
                                                                     c_815,
                                                                     d_816,
                                                                     fa_818,
                                                                     fb_819,
                                                                     fc_820,
                                                                     mflag_821,
                                                                     it_822}
                                                               else let s_831 = if fa_818 = fc_820 || fb_819 = fc_820
                                                                                then b_814 - (fb_819 * (b_814 - a_813) / (fb_819 - fa_818))
                                                                                else let s1_827 = a_813 * fb_819 * fc_820 / ((fa_818 - fb_819) * (fa_818 - fc_820)) in
                                                                                     let s2_828 = b_814 * fa_818 * fc_820 / ((fb_819 - fa_818) * (fb_819 - fc_820)) in
                                                                                     let s3_830 = c_815 * fa_818 * fb_819 / ((fc_820 - fa_818) * (fc_820 - fb_819)) in
                                                                                     s1_827 + s2_828 + s3_830 in
                                                                    let a_832 = b_814 - c_815 in
                                                                    let tmp_bop_833 = if a_832 < 0.0
                                                                                      then -a_832
                                                                                      else a_832 in
                                                                    let a_836 = s_831 - b_814 in
                                                                    let tmp_bop_837 = if a_836 < 0.0
                                                                                      then -a_836
                                                                                      else a_836 in
                                                                    let a_838 = c_815 - d_816 in
                                                                    let tmp_bop_839 = if a_838 < 0.0
                                                                                      then -a_838
                                                                                      else a_838 in
                                                                    let a_842 = s_831 - b_814 in
                                                                    let tmp_bop_843 = if a_842 < 0.0
                                                                                      then -a_842
                                                                                      else a_842 in
                                                                    let a_848 = b_814 - c_815 in
                                                                    let tmp_bop_849 = if a_848 < 0.0
                                                                                      then -a_848
                                                                                      else a_848 in
                                                                    let a_850 = c_815 - d_816 in
                                                                    let tmp_bop_851 = if a_850 < 0.0
                                                                                      then -a_850
                                                                                      else a_850 in
                                                                    let {mflag_852,
                                                                         s_854} = if not ((3.0 * a_813 + b_814) / 4.0 <= s_831 && s_831 <= b_814) || mflag_821 && tmp_bop_833 / 2.0 <= tmp_bop_837 || not mflag_821 && tmp_bop_839 / 2.0 <= tmp_bop_843 || mflag_821 && tmp_bop_849 <= 0.0001 || not mflag_821 && tmp_bop_851 <= 0.0001
                                                                                  then {True,
                                                                                        (a_813 + b_814) / 2.0}
                                                                                  else {False,
                                                                                        s_831} in
                                                                    let {untuple_860} =
                                                                      <zip_assert_778>
                                                                      mapT(fn {real} (real arg_855,
                                                                                      real arg_856) =>
                                                                             let val_857 = -(arg_856 * s_854) in
                                                                             let tmp_call_858 = exp(val_857) in
                                                                             let val_859 = arg_855 * tmp_call_858 in
                                                                             {val_859},
                                                                           untuple_771,
                                                                           soac_v_699) in
                                                                    let {untuple_866} =
                                                                      reduceT(fn {real} (real x_861,
                                                                                         real y_863) =>
                                                                                let val_864 = x_861 + y_863 in
                                                                                {val_864},
                                                                              {0.0},
                                                                              untuple_860) in
                                                                    let fs_867 = untuple_866 - 1.0 in
                                                                    let {a_868,
                                                                         b_869,
                                                                         fa_872,
                                                                         fb_873} = if fa_818 * fs_867 < 0.0
                                                                                   then {a_813,
                                                                                         s_854,
                                                                                         fa_818,
                                                                                         fs_867}
                                                                                   else {s_854,
                                                                                         b_814,
                                                                                         fs_867,
                                                                                         fb_819} in
                                                                    let tmp_bop_874 = if fa_872 < 0.0
                                                                                      then -fa_872
                                                                                      else fa_872 in
                                                                    let tmp_bop_875 = if fb_873 < 0.0
                                                                                      then -fb_873
                                                                                      else fb_873 in
                                                                    let {a_878,
                                                                         b_879,
                                                                         fa_884,
                                                                         fb_885} = if tmp_bop_874 < tmp_bop_875
                                                                                   then {b_869,
                                                                                         a_868,
                                                                                         fb_873,
                                                                                         fa_872}
                                                                                   else {a_868,
                                                                                         b_869,
                                                                                         fa_872,
                                                                                         fb_873} in
                                                                    {a_878,
                                                                     b_879,
                                                                     b_814,
                                                                     c_815,
                                                                     fa_884,
                                                                     fb_885,
                                                                     fb_819,
                                                                     mflag_852,
                                                                     i_823} in
                                                             {b_814, it_822,
                                                              fb_819} in
                                      if error_888 = -10000000000000000000000000000000000000000000000000.0
                                      then y0_760 - 1.0
                                      else if error_888 = 10000000000000000000000000000000000000000000000000.0
                                           then y1_761 + 1.0
                                           else root_886 in
           let x_890 = mux_588 + eps_725 in
           let {soac_v_907, soac_v_908} =
             <comb_cert_724>
             mapT(fn {real, real} (real arg_891, real arg_892, real arg_893,
                                   real arg_894) =>
                    let baix_895 = arg_891 * x_890 in
                    let val_896 = -baix_895 in
                    let tmp_call_904 = exp(val_896) in
                    let {tup_elem_905, tup_elem_906} = {arg_893 * tmp_call_904,
                                                        (arg_894 - baix_895) / arg_892} in
                    {tup_elem_905, tup_elem_906},
                  soac_v_698, soac_v_699, soac_v_700, soac_v_702) in
           let {untuple_913} =
             reduceT(fn {real} (real x_909, real y_910) =>
                       let val_911 = x_909 + y_910 in
                       {val_911},
                     {0.0}, soac_v_907) in
           let {untuple_917} =
             reduceT(fn {real} (real param_0_914, real param_1_915) =>
                       let val_916 = if param_0_914 < param_1_915
                                     then param_1_915
                                     else param_0_914 in
                       {val_916},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_908) in
           let g_1093 = if n_schedi_369 = 1
                        then untuple_917
                        else let log_s_918 = log(untuple_913) in
                             let tmp_919 = log_s_918 / soac_v_699[n_schedi_369 - 1] in
                             let up_921 = if tmp_919 <= 0.0
                                          then tmp_919
                                          else let tmp_920 = log_s_918 / soac_v_699[0] in
                                               if 0.0 <= tmp_920
                                               then tmp_920
                                               else -10000000000000000000000000000000000000000000000000.0 in
                             let yl_922 = untuple_917 - 0.00001 in
                             let yu_924 = up_921 + 0.00001 in
                             let y0_925 = sigmay_551 * (rhoxy_558 * (x_890 - mux_588) / sigmax_545 + -3.71901648545568 * rhoxycs_560) - (rhoxyc_559 / 0.98376) + muy_616 in
                             let y1_926 = sigmay_551 * (rhoxy_558 * (x_890 - mux_588) / sigmax_545 - (-3.71901648545568 * rhoxycs_560)) + muy_616 in
                             if y1_926 <= yl_922
                             then y1_926 + 1.0
                             else if yu_924 <= y0_925
                                  then y0_925 - 1.0
                                  else let tmp_size_929 = size(0, soac_v_698) in
                                       let tmp_size_932 = size(0, soac_v_700) in
                                       let tmp_e_933 = tmp_size_929 = tmp_size_932 in
                                       let zip_assert_934 = assert(tmp_e_933) in
                                       let {untuple_946} =
                                         <zip_assert_934>
                                         mapT(fn {real} (real arg_935,
                                                         real arg_936) =>
                                                let val_937 = -(arg_935 * x_890) in
                                                let tmp_call_938 = exp(val_937) in
                                                let val_945 = arg_936 * tmp_call_938 in
                                                {val_945},
                                              soac_v_698, soac_v_700) in
                                       let root_lb_947 = if yl_922 < y0_925
                                                         then y0_925
                                                         else yl_922 in
                                       let root_ub_948 = if yu_924 < y1_926
                                                         then yu_924
                                                         else y1_926 in
                                       let tmp_size_949 = size(0,
                                                               untuple_946) in
                                       let tmp_size_950 = size(0, soac_v_699) in
                                       let tmp_e_951 = tmp_size_949 = tmp_size_950 in
                                       let zip_assert_952 = assert(tmp_e_951) in
                                       let {untuple_960} =
                                         <zip_assert_952>
                                         mapT(fn {real} (real arg_955,
                                                         real arg_956) =>
                                                let val_957 = -(arg_956 * root_lb_947) in
                                                let tmp_call_958 = exp(val_957) in
                                                let val_959 = arg_955 * tmp_call_958 in
                                                {val_959},
                                              untuple_946, soac_v_699) in
                                       let {untuple_966} =
                                         reduceT(fn {real} (real x_962,
                                                            real y_963) =>
                                                   let val_965 = x_962 + y_963 in
                                                   {val_965},
                                                 {0.0}, untuple_960) in
                                       let tmp_lit_967 = untuple_966 - 1.0 in
                                       let {untuple_973} =
                                         <zip_assert_952>
                                         mapT(fn {real} (real arg_968,
                                                         real arg_969) =>
                                                let val_970 = -(arg_969 * root_ub_948) in
                                                let tmp_call_971 = exp(val_970) in
                                                let val_972 = arg_968 * tmp_call_971 in
                                                {val_972},
                                              untuple_946, soac_v_699) in
                                       let {untuple_977} =
                                         reduceT(fn {real} (real x_974,
                                                            real y_975) =>
                                                   let val_976 = x_974 + y_975 in
                                                   {val_976},
                                                 {0.0}, untuple_973) in
                                       let tmp_lit_978 = untuple_977 - 1.0 in
                                       let {root_1084, iteration_1091,
                                            error_1092} = if 0.0 <= tmp_lit_967 * tmp_lit_978
                                                          then if 0.0 <= root_lb_947
                                                               then {0.0, 0,
                                                                     10000000000000000000000000000000000000000000000000.0}
                                                               else {0.0, 0,
                                                                     -10000000000000000000000000000000000000000000000000.0}
                                                          else let tmp_bop_979 = if tmp_lit_967 < 0.0
                                                                                 then -tmp_lit_967
                                                                                 else tmp_lit_967 in
                                                               let tmp_bop_980 = if tmp_lit_978 < 0.0
                                                                                 then -tmp_lit_978
                                                                                 else tmp_lit_978 in
                                                               let {fa_981,
                                                                    fb_984} = if tmp_bop_979 < tmp_bop_980
                                                                              then {tmp_lit_978,
                                                                                    tmp_lit_967}
                                                                              else {tmp_lit_967,
                                                                                    tmp_lit_978} in
                                                               loop ({a_985,
                                                                      b_986,
                                                                      c_987,
                                                                      d_988,
                                                                      fa_989,
                                                                      fb_990,
                                                                      fc_993,
                                                                      mflag_994,
                                                                      it_995} = {root_lb_947,
                                                                                 root_ub_948,
                                                                                 root_lb_947,
                                                                                 0.0,
                                                                                 fa_981,
                                                                                 fb_984,
                                                                                 fa_981,
                                                                                 True,
                                                                                 0}) = for i_996 < 1000 do
                                                                 let a_999 = b_986 - a_985 in
                                                                 let tmp_bop_1000 = if a_999 < 0.0
                                                                                    then -a_999
                                                                                    else a_999 in
                                                                 if fb_990 = 0.0 || tmp_bop_1000 < 0.0001
                                                                 then {a_985,
                                                                       b_986,
                                                                       c_987,
                                                                       d_988,
                                                                       fa_989,
                                                                       fb_990,
                                                                       fc_993,
                                                                       mflag_994,
                                                                       it_995}
                                                                 else let s_1024 = if fa_989 = fc_993 || fb_990 = fc_993
                                                                                   then b_986 - (fb_990 * (b_986 - a_985) / (fb_990 - fa_989))
                                                                                   else let s1_1001 = a_985 * fb_990 * fc_993 / ((fa_989 - fb_990) * (fa_989 - fc_993)) in
                                                                                        let s2_1002 = b_986 * fa_989 * fc_993 / ((fb_990 - fa_989) * (fb_990 - fc_993)) in
                                                                                        let s3_1003 = c_987 * fa_989 * fb_990 / ((fc_993 - fa_989) * (fc_993 - fb_990)) in
                                                                                        s1_1001 + s2_1002 + s3_1003 in
                                                                      let a_1026 = b_986 - c_987 in
                                                                      let tmp_bop_1029 = if a_1026 < 0.0
                                                                                         then -a_1026
                                                                                         else a_1026 in
                                                                      let a_1030 = s_1024 - b_986 in
                                                                      let tmp_bop_1031 = if a_1030 < 0.0
                                                                                         then -a_1030
                                                                                         else a_1030 in
                                                                      let a_1032 = c_987 - d_988 in
                                                                      let tmp_bop_1033 = if a_1032 < 0.0
                                                                                         then -a_1032
                                                                                         else a_1032 in
                                                                      let a_1034 = s_1024 - b_986 in
                                                                      let tmp_bop_1035 = if a_1034 < 0.0
                                                                                         then -a_1034
                                                                                         else a_1034 in
                                                                      let a_1039 = b_986 - c_987 in
                                                                      let tmp_bop_1040 = if a_1039 < 0.0
                                                                                         then -a_1039
                                                                                         else a_1039 in
                                                                      let a_1041 = c_987 - d_988 in
                                                                      let tmp_bop_1046 = if a_1041 < 0.0
                                                                                         then -a_1041
                                                                                         else a_1041 in
                                                                      let {mflag_1047,
                                                                           s_1052} = if not ((3.0 * a_985 + b_986) / 4.0 <= s_1024 && s_1024 <= b_986) || mflag_994 && tmp_bop_1029 / 2.0 <= tmp_bop_1031 || not mflag_994 && tmp_bop_1033 / 2.0 <= tmp_bop_1035 || mflag_994 && tmp_bop_1040 <= 0.0001 || not mflag_994 && tmp_bop_1046 <= 0.0001
                                                                                     then {True,
                                                                                           (a_985 + b_986) / 2.0}
                                                                                     else {False,
                                                                                           s_1024} in
                                                                      let {untuple_1063} =
                                                                        <zip_assert_952>
                                                                        mapT(fn {real} (real arg_1053,
                                                                                        real arg_1054) =>
                                                                               let val_1059 = -(arg_1054 * s_1052) in
                                                                               let tmp_call_1060 = exp(val_1059) in
                                                                               let val_1061 = arg_1053 * tmp_call_1060 in
                                                                               {val_1061},
                                                                             untuple_946,
                                                                             soac_v_699) in
                                                                      let {untuple_1067} =
                                                                        reduceT(fn {real} (real x_1064,
                                                                                           real y_1065) =>
                                                                                  let val_1066 = x_1064 + y_1065 in
                                                                                  {val_1066},
                                                                                {0.0},
                                                                                untuple_1063) in
                                                                      let fs_1068 = untuple_1067 - 1.0 in
                                                                      let {a_1070,
                                                                           b_1071,
                                                                           fa_1072,
                                                                           fb_1075} = if fa_989 * fs_1068 < 0.0
                                                                                      then {a_985,
                                                                                            s_1052,
                                                                                            fa_989,
                                                                                            fs_1068}
                                                                                      else {s_1052,
                                                                                            b_986,
                                                                                            fs_1068,
                                                                                            fb_990} in
                                                                      let tmp_bop_1078 = if fa_1072 < 0.0
                                                                                         then -fa_1072
                                                                                         else fa_1072 in
                                                                      let tmp_bop_1079 = if fb_1075 < 0.0
                                                                                         then -fb_1075
                                                                                         else fb_1075 in
                                                                      let {a_1080,
                                                                           b_1081,
                                                                           fa_1082,
                                                                           fb_1083} = if tmp_bop_1078 < tmp_bop_1079
                                                                                      then {b_1071,
                                                                                            a_1070,
                                                                                            fb_1075,
                                                                                            fa_1072}
                                                                                      else {a_1070,
                                                                                            b_1071,
                                                                                            fa_1072,
                                                                                            fb_1075} in
                                                                      {a_1080,
                                                                       b_1081,
                                                                       b_986,
                                                                       c_987,
                                                                       fa_1082,
                                                                       fb_1083,
                                                                       fb_990,
                                                                       mflag_1047,
                                                                       i_996} in
                                                               {b_986, it_995,
                                                                fb_990} in
                                       if error_1092 = -10000000000000000000000000000000000000000000000000.0
                                       then y0_925 - 1.0
                                       else if error_1092 = 10000000000000000000000000000000000000000000000000.0
                                            then y1_926 + 1.0
                                            else root_1084 in
           let x_1094 = mux_588 - eps_725 in
           let {soac_v_1106, soac_v_1108} =
             <comb_cert_724>
             mapT(fn {real, real} (real arg_1095, real arg_1096, real arg_1097,
                                   real arg_1098) =>
                    let baix_1101 = arg_1095 * x_1094 in
                    let val_1102 = -baix_1101 in
                    let tmp_call_1103 = exp(val_1102) in
                    let {tup_elem_1104,
                         tup_elem_1105} = {arg_1097 * tmp_call_1103,
                                           (arg_1098 - baix_1101) / arg_1096} in
                    {tup_elem_1104, tup_elem_1105},
                  soac_v_698, soac_v_699, soac_v_700, soac_v_702) in
           let {untuple_1113} =
             reduceT(fn {real} (real x_1109, real y_1111) =>
                       let val_1112 = x_1109 + y_1111 in
                       {val_1112},
                     {0.0}, soac_v_1106) in
           let {untuple_1117} =
             reduceT(fn {real} (real param_0_1114, real param_1_1115) =>
                       let val_1116 = if param_0_1114 < param_1_1115
                                      then param_1_1115
                                      else param_0_1114 in
                       {val_1116},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_1108) in
           let h_1286 = if n_schedi_369 = 1
                        then untuple_1117
                        else let log_s_1118 = log(untuple_1113) in
                             let tmp_1119 = log_s_1118 / soac_v_699[n_schedi_369 - 1] in
                             let up_1121 = if tmp_1119 <= 0.0
                                           then tmp_1119
                                           else let tmp_1120 = log_s_1118 / soac_v_699[0] in
                                                if 0.0 <= tmp_1120
                                                then tmp_1120
                                                else -10000000000000000000000000000000000000000000000000.0 in
                             let yl_1122 = untuple_1117 - 0.00001 in
                             let yu_1123 = up_1121 + 0.00001 in
                             let y0_1124 = sigmay_551 * (rhoxy_558 * (x_1094 - mux_588) / sigmax_545 + -3.71901648545568 * rhoxycs_560) - (rhoxyc_559 / 0.98376) + muy_616 in
                             let y1_1125 = sigmay_551 * (rhoxy_558 * (x_1094 - mux_588) / sigmax_545 - (-3.71901648545568 * rhoxycs_560)) + muy_616 in
                             if y1_1125 <= yl_1122
                             then y1_1125 + 1.0
                             else if yu_1123 <= y0_1124
                                  then y0_1124 - 1.0
                                  else let tmp_size_1126 = size(0,
                                                                soac_v_698) in
                                       let tmp_size_1127 = size(0,
                                                                soac_v_700) in
                                       let tmp_e_1130 = tmp_size_1126 = tmp_size_1127 in
                                       let zip_assert_1131 = assert(tmp_e_1130) in
                                       let {untuple_1139} =
                                         <zip_assert_1131>
                                         mapT(fn {real} (real arg_1132,
                                                         real arg_1133) =>
                                                let val_1134 = -(arg_1132 * x_1094) in
                                                let tmp_call_1135 = exp(val_1134) in
                                                let val_1136 = arg_1133 * tmp_call_1135 in
                                                {val_1136},
                                              soac_v_698, soac_v_700) in
                                       let root_lb_1140 = if yl_1122 < y0_1124
                                                          then y0_1124
                                                          else yl_1122 in
                                       let root_ub_1141 = if yu_1123 < y1_1125
                                                          then yu_1123
                                                          else y1_1125 in
                                       let tmp_size_1142 = size(0,
                                                                untuple_1139) in
                                       let tmp_size_1145 = size(0,
                                                                soac_v_699) in
                                       let tmp_e_1146 = tmp_size_1142 = tmp_size_1145 in
                                       let zip_assert_1147 = assert(tmp_e_1146) in
                                       let {untuple_1176} =
                                         <zip_assert_1147>
                                         mapT(fn {real} (real arg_1148,
                                                         real arg_1149) =>
                                                let val_1170 = -(arg_1149 * root_lb_1140) in
                                                let tmp_call_1172 = exp(val_1170) in
                                                let val_1175 = arg_1148 * tmp_call_1172 in
                                                {val_1175},
                                              untuple_1139, soac_v_699) in
                                       let {untuple_1180} =
                                         reduceT(fn {real} (real x_1177,
                                                            real y_1178) =>
                                                   let val_1179 = x_1177 + y_1178 in
                                                   {val_1179},
                                                 {0.0}, untuple_1176) in
                                       let tmp_lit_1181 = untuple_1180 - 1.0 in
                                       let {untuple_1198} =
                                         <zip_assert_1147>
                                         mapT(fn {real} (real arg_1185,
                                                         real arg_1186) =>
                                                let val_1187 = -(arg_1186 * root_ub_1141) in
                                                let tmp_call_1192 = exp(val_1187) in
                                                let val_1193 = arg_1185 * tmp_call_1192 in
                                                {val_1193},
                                              untuple_1139, soac_v_699) in
                                       let {untuple_1206} =
                                         reduceT(fn {real} (real x_1199,
                                                            real y_1200) =>
                                                   let val_1205 = x_1199 + y_1200 in
                                                   {val_1205},
                                                 {0.0}, untuple_1198) in
                                       let tmp_lit_1207 = untuple_1206 - 1.0 in
                                       let {root_1281, iteration_1282,
                                            error_1285} = if 0.0 <= tmp_lit_1181 * tmp_lit_1207
                                                          then if 0.0 <= root_lb_1140
                                                               then {0.0, 0,
                                                                     10000000000000000000000000000000000000000000000000.0}
                                                               else {0.0, 0,
                                                                     -10000000000000000000000000000000000000000000000000.0}
                                                          else let tmp_bop_1209 = if tmp_lit_1181 < 0.0
                                                                                  then -tmp_lit_1181
                                                                                  else tmp_lit_1181 in
                                                               let tmp_bop_1210 = if tmp_lit_1207 < 0.0
                                                                                  then -tmp_lit_1207
                                                                                  else tmp_lit_1207 in
                                                               let {fa_1211,
                                                                    fb_1212} = if tmp_bop_1209 < tmp_bop_1210
                                                                               then {tmp_lit_1207,
                                                                                     tmp_lit_1181}
                                                                               else {tmp_lit_1181,
                                                                                     tmp_lit_1207} in
                                                               loop ({a_1213,
                                                                      b_1214,
                                                                      c_1216,
                                                                      d_1217,
                                                                      fa_1218,
                                                                      fb_1221,
                                                                      fc_1224,
                                                                      mflag_1225,
                                                                      it_1226} = {root_lb_1140,
                                                                                  root_ub_1141,
                                                                                  root_lb_1140,
                                                                                  0.0,
                                                                                  fa_1211,
                                                                                  fb_1212,
                                                                                  fa_1211,
                                                                                  True,
                                                                                  0}) = for i_1227 < 1000 do
                                                                 let a_1228 = b_1214 - a_1213 in
                                                                 let tmp_bop_1229 = if a_1228 < 0.0
                                                                                    then -a_1228
                                                                                    else a_1228 in
                                                                 if fb_1221 = 0.0 || tmp_bop_1229 < 0.0001
                                                                 then {a_1213,
                                                                       b_1214,
                                                                       c_1216,
                                                                       d_1217,
                                                                       fa_1218,
                                                                       fb_1221,
                                                                       fc_1224,
                                                                       mflag_1225,
                                                                       it_1226}
                                                                 else let s_1239 = if fa_1218 = fc_1224 || fb_1221 = fc_1224
                                                                                   then b_1214 - (fb_1221 * (b_1214 - a_1213) / (fb_1221 - fa_1218))
                                                                                   else let s1_1230 = a_1213 * fb_1221 * fc_1224 / ((fa_1218 - fb_1221) * (fa_1218 - fc_1224)) in
                                                                                        let s2_1237 = b_1214 * fa_1218 * fc_1224 / ((fb_1221 - fa_1218) * (fb_1221 - fc_1224)) in
                                                                                        let s3_1238 = c_1216 * fa_1218 * fb_1221 / ((fc_1224 - fa_1218) * (fc_1224 - fb_1221)) in
                                                                                        s1_1230 + s2_1237 + s3_1238 in
                                                                      let a_1240 = b_1214 - c_1216 in
                                                                      let tmp_bop_1241 = if a_1240 < 0.0
                                                                                         then -a_1240
                                                                                         else a_1240 in
                                                                      let a_1242 = s_1239 - b_1214 in
                                                                      let tmp_bop_1243 = if a_1242 < 0.0
                                                                                         then -a_1242
                                                                                         else a_1242 in
                                                                      let a_1244 = c_1216 - d_1217 in
                                                                      let tmp_bop_1247 = if a_1244 < 0.0
                                                                                         then -a_1244
                                                                                         else a_1244 in
                                                                      let a_1248 = s_1239 - b_1214 in
                                                                      let tmp_bop_1249 = if a_1248 < 0.0
                                                                                         then -a_1248
                                                                                         else a_1248 in
                                                                      let a_1250 = b_1214 - c_1216 in
                                                                      let tmp_bop_1251 = if a_1250 < 0.0
                                                                                         then -a_1250
                                                                                         else a_1250 in
                                                                      let a_1252 = c_1216 - d_1217 in
                                                                      let tmp_bop_1254 = if a_1252 < 0.0
                                                                                         then -a_1252
                                                                                         else a_1252 in
                                                                      let {mflag_1255,
                                                                           s_1257} = if not ((3.0 * a_1213 + b_1214) / 4.0 <= s_1239 && s_1239 <= b_1214) || mflag_1225 && tmp_bop_1241 / 2.0 <= tmp_bop_1243 || not mflag_1225 && tmp_bop_1247 / 2.0 <= tmp_bop_1249 || mflag_1225 && tmp_bop_1251 <= 0.0001 || not mflag_1225 && tmp_bop_1254 <= 0.0001
                                                                                     then {True,
                                                                                           (a_1213 + b_1214) / 2.0}
                                                                                     else {False,
                                                                                           s_1239} in
                                                                      let {untuple_1263} =
                                                                        <zip_assert_1147>
                                                                        mapT(fn {real} (real arg_1258,
                                                                                        real arg_1259) =>
                                                                               let val_1260 = -(arg_1259 * s_1257) in
                                                                               let tmp_call_1261 = exp(val_1260) in
                                                                               let val_1262 = arg_1258 * tmp_call_1261 in
                                                                               {val_1262},
                                                                             untuple_1139,
                                                                             soac_v_699) in
                                                                      let {untuple_1267} =
                                                                        reduceT(fn {real} (real x_1264,
                                                                                           real y_1265) =>
                                                                                  let val_1266 = x_1264 + y_1265 in
                                                                                  {val_1266},
                                                                                {0.0},
                                                                                untuple_1263) in
                                                                      let fs_1268 = untuple_1267 - 1.0 in
                                                                      let {a_1269,
                                                                           b_1270,
                                                                           fa_1271,
                                                                           fb_1272} = if fa_1218 * fs_1268 < 0.0
                                                                                      then {a_1213,
                                                                                            s_1257,
                                                                                            fa_1218,
                                                                                            fs_1268}
                                                                                      else {s_1257,
                                                                                            b_1214,
                                                                                            fs_1268,
                                                                                            fb_1221} in
                                                                      let tmp_bop_1273 = if fa_1271 < 0.0
                                                                                         then -fa_1271
                                                                                         else fa_1271 in
                                                                      let tmp_bop_1276 = if fb_1272 < 0.0
                                                                                         then -fb_1272
                                                                                         else fb_1272 in
                                                                      let {a_1277,
                                                                           b_1278,
                                                                           fa_1279,
                                                                           fb_1280} = if tmp_bop_1273 < tmp_bop_1276
                                                                                      then {b_1270,
                                                                                            a_1269,
                                                                                            fb_1272,
                                                                                            fa_1271}
                                                                                      else {a_1269,
                                                                                            b_1270,
                                                                                            fa_1271,
                                                                                            fb_1272} in
                                                                      {a_1277,
                                                                       b_1278,
                                                                       b_1214,
                                                                       c_1216,
                                                                       fa_1279,
                                                                       fb_1280,
                                                                       fb_1221,
                                                                       mflag_1255,
                                                                       i_1227} in
                                                               {b_1214, it_1226,
                                                                fb_1221} in
                                       if error_1285 = -10000000000000000000000000000000000000000000000000.0
                                       then y0_1124 - 1.0
                                       else if error_1285 = 10000000000000000000000000000000000000000000000000.0
                                            then y1_1125 + 1.0
                                            else root_1281 in
           let df_1287 = 0.5 * (g_1093 - h_1286) / eps_725 in
           let sqrt2sigmax_1288 = 1.4142135623730951 * sigmax_545 in
           let {x_quads_1291, w_quads_1292} =
             {[0.0, 0.6568095668820999, -0.6568095668820998,
               -1.3265570844949335, 1.326557084494933, 2.025948015825757,
               -2.025948015825756, -2.7832900997816497, 2.7832900997816474,
               3.6684708465595857, -3.668470846559584],
              [0.6547592869145917, 0.6609604194409607, 0.6609604194409606,
               0.6812118810666693, 0.681211881066669, 0.7219536247283848,
               0.7219536247283852, 0.8025168688510406, 0.8025168688510397,
               1.0065267861723648, 1.0065267861723775]} in
           let {untuple_1448} =
             mapT(fn {real} (real arg_1316, real arg_1318) =>
                    let x_1321 = sqrt2sigmax_1288 * arg_1316 + mux_588 in
                    let tmp_1322 = (x_1321 - mux_588) / sigmax_545 in
                    let val_1323 = -(0.5 * tmp_1322 * tmp_1322) in
                    let tmp_call_1324 = exp(val_1323) in
                    let yhat_x_1325 = f_889 + df_1287 * (x_1321 - mux_588) in
                    let h1_1326 = (yhat_x_1325 - muy_616) / sigmay_rhoxycs_562 - (t2_561 * (x_1321 - mux_588)) in
                    let tmp_size_1327 = size(0, soac_v_699) in
                    let tmp_size_1331 = size(0, soac_v_703) in
                    let tmp_e_1332 = tmp_size_1327 = tmp_size_1331 in
                    let zip_assert_1333 = assert(tmp_e_1332) in
                    let tmp_size_1338 = size(0, soac_v_703) in
                    let tmp_size_1339 = size(0, soac_v_705) in
                    let tmp_e_1344 = tmp_size_1338 = tmp_size_1339 in
                    let zip_assert_1345 = assert(tmp_e_1344) in
                    let comb_cert_1346 = conjoin(zip_assert_1333,
                                                 zip_assert_1345) in
                    let {untuple_1406} =
                      <comb_cert_1346>
                      mapT(fn {real} (real arg_1355, real arg_1356,
                                      real arg_1357) =>
                             let h2_1360 = h1_1326 + arg_1355 * sigmay_rhoxycs_562 in
                             let val_1363 = arg_1357 * x_1321 in
                             let tmp_call_1364 = exp(val_1363) in
                             let x_1365 = -h2_1360 in
                             let u_1366 = x_1365 / 1.4142135623730951 in
                             let e_1403 = if u_1366 < 0.0
                                          then let x_1371 = -u_1366 in
                                               let t_1372 = 1.0 / (1.0 + 0.3275911 * x_1371) in
                                               let t2_1373 = t_1372 * t_1372 in
                                               let t3_1374 = t_1372 * t2_1373 in
                                               let t4_1375 = t2_1373 * t2_1373 in
                                               let t5_1376 = t2_1373 * t3_1374 in
                                               let val_1382 = -(x_1371 * x_1371) in
                                               let tmp_call_1383 = exp(val_1382) in
                                               let tmp_neg_1384 = 1.0 - ((0.254829592 * t_1372 + -0.284496736 * t2_1373 + 1.421413741 * t3_1374 + -1.453152027 * t4_1375 + 1.061405429 * t5_1376) * tmp_call_1383) in
                                               -tmp_neg_1384
                                          else let t_1385 = 1.0 / (1.0 + 0.3275911 * u_1366) in
                                               let t2_1386 = t_1385 * t_1385 in
                                               let t3_1387 = t_1385 * t2_1386 in
                                               let t4_1388 = t2_1386 * t2_1386 in
                                               let t5_1395 = t2_1386 * t3_1387 in
                                               let val_1398 = -(u_1366 * u_1366) in
                                               let tmp_call_1402 = exp(val_1398) in
                                               1.0 - ((0.254829592 * t_1385 + -0.284496736 * t2_1386 + 1.421413741 * t3_1387 + -1.453152027 * t4_1388 + 1.061405429 * t5_1395) * tmp_call_1402) in
                             let tmp_bop_1404 = 0.5 * (1.0 + e_1403) in
                             let val_1405 = arg_1356 * tmp_call_1364 * tmp_bop_1404 in
                             {val_1405},
                           soac_v_699, soac_v_703, soac_v_705) in
                    let {untuple_1415} =
                      reduceT(fn {real} (real x_1407, real y_1413) =>
                                let val_1414 = x_1407 + y_1413 in
                                {val_1414},
                              {0.0}, untuple_1406) in
                    let x_1416 = -h1_1326 in
                    let u_1417 = x_1416 / 1.4142135623730951 in
                    let e_1444 = if u_1417 < 0.0
                                 then let x_1418 = -u_1417 in
                                      let t_1419 = 1.0 / (1.0 + 0.3275911 * x_1418) in
                                      let t2_1427 = t_1419 * t_1419 in
                                      let t3_1430 = t_1419 * t2_1427 in
                                      let t4_1432 = t2_1427 * t2_1427 in
                                      let t5_1433 = t2_1427 * t3_1430 in
                                      let val_1434 = -(x_1418 * x_1418) in
                                      let tmp_call_1435 = exp(val_1434) in
                                      let tmp_neg_1436 = 1.0 - ((0.254829592 * t_1419 + -0.284496736 * t2_1427 + 1.421413741 * t3_1430 + -1.453152027 * t4_1432 + 1.061405429 * t5_1433) * tmp_call_1435) in
                                      -tmp_neg_1436
                                 else let t_1437 = 1.0 / (1.0 + 0.3275911 * u_1417) in
                                      let t2_1438 = t_1437 * t_1437 in
                                      let t3_1439 = t_1437 * t2_1438 in
                                      let t4_1440 = t2_1438 * t2_1438 in
                                      let t5_1441 = t2_1438 * t3_1439 in
                                      let val_1442 = -(u_1417 * u_1417) in
                                      let tmp_call_1443 = exp(val_1442) in
                                      1.0 - ((0.254829592 * t_1437 + -0.284496736 * t2_1438 + 1.421413741 * t3_1439 + -1.453152027 * t4_1440 + 1.061405429 * t5_1441) * tmp_call_1443) in
                    let tmp_bop_1445 = 0.5 * (1.0 + e_1444) in
                    let integrand_res_1446 = tmp_call_1324 * (tmp_bop_1445 - untuple_1415) in
                    let val_1447 = arg_1318 * integrand_res_1446 in
                    {val_1447},
                  x_quads_1291, w_quads_1292) in
           let {untuple_1452} =
             reduceT(fn {real} (real x_1449, real y_1450) =>
                       let val_1451 = x_1449 + y_1450 in
                       {val_1451},
                     {0.0}, untuple_1448) in
           let g2pp_price_1453 = tmp_call_528 * untuple_1452 / 1.7724538509055159 in
           let rnbmonths_1454 = arg_14 * 12.0 in
           let nbmonths_1455 = trunc(rnbmonths_1454) in
           let m_1456 = 1 + nbmonths_1455 in
           let x_1457 = m_1456 - 1 in
           let tmp_bop_1460 = x_1457 - (x_1457 / 12 * 12) in
           let {y_1461, m_1462} = {2012 + (m_1456 - 1) / 12,
                                   tmp_bop_1460 + 1} in
           let {y_1463, m_1464} = if m_1462 <= 0
                                  then {y_1461 - 1, m_1462 + 12}
                                  else {y_1461, m_1462} in
           let tmp_bop_1467 = y_1463 - (y_1463 / 4 * 4) in
           let tmp_bop_1468 = y_1463 - (y_1463 / 100 * 100) in
           let tmp_bop_1469 = y_1463 - (y_1463 / 400 * 400) in
           let tmp_and_1470 = tmp_bop_1467 = 0 && not (tmp_bop_1468 = 0) || tmp_bop_1469 = 0 in
           let b_1471 = if m_1464 = 2 && tmp_and_1470
                        then 29
                        else if m_1464 = 2
                             then 28
                             else if m_1464 = 4 || m_1464 = 6 || m_1464 = 9 || m_1464 = 11
                                  then 30
                                  else 31 in
           let tmp_lit_1472 = if 1 < b_1471
                              then 1
                              else b_1471 in
           let ym_1473 = if m_1464 = 1 || m_1464 = 2
                         then 1461 * (y_1463 + 4800 - 1) / 4 + 367 * (m_1464 + 10) / 12 - (3 * (y_1463 + 4900 - 1) / 100 / 4)
                         else 1461 * (y_1463 + 4800) / 4 + 367 * (m_1464 - 2) / 12 - (3 * (y_1463 + 4900) / 100 / 4) in
           let tmp_1474 = ym_1473 + tmp_lit_1472 - 32075 - 2444238 in
           let resmin_1475 = tmp_1474 * 1440 + 720 in
           let tmp_call_1476 = toReal(resmin_1475) in
           let val_1477 = 12.0 * arg_22 / arg_17 in
           let tmp_call_1478 = trunc(val_1477) in
           let {soac_v_1633, soac_v_1634} =
             mapT(fn {real, real} (int i_1479) =>
                    let tmp_call_1480 = toReal(i_1479) in
                    let rnbmonths_1481 = tmp_call_1480 * arg_17 in
                    let nbmonths_1484 = trunc(rnbmonths_1481) in
                    let minutes_since_epoch_1489 = trunc(tmp_call_1476) in
                    let jul_1491 = minutes_since_epoch_1489 / 1440 in
                    let l_1492 = jul_1491 + 68569 + 2444238 in
                    let n_1493 = 4 * l_1492 / 146097 in
                    let l_1494 = l_1492 - ((146097 * n_1493 + 3) / 4) in
                    let i_1495 = 4000 * (l_1494 + 1) / 1461001 in
                    let l_1496 = l_1494 - (1461 * i_1495 / 4) + 31 in
                    let j_1500 = 80 * l_1496 / 2447 in
                    let d_1501 = l_1496 - (2447 * j_1500 / 80) in
                    let l_1503 = j_1500 / 11 in
                    let m_1518 = j_1500 + 2 - (12 * l_1503) in
                    let y_1519 = 100 * (n_1493 - 49) + i_1495 + l_1503 in
                    let daytime_1521 = minutes_since_epoch_1489 - (minutes_since_epoch_1489 / 1440 * 1440) in
                    let {y_1530, m_1535, d_1537, h_1538,
                         min_1539} = if daytime_1521 = 720
                                     then {y_1519, m_1518, d_1501, 12, 0}
                                     else let tmp_lit_1522 = daytime_1521 - (daytime_1521 / 60 * 60) in
                                          {y_1519, m_1518, d_1501,
                                           daytime_1521 / 60, tmp_lit_1522} in
                    let m_1540 = m_1535 + nbmonths_1484 in
                    let x_1541 = m_1540 - 1 in
                    let tmp_bop_1542 = x_1541 - (x_1541 / 12 * 12) in
                    let {y_1546, m_1547} = {y_1530 + (m_1540 - 1) / 12,
                                            tmp_bop_1542 + 1} in
                    let {y_1548, m_1562} = if m_1547 <= 0
                                           then {y_1546 - 1, m_1547 + 12}
                                           else {y_1546, m_1547} in
                    let tmp_bop_1566 = y_1548 - (y_1548 / 4 * 4) in
                    let tmp_bop_1574 = y_1548 - (y_1548 / 100 * 100) in
                    let tmp_bop_1579 = y_1548 - (y_1548 / 400 * 400) in
                    let tmp_and_1581 = tmp_bop_1566 = 0 && not (tmp_bop_1574 = 0) || tmp_bop_1579 = 0 in
                    let b_1582 = if m_1562 = 2 && tmp_and_1581
                                 then 29
                                 else if m_1562 = 2
                                      then 28
                                      else if m_1562 = 4 || m_1562 = 6 || m_1562 = 9 || m_1562 = 11
                                           then 30
                                           else 31 in
                    let tmp_lit_1583 = if d_1537 < b_1582
                                       then d_1537
                                       else b_1582 in
                    let ym_1584 = if m_1562 = 1 || m_1562 = 2
                                  then 1461 * (y_1548 + 4800 - 1) / 4 + 367 * (m_1562 + 10) / 12 - (3 * (y_1548 + 4900 - 1) / 100 / 4)
                                  else 1461 * (y_1548 + 4800) / 4 + 367 * (m_1562 - 2) / 12 - (3 * (y_1548 + 4900) / 100 / 4) in
                    let tmp_1585 = ym_1584 + tmp_lit_1583 - 32075 - 2444238 in
                    let resmin_1586 = tmp_1585 * 1440 + 720 in
                    let tmp_call_1590 = toReal(resmin_1586) in
                    let nbmonths_1591 = trunc(arg_17) in
                    let minutes_since_epoch_1592 = trunc(tmp_call_1590) in
                    let jul_1593 = minutes_since_epoch_1592 / 1440 in
                    let l_1594 = jul_1593 + 68569 + 2444238 in
                    let n_1595 = 4 * l_1594 / 146097 in
                    let l_1596 = l_1594 - ((146097 * n_1595 + 3) / 4) in
                    let i_1597 = 4000 * (l_1596 + 1) / 1461001 in
                    let l_1598 = l_1596 - (1461 * i_1597 / 4) + 31 in
                    let j_1599 = 80 * l_1598 / 2447 in
                    let d_1600 = l_1598 - (2447 * j_1599 / 80) in
                    let l_1601 = j_1599 / 11 in
                    let m_1602 = j_1599 + 2 - (12 * l_1601) in
                    let y_1603 = 100 * (n_1595 - 49) + i_1597 + l_1601 in
                    let daytime_1604 = minutes_since_epoch_1592 - (minutes_since_epoch_1592 / 1440 * 1440) in
                    let {y_1606, m_1607, d_1608, h_1609,
                         min_1610} = if daytime_1604 = 720
                                     then {y_1603, m_1602, d_1600, 12, 0}
                                     else let tmp_lit_1605 = daytime_1604 - (daytime_1604 / 60 * 60) in
                                          {y_1603, m_1602, d_1600,
                                           daytime_1604 / 60, tmp_lit_1605} in
                    let m_1611 = m_1607 + nbmonths_1591 in
                    let x_1612 = m_1611 - 1 in
                    let tmp_bop_1613 = x_1612 - (x_1612 / 12 * 12) in
                    let {y_1614, m_1615} = {y_1606 + (m_1611 - 1) / 12,
                                            tmp_bop_1613 + 1} in
                    let {y_1616, m_1617} = if m_1615 <= 0
                                           then {y_1614 - 1, m_1615 + 12}
                                           else {y_1614, m_1615} in
                    let tmp_bop_1620 = y_1616 - (y_1616 / 4 * 4) in
                    let tmp_bop_1621 = y_1616 - (y_1616 / 100 * 100) in
                    let tmp_bop_1622 = y_1616 - (y_1616 / 400 * 400) in
                    let tmp_and_1623 = tmp_bop_1620 = 0 && not (tmp_bop_1621 = 0) || tmp_bop_1622 = 0 in
                    let b_1624 = if m_1617 = 2 && tmp_and_1623
                                 then 29
                                 else if m_1617 = 2
                                      then 28
                                      else if m_1617 = 4 || m_1617 = 6 || m_1617 = 9 || m_1617 = 11
                                           then 30
                                           else 31 in
                    let tmp_lit_1628 = if d_1608 < b_1624
                                       then d_1608
                                       else b_1624 in
                    let ym_1629 = if m_1617 = 1 || m_1617 = 2
                                  then 1461 * (y_1616 + 4800 - 1) / 4 + 367 * (m_1617 + 10) / 12 - (3 * (y_1616 + 4900 - 1) / 100 / 4)
                                  else 1461 * (y_1616 + 4800) / 4 + 367 * (m_1617 - 2) / 12 - (3 * (y_1616 + 4900) / 100 / 4) in
                    let tmp_1630 = ym_1629 + tmp_lit_1628 - 32075 - 2444238 in
                    let resmin_1631 = tmp_1630 * 1440 + 720 in
                    let tmp_call_1632 = toReal(resmin_1631) in
                    {tmp_call_1590, tmp_call_1632},
                  iota(tmp_call_1478)) in
           let tmp_repl_1635 = replicate(tmp_call_1478, 0.0) in
           let tmp_size_1636 = size(0, soac_v_1633) in
           let tmp_e_1637 = tmp_call_1478 = tmp_size_1636 in
           let zip_assert_1638 = assert(tmp_e_1637) in
           let tmp_size_1639 = size(0, soac_v_1633) in
           let tmp_size_1640 = size(0, soac_v_1634) in
           let tmp_e_1641 = tmp_size_1639 = tmp_size_1640 in
           let zip_assert_1642 = assert(tmp_e_1641) in
           let comb_cert_1643 = conjoin(zip_assert_1638, zip_assert_1642) in
           let {lvl_1663, t0_1664, tn_1666} =
             <comb_cert_1643>
             reduceT(fn {real, real, real} (real arg_1644, real arg_1645,
                                            real arg_1646, real arg_1647,
                                            real arg_1648, real arg_1649) =>
                       let tmp_bop_1650 = (arg_1649 - 16834320.0) / 1440.0 in
                       let tmp_bop_1651 = tmp_bop_1650 / 365.0 in
                       let val_1652 = -(0.03 * tmp_bop_1651) in
                       let tmp_call_1653 = exp(val_1652) in
                       let tmp_bop_1655 = (arg_1649 - arg_1648) / 1440.0 in
                       let tmp_bop_1656 = tmp_bop_1655 / 365.0 in
                       let tmp_lit_1657 = if arg_1645 < arg_1648
                                          then arg_1645
                                          else arg_1648 in
                       let tmp_lit_1658 = if arg_1646 < arg_1649
                                          then arg_1649
                                          else arg_1646 in
                       let {tup_elem_1659, tup_elem_1660,
                            tup_elem_1661} = {arg_1644 + tmp_call_1653 * tmp_bop_1656,
                                              tmp_lit_1657, tmp_lit_1658} in
                       {tup_elem_1659, tmp_lit_1657, tmp_lit_1658},
                     {0.0, 168307199.0, 3600.0}, tmp_repl_1635, soac_v_1633,
                     soac_v_1634) in
           let tmp_bop_1667 = (t0_1664 - 16834320.0) / 1440.0 in
           let tmp_bop_1668 = tmp_bop_1667 / 365.0 in
           let val_1669 = -(0.03 * tmp_bop_1668) in
           let tmp_call_1670 = exp(val_1669) in
           let tmp_bop_1671 = (tn_1666 - 16834320.0) / 1440.0 in
           let tmp_bop_1672 = tmp_bop_1671 / 365.0 in
           let val_1673 = -(0.03 * tmp_bop_1672) in
           let tmp_call_1674 = exp(val_1673) in
           let strike_1675 = (tmp_call_1670 - tmp_call_1674) / lvl_1663 in
           let tmp_bop_1676 = (tmp_call_1476 - 16834320.0) / 1440.0 in
           let sqrtt_1677 = tmp_bop_1676 / 365.0 in
           let n_1678 = size(0, soac_v_1633) in
           let tmp_repl_1679 = replicate(n_1678, 0.0) in
           let tmp_size_1680 = size(0, soac_v_1633) in
           let tmp_e_1681 = n_1678 = tmp_size_1680 in
           let zip_assert_1682 = assert(tmp_e_1681) in
           let tmp_size_1683 = size(0, soac_v_1633) in
           let tmp_size_1684 = size(0, soac_v_1634) in
           let tmp_e_1685 = tmp_size_1683 = tmp_size_1684 in
           let zip_assert_1686 = assert(tmp_e_1685) in
           let comb_cert_1687 = conjoin(zip_assert_1682, zip_assert_1686) in
           let {lvl_1708, t0_1709, tn_1710} =
             <comb_cert_1687>
             reduceT(fn {real, real, real} (real arg_1688, real arg_1689,
                                            real arg_1690, real arg_1691,
                                            real arg_1692, real arg_1693) =>
                       let tmp_bop_1694 = (arg_1693 - 16834320.0) / 1440.0 in
                       let tmp_bop_1695 = tmp_bop_1694 / 365.0 in
                       let val_1696 = -(0.03 * tmp_bop_1695) in
                       let tmp_call_1697 = exp(val_1696) in
                       let tmp_bop_1701 = (arg_1693 - arg_1692) / 1440.0 in
                       let tmp_bop_1702 = tmp_bop_1701 / 365.0 in
                       let tmp_lit_1703 = if arg_1689 < arg_1692
                                          then arg_1689
                                          else arg_1692 in
                       let tmp_lit_1704 = if arg_1690 < arg_1693
                                          then arg_1693
                                          else arg_1690 in
                       let {tup_elem_1705, tup_elem_1706,
                            tup_elem_1707} = {arg_1688 + tmp_call_1697 * tmp_bop_1702,
                                              tmp_lit_1703, tmp_lit_1704} in
                       {tup_elem_1705, tmp_lit_1703, tmp_lit_1704},
                     {0.0, 168307199.0, 3600.0}, tmp_repl_1679, soac_v_1633,
                     soac_v_1634) in
           let tmp_bop_1711 = (t0_1709 - 16834320.0) / 1440.0 in
           let tmp_bop_1712 = tmp_bop_1711 / 365.0 in
           let val_1713 = -(0.03 * tmp_bop_1712) in
           let tmp_call_1714 = exp(val_1713) in
           let tmp_bop_1715 = (tn_1710 - 16834320.0) / 1440.0 in
           let tmp_bop_1716 = tmp_bop_1715 / 365.0 in
           let val_1717 = -(0.03 * tmp_bop_1716) in
           let tmp_call_1718 = exp(val_1717) in
           let s0_1719 = (tmp_call_1714 - tmp_call_1718) / lvl_1708 in
           let val_1720 = s0_1719 / strike_1675 in
           let tmp_call_1721 = log(val_1720) in
           let d1_1722 = tmp_call_1721 / (arg_23 * sqrtt_1677) + 0.5 * arg_23 * sqrtt_1677 in
           let d2_1723 = d1_1722 - (arg_23 * sqrtt_1677) in
           let u_1724 = d1_1722 / 1.4142135623730951 in
           let e_1757 = if u_1724 < 0.0
                        then let x_1725 = -u_1724 in
                             let t_1726 = 1.0 / (1.0 + 0.3275911 * x_1725) in
                             let t2_1730 = t_1726 * t_1726 in
                             let t3_1733 = t_1726 * t2_1730 in
                             let t4_1734 = t2_1730 * t2_1730 in
                             let t5_1735 = t2_1730 * t3_1733 in
                             let val_1736 = -(x_1725 * x_1725) in
                             let tmp_call_1737 = exp(val_1736) in
                             let tmp_neg_1738 = 1.0 - ((0.254829592 * t_1726 + -0.284496736 * t2_1730 + 1.421413741 * t3_1733 + -1.453152027 * t4_1734 + 1.061405429 * t5_1735) * tmp_call_1737) in
                             -tmp_neg_1738
                        else let t_1744 = 1.0 / (1.0 + 0.3275911 * u_1724) in
                             let t2_1745 = t_1744 * t_1744 in
                             let t3_1746 = t_1744 * t2_1745 in
                             let t4_1747 = t2_1745 * t2_1745 in
                             let t5_1748 = t2_1745 * t3_1746 in
                             let val_1749 = -(u_1724 * u_1724) in
                             let tmp_call_1750 = exp(val_1749) in
                             1.0 - ((0.254829592 * t_1744 + -0.284496736 * t2_1745 + 1.421413741 * t3_1746 + -1.453152027 * t4_1747 + 1.061405429 * t5_1748) * tmp_call_1750) in
           let tmp_bop_1760 = 0.5 * (1.0 + e_1757) in
           let u_1761 = d2_1723 / 1.4142135623730951 in
           let e_1793 = if u_1761 < 0.0
                        then let x_1762 = -u_1761 in
                             let t_1763 = 1.0 / (1.0 + 0.3275911 * x_1762) in
                             let t2_1764 = t_1763 * t_1763 in
                             let t3_1765 = t_1763 * t2_1764 in
                             let t4_1771 = t2_1764 * t2_1764 in
                             let t5_1772 = t2_1764 * t3_1765 in
                             let val_1773 = -(x_1762 * x_1762) in
                             let tmp_call_1774 = exp(val_1773) in
                             let tmp_neg_1775 = 1.0 - ((0.254829592 * t_1763 + -0.284496736 * t2_1764 + 1.421413741 * t3_1765 + -1.453152027 * t4_1771 + 1.061405429 * t5_1772) * tmp_call_1774) in
                             -tmp_neg_1775
                        else let t_1776 = 1.0 / (1.0 + 0.3275911 * u_1761) in
                             let t2_1777 = t_1776 * t_1776 in
                             let t3_1785 = t_1776 * t2_1777 in
                             let t4_1786 = t2_1777 * t2_1777 in
                             let t5_1787 = t2_1777 * t3_1785 in
                             let val_1789 = -(u_1761 * u_1761) in
                             let tmp_call_1792 = exp(val_1789) in
                             1.0 - ((0.254829592 * t_1776 + -0.284496736 * t2_1777 + 1.421413741 * t3_1785 + -1.453152027 * t4_1786 + 1.061405429 * t5_1787) * tmp_call_1792) in
           let tmp_bop_1795 = 0.5 * (1.0 + e_1793) in
           let market_price_1796 = lvl_1708 * (s0_1719 * tmp_bop_1760 - (strike_1675 * tmp_bop_1795)) in
           let res_1797 = (g2pp_price_1453 - market_price_1796) / market_price_1796 in
           let val_1800 = res_1797 * res_1797 in
           {val_1800},
         tmp_arr_2, tmp_arr_5, tmp_arr_9, tmp_arr_12) in
  let {untuple_1805} =
    reduceT(fn {real} (real x_1802, real y_1803) =>
              let val_1804 = x_1802 + y_1803 in
              {val_1804},
            {0.0}, untuple_1801) in
  let val_1806 = untuple_1805 / 196.0 in
  let tmp_call_1807 = sqrt(val_1806) in
  let rms_1808 = 100.0 * tmp_call_1807 in
  rms_1808
