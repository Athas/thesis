fun real main() =
  let {tup_arr_cert_1, tup_arr_elem_2, tup_arr_elem_3, tup_arr_elem_6,
       tup_arr_elem_7} =
    {Checked,
     [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0,
      30.0],
     [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0,
      2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0,
      3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0,
      5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0,
      7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0,
      8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
      9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
      10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 15.0, 15.0, 15.0, 15.0, 15.0,
      15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 20.0, 20.0, 20.0,
      20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 25.0,
      25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,
      25.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0,
      30.0, 30.0, 30.0],
     [1.052, 0.81485, 0.6165, 0.46995, 0.38295, 0.3325, 0.3016, 0.2815, 0.26435,
      0.2496, 0.2516, 0.28835, 0.27155, 0.23465, 0.61445, 0.54805, 0.46795,
      0.3919, 0.3434, 0.3083, 0.28655, 0.2697, 0.25775, 0.2443, 0.26495,
      0.28195, 0.26845, 0.20995, 0.5835, 0.49255, 0.42825, 0.3695, 0.329,
      0.3022, 0.28165, 0.26615, 0.25485, 0.24375, 0.2718, 0.28135, 0.26865,
      0.2131, 0.5415, 0.46235, 0.403, 0.3559, 0.3232, 0.29675, 0.27715, 0.26385,
      0.254, 0.2454, 0.27845, 0.2821, 0.2678, 0.2131, 0.517, 0.446, 0.3903,
      0.34755, 0.3166, 0.29305, 0.2745, 0.2639, 0.2534, 0.2499, 0.28315, 0.2825,
      0.277, 0.21175, 0.478, 0.42105, 0.37715, 0.3378, 0.311, 0.2895, 0.2745,
      0.264, 0.2573, 0.25475, 0.28815, 0.28195, 0.26015, 0.2097, 0.452, 0.4074,
      0.368, 0.3307, 0.30645, 0.2877, 0.27475, 0.2664, 0.26155, 0.26035, 0.292,
      0.2825, 0.25685, 0.2081, 0.43395, 0.39445, 0.35885, 0.3281, 0.30395,
      0.28745, 0.2767, 0.27065, 0.26625, 0.26625, 0.2921, 0.2814, 0.25265,
      0.2083, 0.42285, 0.3857, 0.3521, 0.3239, 0.30285, 0.2895, 0.2799, 0.27485,
      0.2712, 0.27205, 0.29205, 0.27855, 0.24945, 0.219, 0.41765, 0.38095,
      0.34795, 0.3217, 0.30365, 0.2916, 0.2842, 0.27985, 0.2769, 0.2775, 0.306,
      0.2763, 0.2458, 0.22, 0.37905, 0.35465, 0.33505, 0.31725, 0.3008, 0.29075,
      0.28365, 0.2787, 0.27385, 0.2709, 0.2689, 0.24225, 0.2096, 0.18285,
      0.37975, 0.3605, 0.3407, 0.321, 0.3063, 0.29315, 0.28395, 0.2777, 0.27205,
      0.26675, 0.24875, 0.21735, 0.1939, 0.17205, 0.38115, 0.3627, 0.34425,
      0.3222, 0.3084, 0.2941, 0.28285, 0.2751, 0.2663, 0.26055, 0.2338, 0.20735,
      0.1823, 0.1686, 0.38285, 0.3633, 0.34125, 0.3188, 0.30305, 0.2888, 0.2748,
      0.26725, 0.25985, 0.25165, 0.2267, 0.1989, 0.18115, 0.16355]} in
  let {untuple_1410} =
    mapT(fn {real} (real arg_8, real arg_11, real arg_12, real arg_13) =>
           let val_16 = arg_8 * 12.0 in
           let nbmonths_19 = trunc(val_16) in
           let m_20 = 1 + nbmonths_19 in
           let val_21 = m_20 - 1 in
           let tmp_bop_24 = val_21 - (val_21 / 12 * 12) in
           let {y_25, m_27} = {2012 + (m_20 - 1) / 12, tmp_bop_24 + 1} in
           let {y_29, m_31} =
             if m_27 <= 0
             then {y_25 - 1, m_27 + 12}
             else {y_25, m_27} in
           let tmp_bop_34 = y_29 - (y_29 / 4 * 4) in
           let tmp_bop_35 = y_29 - (y_29 / 100 * 100) in
           let tmp_bop_37 = y_29 - (y_29 / 400 * 400) in
           let tmp_and_40 = tmp_bop_34 = 0 && not (tmp_bop_35 = 0) || tmp_bop_37
                            = 0 in
           let val_42 =
             if m_31 = 2 && tmp_and_40
             then 29
             else if m_31 = 2
                  then 28
                  else if m_31 = 4 || m_31 = 6 || m_31 = 9 || m_31 = 11
                       then 30
                       else 31 in
           let tmp_lit_47 =
             if 1 < val_42
             then 1
             else val_42 in
           let ym_53 =
             if m_31 = 1 || m_31 = 2
             then 1461 * (y_29 + 4800 - 1) / 4 + 367 * (m_31 + 10) / 12 - (3
                                                                           * (y_29
                                                                              + 4900
                                                                              - 1)
                                                                           / 100
                                                                           / 4)
             else 1461 * (y_29 + 4800) / 4 + 367 * (m_31 - 2) / 12 - (3 * (y_29
                                                                           + 4900)
                                                                      / 100
                                                                      / 4) in
           let tmp_57 = ym_53 + tmp_lit_47 - 32075 - 2444238 in
           let resmin_63 = tmp_57 * 1440 + 720 in
           let tmp_call_65 = toReal(resmin_63) in
           let val_68 = 12.0 * arg_12 / arg_11 in
           let tmp_call_70 = trunc(val_68) in
           let {soac_v_221, soac_v_222} =
             mapT(fn {real, real} (int i_73) =>
                    let tmp_call_75 = toReal(i_73) in
                    let val_80 = tmp_call_75 * arg_11 in
                    let nbmonths_92 = trunc(val_80) in
                    let val_93 = trunc(tmp_call_65) in
                    let jul_95 = val_93 / 1440 in
                    let l_96 = jul_95 + 68569 + 2444238 in
                    let n_99 = 4 * l_96 / 146097 in
                    let l_103 = l_96 - ((146097 * n_99 + 3) / 4) in
                    let i_104 = 4000 * (l_103 + 1) / 1461001 in
                    let l_106 = l_103 - (1461 * i_104 / 4) + 31 in
                    let j_111 = 80 * l_106 / 2447 in
                    let d_114 = l_106 - (2447 * j_111 / 80) in
                    let l_115 = j_111 / 11 in
                    let m_116 = j_111 + 2 - (12 * l_115) in
                    let y_119 = 100 * (n_99 - 49) + i_104 + l_115 in
                    let daytime_120 = val_93 - (val_93 / 1440 * 1440) in
                    let {y_128, m_131, d_132, h_134, min_135} =
                      if daytime_120 = 720
                      then {y_119, m_116, d_114, 12, 0}
                      else let tmp_lit_121 = daytime_120 - (daytime_120 / 60
                                                            * 60) in
                           {y_119, m_116, d_114, daytime_120 / 60,
                            tmp_lit_121} in
                    let m_141 = m_131 + nbmonths_92 in
                    let val_145 = m_141 - 1 in
                    let tmp_bop_146 = val_145 - (val_145 / 12 * 12) in
                    let {y_147, m_148} = {y_128 + (m_141 - 1) / 12, tmp_bop_146
                                          + 1} in
                    let {y_149, m_150} =
                      if m_148 <= 0
                      then {y_147 - 1, m_148 + 12}
                      else {y_147, m_148} in
                    let tmp_bop_151 = y_149 - (y_149 / 4 * 4) in
                    let tmp_bop_152 = y_149 - (y_149 / 100 * 100) in
                    let tmp_bop_154 = y_149 - (y_149 / 400 * 400) in
                    let tmp_and_157 = tmp_bop_151 = 0 && not (tmp_bop_152 = 0)
                                      || tmp_bop_154 = 0 in
                    let val_158 =
                      if m_150 = 2 && tmp_and_157
                      then 29
                      else if m_150 = 2
                           then 28
                           else if m_150 = 4 || m_150 = 6 || m_150 = 9 || m_150
                                = 11
                                then 30
                                else 31 in
                    let tmp_lit_159 =
                      if d_132 < val_158
                      then d_132
                      else val_158 in
                    let ym_161 =
                      if m_150 = 1 || m_150 = 2
                      then 1461 * (y_149 + 4800 - 1) / 4 + 367 * (m_150 + 10)
                           / 12 - (3 * (y_149 + 4900 - 1) / 100 / 4)
                      else 1461 * (y_149 + 4800) / 4 + 367 * (m_150 - 2) / 12
                           - (3 * (y_149 + 4900) / 100 / 4) in
                    let tmp_163 = ym_161 + tmp_lit_159 - 32075 - 2444238 in
                    let resmin_164 = tmp_163 * 1440 + 720 in
                    let tmp_call_166 = toReal(resmin_164) in
                    let nbmonths_169 = trunc(arg_11) in
                    let val_170 = trunc(tmp_call_166) in
                    let jul_171 = val_170 / 1440 in
                    let l_173 = jul_171 + 68569 + 2444238 in
                    let n_174 = 4 * l_173 / 146097 in
                    let l_178 = l_173 - ((146097 * n_174 + 3) / 4) in
                    let i_182 = 4000 * (l_178 + 1) / 1461001 in
                    let l_184 = l_178 - (1461 * i_182 / 4) + 31 in
                    let j_186 = 80 * l_184 / 2447 in
                    let d_187 = l_184 - (2447 * j_186 / 80) in
                    let l_189 = j_186 / 11 in
                    let m_190 = j_186 + 2 - (12 * l_189) in
                    let y_192 = 100 * (n_174 - 49) + i_182 + l_189 in
                    let daytime_193 = val_170 - (val_170 / 1440 * 1440) in
                    let {y_196, m_197, d_200, h_201, min_203} =
                      if daytime_193 = 720
                      then {y_192, m_190, d_187, 12, 0}
                      else let tmp_lit_195 = daytime_193 - (daytime_193 / 60
                                                            * 60) in
                           {y_192, m_190, d_187, daytime_193 / 60,
                            tmp_lit_195} in
                    let m_204 = m_197 + nbmonths_169 in
                    let val_205 = m_204 - 1 in
                    let tmp_bop_206 = val_205 - (val_205 / 12 * 12) in
                    let {y_207, m_208} = {y_196 + (m_204 - 1) / 12, tmp_bop_206
                                          + 1} in
                    let {y_209, m_210} =
                      if m_208 <= 0
                      then {y_207 - 1, m_208 + 12}
                      else {y_207, m_208} in
                    let tmp_bop_211 = y_209 - (y_209 / 4 * 4) in
                    let tmp_bop_212 = y_209 - (y_209 / 100 * 100) in
                    let tmp_bop_213 = y_209 - (y_209 / 400 * 400) in
                    let tmp_and_214 = tmp_bop_211 = 0 && not (tmp_bop_212 = 0)
                                      || tmp_bop_213 = 0 in
                    let val_215 =
                      if m_210 = 2 && tmp_and_214
                      then 29
                      else if m_210 = 2
                           then 28
                           else if m_210 = 4 || m_210 = 6 || m_210 = 9 || m_210
                                = 11
                                then 30
                                else 31 in
                    let tmp_lit_216 =
                      if d_200 < val_215
                      then d_200
                      else val_215 in
                    let ym_217 =
                      if m_210 = 1 || m_210 = 2
                      then 1461 * (y_209 + 4800 - 1) / 4 + 367 * (m_210 + 10)
                           / 12 - (3 * (y_209 + 4900 - 1) / 100 / 4)
                      else 1461 * (y_209 + 4800) / 4 + 367 * (m_210 - 2) / 12
                           - (3 * (y_209 + 4900) / 100 / 4) in
                    let tmp_218 = ym_217 + tmp_lit_216 - 32075 - 2444238 in
                    let resmin_219 = tmp_218 * 1440 + 720 in
                    let tmp_call_220 = toReal(resmin_219) in
                    {tmp_call_166, tmp_call_220},
                  iota(tmp_call_70)) in
           let val_223 = replicate(tmp_call_70, 0.0) in
           let tmp_size_224 = size(0, soac_v_221) in
           let tmp_e_225 = tmp_call_70 = tmp_size_224 in
           let zip_assert_226 = assert(tmp_e_225) in
           let tmp_size_227 = size(0, soac_v_221) in
           let tmp_size_228 = size(0, soac_v_222) in
           let tmp_e_229 = tmp_size_227 = tmp_size_228 in
           let zip_assert_230 = assert(tmp_e_229) in
           let comb_cert_231 = conjoin(zip_assert_226, zip_assert_230) in
           let {tmp_red2_249, tmp_red2_250, tmp_red2_251} =
             <comb_cert_231>
             reduceT(fn {real, real, real} (real arg_232, real arg_233,
                                            real arg_234, real arg_235,
                                            real arg_236, real arg_237) =>
                       let tmp_bop_238 = (arg_237 - 16834320.0) / 1440.0 in
                       let tmp_bop_239 = tmp_bop_238 / 365.0 in
                       let val_240 = -(0.03 * tmp_bop_239) in
                       let tmp_call_241 = exp(val_240) in
                       let tmp_bop_242 = (arg_237 - arg_236) / 1440.0 in
                       let tmp_bop_243 = tmp_bop_242 / 365.0 in
                       let tmp_lit_244 =
                         if arg_233 < arg_236
                         then arg_233
                         else arg_236 in
                       let tmp_lit_245 =
                         if arg_234 < arg_237
                         then arg_237
                         else arg_234 in
                       let {tup_elem_246, tup_elem_247, tup_elem_248} = {arg_232
                                                                         + tmp_call_241
                                                                         * tmp_bop_243,
                                                                         tmp_lit_244,
                                                                         tmp_lit_245} in
                       {tup_elem_246, tmp_lit_244, tmp_lit_245},
                     {0.0, 168307199.0, 3600.0}, val_223, soac_v_221,
                     soac_v_222) in
           let tmp_bop_252 = (tmp_red2_250 - 16834320.0) / 1440.0 in
           let tmp_bop_253 = tmp_bop_252 / 365.0 in
           let val_254 = -(0.03 * tmp_bop_253) in
           let tmp_call_255 = exp(val_254) in
           let tmp_bop_256 = (tmp_red2_251 - 16834320.0) / 1440.0 in
           let tmp_bop_257 = tmp_bop_256 / 365.0 in
           let val_258 = -(0.03 * tmp_bop_257) in
           let tmp_call_259 = exp(val_258) in
           let strike_260 = (tmp_call_255 - tmp_call_259) / tmp_red2_249 in
           let tmp_size_262 = size(0, soac_v_221) in
           let {untuple_273} =
             mapT(fn {real} (int i_263) =>
                    let tmp_bop_264 = (soac_v_222[i_263] - soac_v_221[i_263])
                                      / 1440.0 in
                    let tau_266 = tmp_bop_264 / 365.0 in
                    let val_268 =
                      if i_263 = tmp_size_262 - 1
                      then 1.0 + tau_266 * strike_260
                      else tau_266 * strike_260 in
                    {val_268},
                  iota(tmp_size_262)) in
           let tmp_bop_275 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let tmat0_278 = tmp_bop_275 / 365.0 in
           let val_279 = -(0.02453 * tmat0_278) in
           let tmp_call_281 = exp(val_279) in
           let ba_282 = (1.0 - tmp_call_281) / 0.02453 in
           let val_284 = -(0.98376 * tmat0_278) in
           let tmp_call_285 = exp(val_284) in
           let bb_287 = (1.0 - tmp_call_285) / 0.98376 in
           let val_288 = -(0.02453 * tmat0_278) in
           let tmp_call_293 = exp(val_288) in
           let exp2xtau_295 = tmp_call_293 * tmp_call_293 in
           let t1_296 = 0.9556596754408898 * (tmat0_278 + 81.53281695882593
                                              * tmp_call_293
                                              - (20.383204239706483
                                                 * exp2xtau_295)
                                              - 61.149612719119446) in
           let val_298 = -(0.98376 * tmat0_278) in
           let tmp_call_301 = exp(val_298) in
           let exp2xtau_302 = tmp_call_301 * tmp_call_301 in
           let t2_303 = 0.014460761693212401 * (tmat0_278 + 2.033016182808815
                                                * tmp_call_301
                                                - (0.5082540457022038
                                                   * exp2xtau_302)
                                                - 1.5247621371066113) in
           let val_304 = -(1.00829 * tmat0_278) in
           let tmp_call_305 = exp(val_304) in
           let tmp_bop_307 = (1.0 - tmp_call_305) / 1.00829 in
           let t3_308 = -0.19373336527812574 * (tmat0_278 - ba_282 - bb_287
                                                + tmp_bop_307) in
           let {v0_mat_312, dummyA_313, dummyB_315} = {t1_296 + t2_303 + t3_308,
                                                       ba_282, bb_287} in
           let tmp_bop_316 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let tmp_bop_320 = tmp_bop_316 / 365.0 in
           let val_321 = -(0.03 * tmp_bop_320) in
           let tmp_call_324 = exp(val_321) in
           let val_326 = -(0.04906 * tmat0_278) in
           let tmp_call_329 = exp(val_326) in
           let val_330 = (1.0 - tmp_call_329) / 0.04906 in
           let tmp_call_331 = sqrt(val_330) in
           let sigmax_333 = 0.02398 * tmp_call_331 in
           let val_334 = -(1.96752 * tmat0_278) in
           let tmp_call_336 = exp(val_334) in
           let val_337 = (1.0 - tmp_call_336) / 1.96752 in
           let tmp_call_338 = sqrt(val_337) in
           let sigmay_340 = 0.1183 * tmp_call_338 in
           let val_341 = -(1.00829 * tmat0_278) in
           let tmp_call_346 = exp(val_341) in
           let tmp_bop_348 = (1.0 - tmp_call_346) / 1.00829 in
           let rhoxy_349 = -0.0023375512159999998 / (sigmax_333 * sigmay_340)
                           * tmp_bop_348 in
           let rhoxyc_353 = 1.0 - (rhoxy_349 * rhoxy_349) in
           let rhoxycs_354 = sqrt(rhoxyc_353) in
           let t2_355 = rhoxy_349 / (sigmax_333 * rhoxycs_354) in
           let sigmay_rhoxycs_356 = sigmay_340 * rhoxycs_354 in
           let t4_357 = rhoxy_349 * sigmay_340 / sigmax_333 in
           let tmp_bop_358 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let ts_359 = tmp_bop_358 / 365.0 in
           let tmp_bop_360 = (tmp_call_65 - tmp_call_65) / 1440.0 in
           let tmatt_362 = tmp_bop_360 / 365.0 in
           let tmp_bop_363 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let tmat0_364 = tmp_bop_363 / 365.0 in
           let tmp_bop_368 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let tmats_369 = tmp_bop_368 / 365.0 in
           let tmp_bop_371 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let t0_372 = tmp_bop_371 / 365.0 in
           let val_378 = -(0.02453 * ts_359) in
           let tmp_call_380 = exp(val_378) in
           let tmp2_383 = 1.0 - tmp_call_380 in
           let val_384 = -(0.02453 * tmatt_362) in
           let tmp_call_386 = exp(val_384) in
           let val_387 = -(0.02453 * (tmats_369 + ts_359)) in
           let tmp_call_389 = exp(val_387) in
           let tmp5_390 = tmp_call_386 - tmp_call_389 in
           let val_392 = -(0.98376 * tmatt_362) in
           let tmp_call_393 = exp(val_392) in
           let val_394 = -(0.98376 * tmat0_364) - (0.02453 * t0_372) in
           let tmp_call_399 = exp(val_394) in
           let tmp6_401 = tmp_call_393 - tmp_call_399 in
           let tmp_neg_402 = 0.858792992801827 * tmp2_383 - (0.4778298377204449
                                                             * tmp5_390)
                             - (-0.0023566034822682085 * tmp6_401) in
           let mux_403 = -tmp_neg_402 in
           let tmp_bop_404 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let ts_405 = tmp_bop_404 / 365.0 in
           let tmp_bop_406 = (tmp_call_65 - tmp_call_65) / 1440.0 in
           let tmatt_407 = tmp_bop_406 / 365.0 in
           let tmp_bop_408 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let tmat0_409 = tmp_bop_408 / 365.0 in
           let tmp_bop_410 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let tmats_411 = tmp_bop_410 / 365.0 in
           let tmp_bop_412 = (tmp_call_65 - 16834320.0) / 1440.0 in
           let t0_413 = tmp_bop_412 / 365.0 in
           let val_416 = -(0.98376 * ts_405) in
           let tmp_call_417 = exp(val_416) in
           let tmp2_418 = 1.0 - tmp_call_417 in
           let val_423 = -(0.98376 * tmatt_407) in
           let tmp_call_424 = exp(val_423) in
           let val_425 = -(0.98376 * (tmats_411 + ts_405)) in
           let tmp_call_426 = exp(val_425) in
           let tmp5_427 = tmp_call_424 - tmp_call_426 in
           let val_428 = -(0.02453 * tmatt_407) in
           let tmp_call_429 = exp(val_428) in
           let val_430 = -(0.02453 * tmat0_409) - (0.98376 * t0_413) in
           let tmp_call_434 = exp(val_430) in
           let tmp6_435 = tmp_call_429 - tmp_call_434 in
           let tmp_neg_436 = -0.08240592094585045 * tmp2_418
                             - (0.007230380846606201 * tmp5_427)
                             - (-0.09451007915679466 * tmp6_435) in
           let muy_437 = -tmp_neg_436 in
           let tmp_size_438 = size(0, soac_v_222) in
           let tmp_size_440 = size(0, untuple_273) in
           let tmp_e_441 = tmp_size_438 = tmp_size_440 in
           let zip_assert_442 = assert(tmp_e_441) in
           let {soac_v_576, soac_v_579, soac_v_588, soac_v_589, soac_v_590,
                soac_v_592} =
             <zip_assert_442>
             mapT(fn {real, real, real, real, real, real} (real arg_446,
                                                           real arg_447) =>
                    let tmp_bop_451 = (arg_446 - 16834320.0) / 1440.0 in
                    let val_455 = tmp_bop_451 / 365.0 in
                    let val_456 = -(0.02453 * val_455) in
                    let tmp_call_458 = exp(val_456) in
                    let ba_461 = (1.0 - tmp_call_458) / 0.02453 in
                    let val_463 = -(0.98376 * val_455) in
                    let tmp_call_465 = exp(val_463) in
                    let bb_467 = (1.0 - tmp_call_465) / 0.98376 in
                    let val_468 = -(0.02453 * val_455) in
                    let tmp_call_469 = exp(val_468) in
                    let exp2xtau_470 = tmp_call_469 * tmp_call_469 in
                    let t1_471 = 0.9556596754408898 * (val_455
                                                       + 81.53281695882593
                                                       * tmp_call_469
                                                       - (20.383204239706483
                                                          * exp2xtau_470)
                                                       - 61.149612719119446) in
                    let val_472 = -(0.98376 * val_455) in
                    let tmp_call_474 = exp(val_472) in
                    let exp2xtau_479 = tmp_call_474 * tmp_call_474 in
                    let t2_481 = 0.014460761693212401 * (val_455
                                                         + 2.033016182808815
                                                         * tmp_call_474
                                                         - (0.5082540457022038
                                                            * exp2xtau_479)
                                                         - 1.5247621371066113) in
                    let val_484 = -(1.00829 * val_455) in
                    let tmp_call_489 = exp(val_484) in
                    let tmp_bop_491 = (1.0 - tmp_call_489) / 1.00829 in
                    let t3_493 = -0.19373336527812574 * (val_455 - ba_461
                                                         - bb_467
                                                         + tmp_bop_491) in
                    let {v0_end_497, dummyA_498, dummyB_499} = {t1_471 + t2_481
                                                                + t3_493,
                                                                ba_461,
                                                                bb_467} in
                    let tmp_bop_500 = (arg_446 - tmp_call_65) / 1440.0 in
                    let val_501 = tmp_bop_500 / 365.0 in
                    let val_502 = -(0.02453 * val_501) in
                    let tmp_call_503 = exp(val_502) in
                    let ba_504 = (1.0 - tmp_call_503) / 0.02453 in
                    let val_505 = -(0.98376 * val_501) in
                    let tmp_call_506 = exp(val_505) in
                    let bb_507 = (1.0 - tmp_call_506) / 0.98376 in
                    let val_508 = -(0.02453 * val_501) in
                    let tmp_call_509 = exp(val_508) in
                    let exp2xtau_510 = tmp_call_509 * tmp_call_509 in
                    let t1_511 = 0.9556596754408898 * (val_501
                                                       + 81.53281695882593
                                                       * tmp_call_509
                                                       - (20.383204239706483
                                                          * exp2xtau_510)
                                                       - 61.149612719119446) in
                    let val_512 = -(0.98376 * val_501) in
                    let tmp_call_513 = exp(val_512) in
                    let exp2xtau_517 = tmp_call_513 * tmp_call_513 in
                    let t2_519 = 0.014460761693212401 * (val_501
                                                         + 2.033016182808815
                                                         * tmp_call_513
                                                         - (0.5082540457022038
                                                            * exp2xtau_517)
                                                         - 1.5247621371066113) in
                    let val_520 = -(1.00829 * val_501) in
                    let tmp_call_523 = exp(val_520) in
                    let tmp_bop_524 = (1.0 - tmp_call_523) / 1.00829 in
                    let t3_527 = -0.19373336527812574 * (val_501 - ba_504
                                                         - bb_507
                                                         + tmp_bop_524) in
                    let {vt_end_532, bai_534, bbi_536} = {t1_511 + t2_519
                                                          + t3_527, ba_504,
                                                          bb_507} in
                    let tmp_bop_538 = (arg_446 - 16834320.0) / 1440.0 in
                    let tmp_bop_540 = tmp_bop_538 / 365.0 in
                    let val_541 = -(0.03 * tmp_bop_540) in
                    let tmp_call_549 = exp(val_541) in
                    let val_551 = 0.5 * (vt_end_532 - v0_end_497
                                         + v0_mat_312) in
                    let tmp_call_553 = exp(val_551) in
                    let aa_555 = tmp_call_549 / tmp_call_324 * tmp_call_553 in
                    let aici_557 = arg_447 * aa_555 in
                    let log_aici_558 = log(aici_557) in
                    let t3_565 = muy_437 - (0.5 * rhoxyc_353 * sigmay_340
                                            * sigmay_340 * bb_507) in
                    let cst_567 = bb_507 * (mux_403 * t4_357 - t3_565) in
                    let tmp_call_571 = exp(cst_567) in
                    let t1_cst_572 = aici_557 * tmp_call_571 in
                    let scale_575 = -(ba_504 + bb_507 * t4_357) in
                    {ba_504, bb_507, aici_557, log_aici_558, t1_cst_572,
                     scale_575},
                  soac_v_222, untuple_273) in
           let tmp_size_593 = size(0, soac_v_576) in
           let tmp_size_594 = size(0, soac_v_579) in
           let tmp_e_602 = tmp_size_593 = tmp_size_594 in
           let zip_assert_603 = assert(tmp_e_602) in
           let tmp_size_604 = size(0, soac_v_579) in
           let tmp_size_608 = size(0, soac_v_588) in
           let tmp_e_613 = tmp_size_604 = tmp_size_608 in
           let zip_assert_615 = assert(tmp_e_613) in
           let tmp_size_617 = size(0, soac_v_588) in
           let tmp_size_619 = size(0, soac_v_589) in
           let tmp_e_620 = tmp_size_617 = tmp_size_619 in
           let zip_assert_624 = assert(tmp_e_620) in
           let comb_cert_626 = conjoin(zip_assert_603, zip_assert_615,
                                       zip_assert_624) in
           let eps_629 = 0.5 * sigmax_333 in
           let {soac_v_652, soac_v_653} =
             <comb_cert_626>
             mapT(fn {real, real} (real arg_631, real arg_634, real arg_636,
                                   real arg_641) =>
                    let baix_642 = arg_631 * mux_403 in
                    let val_646 = -baix_642 in
                    let tmp_call_647 = exp(val_646) in
                    let {tup_elem_650, tup_elem_651} = {arg_636 * tmp_call_647,
                                                        (arg_641 - baix_642)
                                                        / arg_634} in
                    {tup_elem_650, tup_elem_651},
                  soac_v_576, soac_v_579, soac_v_588, soac_v_589) in
           let {untuple_673} =
             reduceT(fn {real} (real x_662, real y_663) =>
                       let val_664 = x_662 + y_663 in
                       {val_664},
                     {0.0}, soac_v_652) in
           let {untuple_686} =
             reduceT(fn {real} (real param_0_674, real param_1_676) =>
                       let val_677 =
                         if param_0_674 < param_1_676
                         then param_1_676
                         else param_0_674 in
                       {val_677},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_653) in
           let f_823 =
             if tmp_size_262 = 1
             then untuple_686
             else let log_s_687 = log(untuple_673) in
                  let tmp_688 = log_s_687 / soac_v_579[tmp_size_262 - 1] in
                  let up_690 =
                    if tmp_688 <= 0.0
                    then tmp_688
                    else let tmp_689 = log_s_687 / soac_v_579[0] in
                         if 0.0 <= tmp_689
                         then tmp_689
                         else -10000000000000000000000000000000000000000000000000.0 in
                  let yl_691 = untuple_686 - 0.00001 in
                  let yu_692 = up_690 + 0.00001 in
                  let y0_693 = sigmay_340 * (rhoxy_349 * (mux_403 - mux_403)
                                             / sigmax_333 + -3.71901648545568
                                             * rhoxycs_354) - (rhoxyc_353
                                                               / 0.98376)
                               + muy_437 in
                  let y1_694 = sigmay_340 * (rhoxy_349 * (mux_403 - mux_403)
                                             / sigmax_333 - (-3.71901648545568
                                                             * rhoxycs_354))
                               + muy_437 in
                  if y1_694 <= yl_691
                  then y1_694 + 1.0
                  else if yu_692 <= y0_693
                       then y0_693 - 1.0
                       else let tmp_size_695 = size(0, soac_v_576) in
                            let tmp_size_696 = size(0, soac_v_588) in
                            let tmp_e_697 = tmp_size_695 = tmp_size_696 in
                            let zip_assert_698 = assert(tmp_e_697) in
                            let {untuple_704} =
                              <zip_assert_698>
                              mapT(fn {real} (real arg_699, real arg_700) =>
                                     let val_701 = -(arg_699 * mux_403) in
                                     let tmp_call_702 = exp(val_701) in
                                     let val_703 = arg_700 * tmp_call_702 in
                                     {val_703},
                                   soac_v_576, soac_v_588) in
                            let root_lb_705 =
                              if yl_691 < y0_693
                              then y0_693
                              else yl_691 in
                            let root_ub_706 =
                              if yu_692 < y1_694
                              then yu_692
                              else y1_694 in
                            let tmp_size_707 = size(0, untuple_704) in
                            let tmp_size_708 = size(0, soac_v_579) in
                            let tmp_e_709 = tmp_size_707 = tmp_size_708 in
                            let zip_assert_710 = assert(tmp_e_709) in
                            let {untuple_716} =
                              <zip_assert_710>
                              mapT(fn {real} (real arg_711, real arg_712) =>
                                     let val_713 = -(arg_712 * root_lb_705) in
                                     let tmp_call_714 = exp(val_713) in
                                     let val_715 = arg_711 * tmp_call_714 in
                                     {val_715},
                                   untuple_704, soac_v_579) in
                            let {untuple_720} =
                              reduceT(fn {real} (real x_717, real y_718) =>
                                        let val_719 = x_717 + y_718 in
                                        {val_719},
                                      {0.0}, untuple_716) in
                            let tmp_lit_721 = untuple_720 - 1.0 in
                            let {untuple_727} =
                              <zip_assert_710>
                              mapT(fn {real} (real arg_722, real arg_723) =>
                                     let val_724 = -(arg_723 * root_ub_706) in
                                     let tmp_call_725 = exp(val_724) in
                                     let val_726 = arg_722 * tmp_call_725 in
                                     {val_726},
                                   untuple_704, soac_v_579) in
                            let {untuple_731} =
                              reduceT(fn {real} (real x_728, real y_729) =>
                                        let val_730 = x_728 + y_729 in
                                        {val_730},
                                      {0.0}, untuple_727) in
                            let tmp_lit_732 = untuple_731 - 1.0 in
                            let {root_816, iteration_821, error_822} =
                              if 0.0 <= tmp_lit_721 * tmp_lit_732
                              then if 0.0 <= root_lb_705
                                   then {0.0, 0,
                                         10000000000000000000000000000000000000000000000000.0}
                                   else {0.0, 0,
                                         -10000000000000000000000000000000000000000000000000.0}
                              else let tmp_bop_733 =
                                     if tmp_lit_721 < 0.0
                                     then -tmp_lit_721
                                     else tmp_lit_721 in
                                   let tmp_bop_734 =
                                     if tmp_lit_732 < 0.0
                                     then -tmp_lit_732
                                     else tmp_lit_732 in
                                   let {fa_735, fb_736} =
                                     if tmp_bop_733 < tmp_bop_734
                                     then {tmp_lit_732, tmp_lit_721}
                                     else {tmp_lit_721, tmp_lit_732} in
                                   loop ({a_737, b_738, c_739, d_740, fa_741,
                                          fb_742, fc_743, mflag_744,
                                          it_745} = {root_lb_705, root_ub_706,
                                                     root_lb_705, 0.0, fa_735,
                                                     fb_736, fa_735, True,
                                                     0}) = for i_746 < 1000 do
                                     let val_750 = b_738 - a_737 in
                                     let tmp_bop_751 =
                                       if val_750 < 0.0
                                       then -val_750
                                       else val_750 in
                                     if fb_742 = 0.0 || tmp_bop_751 < 0.0001
                                     then {a_737, b_738, c_739, d_740, fa_741,
                                           fb_742, fc_743, mflag_744, it_745}
                                     else let s_755 =
                                            if fa_741 = fc_743 || fb_742
                                            = fc_743
                                            then b_738 - (fb_742 * (b_738
                                                                    - a_737)
                                                          / (fb_742 - fa_741))
                                            else let s1_752 = a_737 * fb_742
                                                              * fc_743
                                                              / ((fa_741
                                                                  - fb_742)
                                                                 * (fa_741
                                                                    - fc_743)) in
                                                 let s2_753 = b_738 * fa_741
                                                              * fc_743
                                                              / ((fb_742
                                                                  - fa_741)
                                                                 * (fb_742
                                                                    - fc_743)) in
                                                 let s3_754 = c_739 * fa_741
                                                              * fb_742
                                                              / ((fc_743
                                                                  - fa_741)
                                                                 * (fc_743
                                                                    - fb_742)) in
                                                 s1_752 + s2_753 + s3_754 in
                                          let val_756 = b_738 - c_739 in
                                          let tmp_bop_757 =
                                            if val_756 < 0.0
                                            then -val_756
                                            else val_756 in
                                          let val_758 = s_755 - b_738 in
                                          let tmp_bop_759 =
                                            if val_758 < 0.0
                                            then -val_758
                                            else val_758 in
                                          let val_760 = c_739 - d_740 in
                                          let tmp_bop_761 =
                                            if val_760 < 0.0
                                            then -val_760
                                            else val_760 in
                                          let val_763 = s_755 - b_738 in
                                          let tmp_bop_764 =
                                            if val_763 < 0.0
                                            then -val_763
                                            else val_763 in
                                          let val_765 = b_738 - c_739 in
                                          let tmp_bop_766 =
                                            if val_765 < 0.0
                                            then -val_765
                                            else val_765 in
                                          let val_767 = c_739 - d_740 in
                                          let tmp_bop_768 =
                                            if val_767 < 0.0
                                            then -val_767
                                            else val_767 in
                                          let {mflag_769, s_770} =
                                            if not ((3.0 * a_737 + b_738) / 4.0
                                                    <= s_755 && s_755 <= b_738)
                                            || mflag_744 && tmp_bop_757 / 2.0
                                            <= tmp_bop_759 || not mflag_744
                                            && tmp_bop_761 / 2.0 <= tmp_bop_764
                                            || mflag_744 && tmp_bop_766
                                            <= 0.0001 || not mflag_744
                                            && tmp_bop_768 <= 0.0001
                                            then {True, (a_737 + b_738) / 2.0}
                                            else {False, s_755} in
                                          let {untuple_776} =
                                            <zip_assert_710>
                                            mapT(fn {real} (real arg_771,
                                                            real arg_772) =>
                                                   let val_773 = -(arg_772
                                                                   * s_770) in
                                                   let tmp_call_774 = exp(val_773) in
                                                   let val_775 = arg_771
                                                                 * tmp_call_774 in
                                                   {val_775},
                                                 untuple_704, soac_v_579) in
                                          let {untuple_783} =
                                            reduceT(fn {real} (real x_777,
                                                               real y_778) =>
                                                      let val_779 = x_777
                                                                    + y_778 in
                                                      {val_779},
                                                    {0.0}, untuple_776) in
                                          let fs_784 = untuple_783 - 1.0 in
                                          let {a_785, b_788, fa_800, fb_801} =
                                            if fa_741 * fs_784 < 0.0
                                            then {a_737, s_770, fa_741, fs_784}
                                            else {s_770, b_738, fs_784,
                                                  fb_742} in
                                          let tmp_bop_802 =
                                            if fa_800 < 0.0
                                            then -fa_800
                                            else fa_800 in
                                          let tmp_bop_804 =
                                            if fb_801 < 0.0
                                            then -fb_801
                                            else fb_801 in
                                          let {a_805, b_806, fa_814, fb_815} =
                                            if tmp_bop_802 < tmp_bop_804
                                            then {b_788, a_785, fb_801, fa_800}
                                            else {a_785, b_788, fa_800,
                                                  fb_801} in
                                          {a_805, b_806, b_738, c_739, fa_814,
                                           fb_815, fb_742, mflag_769, i_746} in
                                   {b_738, it_745, fb_742} in
                            if error_822
                            = -10000000000000000000000000000000000000000000000000.0
                            then y0_693 - 1.0
                            else if error_822
                                 = 10000000000000000000000000000000000000000000000000.0
                                 then y1_694 + 1.0
                                 else root_816 in
           let val_824 = mux_403 + eps_629 in
           let {soac_v_834, soac_v_835} =
             <comb_cert_626>
             mapT(fn {real, real} (real arg_825, real arg_826, real arg_827,
                                   real arg_828) =>
                    let baix_829 = arg_825 * val_824 in
                    let val_830 = -baix_829 in
                    let tmp_call_831 = exp(val_830) in
                    let {tup_elem_832, tup_elem_833} = {arg_827 * tmp_call_831,
                                                        (arg_828 - baix_829)
                                                        / arg_826} in
                    {tup_elem_832, tup_elem_833},
                  soac_v_576, soac_v_579, soac_v_588, soac_v_589) in
           let {untuple_839} =
             reduceT(fn {real} (real x_836, real y_837) =>
                       let val_838 = x_836 + y_837 in
                       {val_838},
                     {0.0}, soac_v_834) in
           let {untuple_843} =
             reduceT(fn {real} (real param_0_840, real param_1_841) =>
                       let val_842 =
                         if param_0_840 < param_1_841
                         then param_1_841
                         else param_0_840 in
                       {val_842},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_835) in
           let g_948 =
             if tmp_size_262 = 1
             then untuple_843
             else let log_s_844 = log(untuple_839) in
                  let tmp_845 = log_s_844 / soac_v_579[tmp_size_262 - 1] in
                  let up_847 =
                    if tmp_845 <= 0.0
                    then tmp_845
                    else let tmp_846 = log_s_844 / soac_v_579[0] in
                         if 0.0 <= tmp_846
                         then tmp_846
                         else -10000000000000000000000000000000000000000000000000.0 in
                  let yl_848 = untuple_843 - 0.00001 in
                  let yu_849 = up_847 + 0.00001 in
                  let y0_850 = sigmay_340 * (rhoxy_349 * (val_824 - mux_403)
                                             / sigmax_333 + -3.71901648545568
                                             * rhoxycs_354) - (rhoxyc_353
                                                               / 0.98376)
                               + muy_437 in
                  let y1_851 = sigmay_340 * (rhoxy_349 * (val_824 - mux_403)
                                             / sigmax_333 - (-3.71901648545568
                                                             * rhoxycs_354))
                               + muy_437 in
                  if y1_851 <= yl_848
                  then y1_851 + 1.0
                  else if yu_849 <= y0_850
                       then y0_850 - 1.0
                       else let tmp_size_852 = size(0, soac_v_576) in
                            let tmp_size_853 = size(0, soac_v_588) in
                            let tmp_e_854 = tmp_size_852 = tmp_size_853 in
                            let zip_assert_855 = assert(tmp_e_854) in
                            let {untuple_861} =
                              <zip_assert_855>
                              mapT(fn {real} (real arg_856, real arg_857) =>
                                     let val_858 = -(arg_856 * val_824) in
                                     let tmp_call_859 = exp(val_858) in
                                     let val_860 = arg_857 * tmp_call_859 in
                                     {val_860},
                                   soac_v_576, soac_v_588) in
                            let root_lb_862 =
                              if yl_848 < y0_850
                              then y0_850
                              else yl_848 in
                            let root_ub_863 =
                              if yu_849 < y1_851
                              then yu_849
                              else y1_851 in
                            let tmp_size_864 = size(0, untuple_861) in
                            let tmp_size_865 = size(0, soac_v_579) in
                            let tmp_e_866 = tmp_size_864 = tmp_size_865 in
                            let zip_assert_867 = assert(tmp_e_866) in
                            let {untuple_873} =
                              <zip_assert_867>
                              mapT(fn {real} (real arg_868, real arg_869) =>
                                     let val_870 = -(arg_869 * root_lb_862) in
                                     let tmp_call_871 = exp(val_870) in
                                     let val_872 = arg_868 * tmp_call_871 in
                                     {val_872},
                                   untuple_861, soac_v_579) in
                            let {untuple_877} =
                              reduceT(fn {real} (real x_874, real y_875) =>
                                        let val_876 = x_874 + y_875 in
                                        {val_876},
                                      {0.0}, untuple_873) in
                            let tmp_lit_878 = untuple_877 - 1.0 in
                            let {untuple_884} =
                              <zip_assert_867>
                              mapT(fn {real} (real arg_879, real arg_880) =>
                                     let val_881 = -(arg_880 * root_ub_863) in
                                     let tmp_call_882 = exp(val_881) in
                                     let val_883 = arg_879 * tmp_call_882 in
                                     {val_883},
                                   untuple_861, soac_v_579) in
                            let {untuple_888} =
                              reduceT(fn {real} (real x_885, real y_886) =>
                                        let val_887 = x_885 + y_886 in
                                        {val_887},
                                      {0.0}, untuple_884) in
                            let tmp_lit_889 = untuple_888 - 1.0 in
                            let {root_945, iteration_946, error_947} =
                              if 0.0 <= tmp_lit_878 * tmp_lit_889
                              then if 0.0 <= root_lb_862
                                   then {0.0, 0,
                                         10000000000000000000000000000000000000000000000000.0}
                                   else {0.0, 0,
                                         -10000000000000000000000000000000000000000000000000.0}
                              else let tmp_bop_890 =
                                     if tmp_lit_878 < 0.0
                                     then -tmp_lit_878
                                     else tmp_lit_878 in
                                   let tmp_bop_891 =
                                     if tmp_lit_889 < 0.0
                                     then -tmp_lit_889
                                     else tmp_lit_889 in
                                   let {fa_892, fb_893} =
                                     if tmp_bop_890 < tmp_bop_891
                                     then {tmp_lit_889, tmp_lit_878}
                                     else {tmp_lit_878, tmp_lit_889} in
                                   loop ({a_894, b_895, c_896, d_897, fa_898,
                                          fb_899, fc_900, mflag_901,
                                          it_902} = {root_lb_862, root_ub_863,
                                                     root_lb_862, 0.0, fa_892,
                                                     fb_893, fa_892, True,
                                                     0}) = for i_903 < 1000 do
                                     let val_904 = b_895 - a_894 in
                                     let tmp_bop_905 =
                                       if val_904 < 0.0
                                       then -val_904
                                       else val_904 in
                                     if fb_899 = 0.0 || tmp_bop_905 < 0.0001
                                     then {a_894, b_895, c_896, d_897, fa_898,
                                           fb_899, fc_900, mflag_901, it_902}
                                     else let s_909 =
                                            if fa_898 = fc_900 || fb_899
                                            = fc_900
                                            then b_895 - (fb_899 * (b_895
                                                                    - a_894)
                                                          / (fb_899 - fa_898))
                                            else let s1_906 = a_894 * fb_899
                                                              * fc_900
                                                              / ((fa_898
                                                                  - fb_899)
                                                                 * (fa_898
                                                                    - fc_900)) in
                                                 let s2_907 = b_895 * fa_898
                                                              * fc_900
                                                              / ((fb_899
                                                                  - fa_898)
                                                                 * (fb_899
                                                                    - fc_900)) in
                                                 let s3_908 = c_896 * fa_898
                                                              * fb_899
                                                              / ((fc_900
                                                                  - fa_898)
                                                                 * (fc_900
                                                                    - fb_899)) in
                                                 s1_906 + s2_907 + s3_908 in
                                          let val_910 = b_895 - c_896 in
                                          let tmp_bop_911 =
                                            if val_910 < 0.0
                                            then -val_910
                                            else val_910 in
                                          let val_912 = s_909 - b_895 in
                                          let tmp_bop_913 =
                                            if val_912 < 0.0
                                            then -val_912
                                            else val_912 in
                                          let val_914 = c_896 - d_897 in
                                          let tmp_bop_915 =
                                            if val_914 < 0.0
                                            then -val_914
                                            else val_914 in
                                          let val_916 = s_909 - b_895 in
                                          let tmp_bop_917 =
                                            if val_916 < 0.0
                                            then -val_916
                                            else val_916 in
                                          let val_918 = b_895 - c_896 in
                                          let tmp_bop_919 =
                                            if val_918 < 0.0
                                            then -val_918
                                            else val_918 in
                                          let val_920 = c_896 - d_897 in
                                          let tmp_bop_921 =
                                            if val_920 < 0.0
                                            then -val_920
                                            else val_920 in
                                          let {mflag_922, s_923} =
                                            if not ((3.0 * a_894 + b_895) / 4.0
                                                    <= s_909 && s_909 <= b_895)
                                            || mflag_901 && tmp_bop_911 / 2.0
                                            <= tmp_bop_913 || not mflag_901
                                            && tmp_bop_915 / 2.0 <= tmp_bop_917
                                            || mflag_901 && tmp_bop_919
                                            <= 0.0001 || not mflag_901
                                            && tmp_bop_921 <= 0.0001
                                            then {True, (a_894 + b_895) / 2.0}
                                            else {False, s_909} in
                                          let {untuple_929} =
                                            <zip_assert_867>
                                            mapT(fn {real} (real arg_924,
                                                            real arg_925) =>
                                                   let val_926 = -(arg_925
                                                                   * s_923) in
                                                   let tmp_call_927 = exp(val_926) in
                                                   let val_928 = arg_924
                                                                 * tmp_call_927 in
                                                   {val_928},
                                                 untuple_861, soac_v_579) in
                                          let {untuple_933} =
                                            reduceT(fn {real} (real x_930,
                                                               real y_931) =>
                                                      let val_932 = x_930
                                                                    + y_931 in
                                                      {val_932},
                                                    {0.0}, untuple_929) in
                                          let fs_934 = untuple_933 - 1.0 in
                                          let {a_935, b_936, fa_937, fb_938} =
                                            if fa_898 * fs_934 < 0.0
                                            then {a_894, s_923, fa_898, fs_934}
                                            else {s_923, b_895, fs_934,
                                                  fb_899} in
                                          let tmp_bop_939 =
                                            if fa_937 < 0.0
                                            then -fa_937
                                            else fa_937 in
                                          let tmp_bop_940 =
                                            if fb_938 < 0.0
                                            then -fb_938
                                            else fb_938 in
                                          let {a_941, b_942, fa_943, fb_944} =
                                            if tmp_bop_939 < tmp_bop_940
                                            then {b_936, a_935, fb_938, fa_937}
                                            else {a_935, b_936, fa_937,
                                                  fb_938} in
                                          {a_941, b_942, b_895, c_896, fa_943,
                                           fb_944, fb_899, mflag_922, i_903} in
                                   {b_895, it_902, fb_899} in
                            if error_947
                            = -10000000000000000000000000000000000000000000000000.0
                            then y0_850 - 1.0
                            else if error_947
                                 = 10000000000000000000000000000000000000000000000000.0
                                 then y1_851 + 1.0
                                 else root_945 in
           let val_949 = mux_403 - eps_629 in
           let {soac_v_959, soac_v_960} =
             <comb_cert_626>
             mapT(fn {real, real} (real arg_950, real arg_951, real arg_952,
                                   real arg_953) =>
                    let baix_954 = arg_950 * val_949 in
                    let val_955 = -baix_954 in
                    let tmp_call_956 = exp(val_955) in
                    let {tup_elem_957, tup_elem_958} = {arg_952 * tmp_call_956,
                                                        (arg_953 - baix_954)
                                                        / arg_951} in
                    {tup_elem_957, tup_elem_958},
                  soac_v_576, soac_v_579, soac_v_588, soac_v_589) in
           let {untuple_964} =
             reduceT(fn {real} (real x_961, real y_962) =>
                       let val_963 = x_961 + y_962 in
                       {val_963},
                     {0.0}, soac_v_959) in
           let {untuple_968} =
             reduceT(fn {real} (real param_0_965, real param_1_966) =>
                       let val_967 =
                         if param_0_965 < param_1_966
                         then param_1_966
                         else param_0_965 in
                       {val_967},
                     {-10000000000000000000000000000000000000000000000000.0},
                     soac_v_960) in
           let h_1073 =
             if tmp_size_262 = 1
             then untuple_968
             else let log_s_969 = log(untuple_964) in
                  let tmp_970 = log_s_969 / soac_v_579[tmp_size_262 - 1] in
                  let up_972 =
                    if tmp_970 <= 0.0
                    then tmp_970
                    else let tmp_971 = log_s_969 / soac_v_579[0] in
                         if 0.0 <= tmp_971
                         then tmp_971
                         else -10000000000000000000000000000000000000000000000000.0 in
                  let yl_973 = untuple_968 - 0.00001 in
                  let yu_974 = up_972 + 0.00001 in
                  let y0_975 = sigmay_340 * (rhoxy_349 * (val_949 - mux_403)
                                             / sigmax_333 + -3.71901648545568
                                             * rhoxycs_354) - (rhoxyc_353
                                                               / 0.98376)
                               + muy_437 in
                  let y1_976 = sigmay_340 * (rhoxy_349 * (val_949 - mux_403)
                                             / sigmax_333 - (-3.71901648545568
                                                             * rhoxycs_354))
                               + muy_437 in
                  if y1_976 <= yl_973
                  then y1_976 + 1.0
                  else if yu_974 <= y0_975
                       then y0_975 - 1.0
                       else let tmp_size_977 = size(0, soac_v_576) in
                            let tmp_size_978 = size(0, soac_v_588) in
                            let tmp_e_979 = tmp_size_977 = tmp_size_978 in
                            let zip_assert_980 = assert(tmp_e_979) in
                            let {untuple_986} =
                              <zip_assert_980>
                              mapT(fn {real} (real arg_981, real arg_982) =>
                                     let val_983 = -(arg_981 * val_949) in
                                     let tmp_call_984 = exp(val_983) in
                                     let val_985 = arg_982 * tmp_call_984 in
                                     {val_985},
                                   soac_v_576, soac_v_588) in
                            let root_lb_987 =
                              if yl_973 < y0_975
                              then y0_975
                              else yl_973 in
                            let root_ub_988 =
                              if yu_974 < y1_976
                              then yu_974
                              else y1_976 in
                            let tmp_size_989 = size(0, untuple_986) in
                            let tmp_size_990 = size(0, soac_v_579) in
                            let tmp_e_991 = tmp_size_989 = tmp_size_990 in
                            let zip_assert_992 = assert(tmp_e_991) in
                            let {untuple_998} =
                              <zip_assert_992>
                              mapT(fn {real} (real arg_993, real arg_994) =>
                                     let val_995 = -(arg_994 * root_lb_987) in
                                     let tmp_call_996 = exp(val_995) in
                                     let val_997 = arg_993 * tmp_call_996 in
                                     {val_997},
                                   untuple_986, soac_v_579) in
                            let {untuple_1002} =
                              reduceT(fn {real} (real x_999, real y_1000) =>
                                        let val_1001 = x_999 + y_1000 in
                                        {val_1001},
                                      {0.0}, untuple_998) in
                            let tmp_lit_1003 = untuple_1002 - 1.0 in
                            let {untuple_1009} =
                              <zip_assert_992>
                              mapT(fn {real} (real arg_1004, real arg_1005) =>
                                     let val_1006 = -(arg_1005 * root_ub_988) in
                                     let tmp_call_1007 = exp(val_1006) in
                                     let val_1008 = arg_1004 * tmp_call_1007 in
                                     {val_1008},
                                   untuple_986, soac_v_579) in
                            let {untuple_1013} =
                              reduceT(fn {real} (real x_1010, real y_1011) =>
                                        let val_1012 = x_1010 + y_1011 in
                                        {val_1012},
                                      {0.0}, untuple_1009) in
                            let tmp_lit_1014 = untuple_1013 - 1.0 in
                            let {root_1070, iteration_1071, error_1072} =
                              if 0.0 <= tmp_lit_1003 * tmp_lit_1014
                              then if 0.0 <= root_lb_987
                                   then {0.0, 0,
                                         10000000000000000000000000000000000000000000000000.0}
                                   else {0.0, 0,
                                         -10000000000000000000000000000000000000000000000000.0}
                              else let tmp_bop_1015 =
                                     if tmp_lit_1003 < 0.0
                                     then -tmp_lit_1003
                                     else tmp_lit_1003 in
                                   let tmp_bop_1016 =
                                     if tmp_lit_1014 < 0.0
                                     then -tmp_lit_1014
                                     else tmp_lit_1014 in
                                   let {fa_1017, fb_1018} =
                                     if tmp_bop_1015 < tmp_bop_1016
                                     then {tmp_lit_1014, tmp_lit_1003}
                                     else {tmp_lit_1003, tmp_lit_1014} in
                                   loop ({a_1019, b_1020, c_1021, d_1022,
                                          fa_1023, fb_1024, fc_1025, mflag_1026,
                                          it_1027} = {root_lb_987, root_ub_988,
                                                      root_lb_987, 0.0, fa_1017,
                                                      fb_1018, fa_1017, True,
                                                      0}) = for i_1028 < 1000 do
                                     let val_1029 = b_1020 - a_1019 in
                                     let tmp_bop_1030 =
                                       if val_1029 < 0.0
                                       then -val_1029
                                       else val_1029 in
                                     if fb_1024 = 0.0 || tmp_bop_1030 < 0.0001
                                     then {a_1019, b_1020, c_1021, d_1022,
                                           fa_1023, fb_1024, fc_1025,
                                           mflag_1026, it_1027}
                                     else let s_1034 =
                                            if fa_1023 = fc_1025 || fb_1024
                                            = fc_1025
                                            then b_1020 - (fb_1024 * (b_1020
                                                                      - a_1019)
                                                           / (fb_1024
                                                              - fa_1023))
                                            else let s1_1031 = a_1019 * fb_1024
                                                               * fc_1025
                                                               / ((fa_1023
                                                                   - fb_1024)
                                                                  * (fa_1023
                                                                     - fc_1025)) in
                                                 let s2_1032 = b_1020 * fa_1023
                                                               * fc_1025
                                                               / ((fb_1024
                                                                   - fa_1023)
                                                                  * (fb_1024
                                                                     - fc_1025)) in
                                                 let s3_1033 = c_1021 * fa_1023
                                                               * fb_1024
                                                               / ((fc_1025
                                                                   - fa_1023)
                                                                  * (fc_1025
                                                                     - fb_1024)) in
                                                 s1_1031 + s2_1032 + s3_1033 in
                                          let val_1035 = b_1020 - c_1021 in
                                          let tmp_bop_1036 =
                                            if val_1035 < 0.0
                                            then -val_1035
                                            else val_1035 in
                                          let val_1037 = s_1034 - b_1020 in
                                          let tmp_bop_1038 =
                                            if val_1037 < 0.0
                                            then -val_1037
                                            else val_1037 in
                                          let val_1039 = c_1021 - d_1022 in
                                          let tmp_bop_1040 =
                                            if val_1039 < 0.0
                                            then -val_1039
                                            else val_1039 in
                                          let val_1041 = s_1034 - b_1020 in
                                          let tmp_bop_1042 =
                                            if val_1041 < 0.0
                                            then -val_1041
                                            else val_1041 in
                                          let val_1043 = b_1020 - c_1021 in
                                          let tmp_bop_1044 =
                                            if val_1043 < 0.0
                                            then -val_1043
                                            else val_1043 in
                                          let val_1045 = c_1021 - d_1022 in
                                          let tmp_bop_1046 =
                                            if val_1045 < 0.0
                                            then -val_1045
                                            else val_1045 in
                                          let {mflag_1047, s_1048} =
                                            if not ((3.0 * a_1019 + b_1020)
                                                    / 4.0 <= s_1034 && s_1034
                                                    <= b_1020) || mflag_1026
                                            && tmp_bop_1036 / 2.0
                                            <= tmp_bop_1038 || not mflag_1026
                                            && tmp_bop_1040 / 2.0
                                            <= tmp_bop_1042 || mflag_1026
                                            && tmp_bop_1044 <= 0.0001
                                            || not mflag_1026 && tmp_bop_1046
                                            <= 0.0001
                                            then {True, (a_1019 + b_1020) / 2.0}
                                            else {False, s_1034} in
                                          let {untuple_1054} =
                                            <zip_assert_992>
                                            mapT(fn {real} (real arg_1049,
                                                            real arg_1050) =>
                                                   let val_1051 = -(arg_1050
                                                                    * s_1048) in
                                                   let tmp_call_1052 = exp(val_1051) in
                                                   let val_1053 = arg_1049
                                                                  * tmp_call_1052 in
                                                   {val_1053},
                                                 untuple_986, soac_v_579) in
                                          let {untuple_1058} =
                                            reduceT(fn {real} (real x_1055,
                                                               real y_1056) =>
                                                      let val_1057 = x_1055
                                                                     + y_1056 in
                                                      {val_1057},
                                                    {0.0}, untuple_1054) in
                                          let fs_1059 = untuple_1058 - 1.0 in
                                          let {a_1060, b_1061, fa_1062,
                                               fb_1063} =
                                            if fa_1023 * fs_1059 < 0.0
                                            then {a_1019, s_1048, fa_1023,
                                                  fs_1059}
                                            else {s_1048, b_1020, fs_1059,
                                                  fb_1024} in
                                          let tmp_bop_1064 =
                                            if fa_1062 < 0.0
                                            then -fa_1062
                                            else fa_1062 in
                                          let tmp_bop_1065 =
                                            if fb_1063 < 0.0
                                            then -fb_1063
                                            else fb_1063 in
                                          let {a_1066, b_1067, fa_1068,
                                               fb_1069} =
                                            if tmp_bop_1064 < tmp_bop_1065
                                            then {b_1061, a_1060, fb_1063,
                                                  fa_1062}
                                            else {a_1060, b_1061, fa_1062,
                                                  fb_1063} in
                                          {a_1066, b_1067, b_1020, c_1021,
                                           fa_1068, fb_1069, fb_1024,
                                           mflag_1047, i_1028} in
                                   {b_1020, it_1027, fb_1024} in
                            if error_1072
                            = -10000000000000000000000000000000000000000000000000.0
                            then y0_975 - 1.0
                            else if error_1072
                                 = 10000000000000000000000000000000000000000000000000.0
                                 then y1_976 + 1.0
                                 else root_1070 in
           let df_1074 = 0.5 * (g_948 - h_1073) / eps_629 in
           let sqrt2sigmax_1075 = 1.4142135623730951 * sigmax_333 in
           let tmp_lit_1076 = [0.0, 0.6568095668820999, -0.6568095668820998,
                               -1.3265570844949335, 1.326557084494933,
                               2.025948015825757, -2.025948015825756,
                               -2.7832900997816497, 2.7832900997816474,
                               3.6684708465595857, -3.668470846559584] in
           // x_quads_1077 aliases tmp_lit_1076
           let {x_quads_1077, w_quads_1078} =
             {tmp_lit_1076,
              [0.6547592869145917, 0.6609604194409607, 0.6609604194409606,
               0.6812118810666693, 0.681211881066669, 0.7219536247283848,
               0.7219536247283852, 0.8025168688510406, 0.8025168688510397,
               1.0065267861723648, 1.0065267861723775]} in
           let {untuple_1159} =
             mapT(fn {real} (real arg_1082, real arg_1084) =>
                    let x_1085 = sqrt2sigmax_1075 * arg_1082 + mux_403 in
                    let tmp_1086 = (x_1085 - mux_403) / sigmax_333 in
                    let val_1087 = -(0.5 * tmp_1086 * tmp_1086) in
                    let tmp_call_1088 = exp(val_1087) in
                    let yhat_x_1089 = f_823 + df_1074 * (x_1085 - mux_403) in
                    let h1_1090 = (yhat_x_1089 - muy_437) / sigmay_rhoxycs_356
                                  - (t2_355 * (x_1085 - mux_403)) in
                    let tmp_size_1091 = size(0, soac_v_579) in
                    let tmp_size_1092 = size(0, soac_v_590) in
                    let tmp_e_1093 = tmp_size_1091 = tmp_size_1092 in
                    let zip_assert_1094 = assert(tmp_e_1093) in
                    let tmp_size_1095 = size(0, soac_v_590) in
                    let tmp_size_1096 = size(0, soac_v_592) in
                    let tmp_e_1097 = tmp_size_1095 = tmp_size_1096 in
                    let zip_assert_1098 = assert(tmp_e_1097) in
                    let comb_cert_1099 = conjoin(zip_assert_1094,
                                                 zip_assert_1098) in
                    let {untuple_1132} =
                      <comb_cert_1099>
                      mapT(fn {real} (real arg_1100, real arg_1104,
                                      real arg_1105) =>
                             let h2_1108 = h1_1090 + arg_1100
                                           * sigmay_rhoxycs_356 in
                             let val_1109 = arg_1105 * x_1085 in
                             let tmp_call_1110 = exp(val_1109) in
                             let val_1111 = -h2_1108 in
                             let u_1112 = val_1111 / 1.4142135623730951 in
                             let e_1129 =
                               if u_1112 < 0.0
                               then let val_1113 = -u_1112 in
                                    let t_1114 = 1.0 / (1.0 + 0.3275911
                                                        * val_1113) in
                                    let t2_1115 = t_1114 * t_1114 in
                                    let t3_1116 = t_1114 * t2_1115 in
                                    let t4_1117 = t2_1115 * t2_1115 in
                                    let t5_1118 = t2_1115 * t3_1116 in
                                    let val_1119 = -(val_1113 * val_1113) in
                                    let tmp_call_1120 = exp(val_1119) in
                                    let tmp_neg_1121 = 1.0 - ((0.254829592
                                                               * t_1114
                                                               + -0.284496736
                                                               * t2_1115
                                                               + 1.421413741
                                                               * t3_1116
                                                               + -1.453152027
                                                               * t4_1117
                                                               + 1.061405429
                                                               * t5_1118)
                                                              * tmp_call_1120) in
                                    -tmp_neg_1121
                               else let t_1122 = 1.0 / (1.0 + 0.3275911
                                                        * u_1112) in
                                    let t2_1123 = t_1122 * t_1122 in
                                    let t3_1124 = t_1122 * t2_1123 in
                                    let t4_1125 = t2_1123 * t2_1123 in
                                    let t5_1126 = t2_1123 * t3_1124 in
                                    let val_1127 = -(u_1112 * u_1112) in
                                    let tmp_call_1128 = exp(val_1127) in
                                    1.0 - ((0.254829592 * t_1122 + -0.284496736
                                            * t2_1123 + 1.421413741 * t3_1124
                                            + -1.453152027 * t4_1125
                                            + 1.061405429 * t5_1126)
                                           * tmp_call_1128) in
                             let tmp_bop_1130 = 0.5 * (1.0 + e_1129) in
                             let val_1131 = arg_1104 * tmp_call_1110
                                            * tmp_bop_1130 in
                             {val_1131},
                           soac_v_579, soac_v_590, soac_v_592) in
                    let {untuple_1136} =
                      reduceT(fn {real} (real x_1133, real y_1134) =>
                                let val_1135 = x_1133 + y_1134 in
                                {val_1135},
                              {0.0}, untuple_1132) in
                    let val_1137 = -h1_1090 in
                    let u_1138 = val_1137 / 1.4142135623730951 in
                    let e_1155 =
                      if u_1138 < 0.0
                      then let val_1139 = -u_1138 in
                           let t_1140 = 1.0 / (1.0 + 0.3275911 * val_1139) in
                           let t2_1141 = t_1140 * t_1140 in
                           let t3_1142 = t_1140 * t2_1141 in
                           let t4_1143 = t2_1141 * t2_1141 in
                           let t5_1144 = t2_1141 * t3_1142 in
                           let val_1145 = -(val_1139 * val_1139) in
                           let tmp_call_1146 = exp(val_1145) in
                           let tmp_neg_1147 = 1.0 - ((0.254829592 * t_1140
                                                      + -0.284496736 * t2_1141
                                                      + 1.421413741 * t3_1142
                                                      + -1.453152027 * t4_1143
                                                      + 1.061405429 * t5_1144)
                                                     * tmp_call_1146) in
                           -tmp_neg_1147
                      else let t_1148 = 1.0 / (1.0 + 0.3275911 * u_1138) in
                           let t2_1149 = t_1148 * t_1148 in
                           let t3_1150 = t_1148 * t2_1149 in
                           let t4_1151 = t2_1149 * t2_1149 in
                           let t5_1152 = t2_1149 * t3_1150 in
                           let val_1153 = -(u_1138 * u_1138) in
                           let tmp_call_1154 = exp(val_1153) in
                           1.0 - ((0.254829592 * t_1148 + -0.284496736 * t2_1149
                                   + 1.421413741 * t3_1150 + -1.453152027
                                   * t4_1151 + 1.061405429 * t5_1152)
                                  * tmp_call_1154) in
                    let tmp_bop_1156 = 0.5 * (1.0 + e_1155) in
                    let integrand_res_1157 = tmp_call_1088 * (tmp_bop_1156
                                                              - untuple_1136) in
                    let val_1158 = arg_1084 * integrand_res_1157 in
                    {val_1158},
                  tmp_lit_1076, w_quads_1078) in
           let {untuple_1163} =
             reduceT(fn {real} (real x_1160, real y_1161) =>
                       let val_1162 = x_1160 + y_1161 in
                       {val_1162},
                     {0.0}, untuple_1159) in
           let g2pp_price_1164 = tmp_call_324 * untuple_1163
                                 / 1.7724538509055159 in
           let val_1165 = arg_8 * 12.0 in
           let nbmonths_1166 = trunc(val_1165) in
           let m_1167 = 1 + nbmonths_1166 in
           let val_1168 = m_1167 - 1 in
           let tmp_bop_1169 = val_1168 - (val_1168 / 12 * 12) in
           let {y_1170, m_1171} = {2012 + (m_1167 - 1) / 12, tmp_bop_1169
                                   + 1} in
           let {y_1172, m_1173} =
             if m_1171 <= 0
             then {y_1170 - 1, m_1171 + 12}
             else {y_1170, m_1171} in
           let tmp_bop_1174 = y_1172 - (y_1172 / 4 * 4) in
           let tmp_bop_1175 = y_1172 - (y_1172 / 100 * 100) in
           let tmp_bop_1176 = y_1172 - (y_1172 / 400 * 400) in
           let tmp_and_1177 = tmp_bop_1174 = 0 && not (tmp_bop_1175 = 0)
                              || tmp_bop_1176 = 0 in
           let val_1178 =
             if m_1173 = 2 && tmp_and_1177
             then 29
             else if m_1173 = 2
                  then 28
                  else if m_1173 = 4 || m_1173 = 6 || m_1173 = 9 || m_1173 = 11
                       then 30
                       else 31 in
           let tmp_lit_1179 =
             if 1 < val_1178
             then 1
             else val_1178 in
           let ym_1180 =
             if m_1173 = 1 || m_1173 = 2
             then 1461 * (y_1172 + 4800 - 1) / 4 + 367 * (m_1173 + 10) / 12 - (3
                                                                               * (y_1172
                                                                                  + 4900
                                                                                  - 1)
                                                                               / 100
                                                                               / 4)
             else 1461 * (y_1172 + 4800) / 4 + 367 * (m_1173 - 2) / 12 - (3
                                                                          * (y_1172
                                                                             + 4900)
                                                                          / 100
                                                                          / 4) in
           let tmp_1181 = ym_1180 + tmp_lit_1179 - 32075 - 2444238 in
           let resmin_1182 = tmp_1181 * 1440 + 720 in
           let tmp_call_1183 = toReal(resmin_1182) in
           let val_1184 = 12.0 * arg_12 / arg_11 in
           let tmp_call_1185 = trunc(val_1184) in
           let {soac_v_1273, soac_v_1274} =
             mapT(fn {real, real} (int i_1186) =>
                    let tmp_call_1187 = toReal(i_1186) in
                    let val_1188 = tmp_call_1187 * arg_11 in
                    let nbmonths_1189 = trunc(val_1188) in
                    let val_1190 = trunc(tmp_call_1183) in
                    let jul_1191 = val_1190 / 1440 in
                    let l_1192 = jul_1191 + 68569 + 2444238 in
                    let n_1193 = 4 * l_1192 / 146097 in
                    let l_1194 = l_1192 - ((146097 * n_1193 + 3) / 4) in
                    let i_1195 = 4000 * (l_1194 + 1) / 1461001 in
                    let l_1196 = l_1194 - (1461 * i_1195 / 4) + 31 in
                    let j_1197 = 80 * l_1196 / 2447 in
                    let d_1198 = l_1196 - (2447 * j_1197 / 80) in
                    let l_1200 = j_1197 / 11 in
                    let m_1201 = j_1197 + 2 - (12 * l_1200) in
                    let y_1203 = 100 * (n_1193 - 49) + i_1195 + l_1200 in
                    let daytime_1204 = val_1190 - (val_1190 / 1440 * 1440) in
                    let {y_1206, m_1209, d_1210, h_1211, min_1212} =
                      if daytime_1204 = 720
                      then {y_1203, m_1201, d_1198, 12, 0}
                      else let tmp_lit_1205 = daytime_1204 - (daytime_1204 / 60
                                                              * 60) in
                           {y_1203, m_1201, d_1198, daytime_1204 / 60,
                            tmp_lit_1205} in
                    let m_1213 = m_1209 + nbmonths_1189 in
                    let val_1214 = m_1213 - 1 in
                    let tmp_bop_1215 = val_1214 - (val_1214 / 12 * 12) in
                    let {y_1216, m_1217} = {y_1206 + (m_1213 - 1) / 12,
                                            tmp_bop_1215 + 1} in
                    let {y_1218, m_1219} =
                      if m_1217 <= 0
                      then {y_1216 - 1, m_1217 + 12}
                      else {y_1216, m_1217} in
                    let tmp_bop_1220 = y_1218 - (y_1218 / 4 * 4) in
                    let tmp_bop_1221 = y_1218 - (y_1218 / 100 * 100) in
                    let tmp_bop_1222 = y_1218 - (y_1218 / 400 * 400) in
                    let tmp_and_1223 = tmp_bop_1220 = 0 && not (tmp_bop_1221
                                                                = 0)
                                       || tmp_bop_1222 = 0 in
                    let val_1224 =
                      if m_1219 = 2 && tmp_and_1223
                      then 29
                      else if m_1219 = 2
                           then 28
                           else if m_1219 = 4 || m_1219 = 6 || m_1219 = 9
                                || m_1219 = 11
                                then 30
                                else 31 in
                    let tmp_lit_1225 =
                      if d_1210 < val_1224
                      then d_1210
                      else val_1224 in
                    let ym_1226 =
                      if m_1219 = 1 || m_1219 = 2
                      then 1461 * (y_1218 + 4800 - 1) / 4 + 367 * (m_1219 + 10)
                           / 12 - (3 * (y_1218 + 4900 - 1) / 100 / 4)
                      else 1461 * (y_1218 + 4800) / 4 + 367 * (m_1219 - 2) / 12
                           - (3 * (y_1218 + 4900) / 100 / 4) in
                    let tmp_1227 = ym_1226 + tmp_lit_1225 - 32075 - 2444238 in
                    let resmin_1228 = tmp_1227 * 1440 + 720 in
                    let tmp_call_1229 = toReal(resmin_1228) in
                    let nbmonths_1230 = trunc(arg_11) in
                    let val_1231 = trunc(tmp_call_1229) in
                    let jul_1232 = val_1231 / 1440 in
                    let l_1233 = jul_1232 + 68569 + 2444238 in
                    let n_1234 = 4 * l_1233 / 146097 in
                    let l_1235 = l_1233 - ((146097 * n_1234 + 3) / 4) in
                    let i_1236 = 4000 * (l_1235 + 1) / 1461001 in
                    let l_1237 = l_1235 - (1461 * i_1236 / 4) + 31 in
                    let j_1238 = 80 * l_1237 / 2447 in
                    let d_1245 = l_1237 - (2447 * j_1238 / 80) in
                    let l_1246 = j_1238 / 11 in
                    let m_1247 = j_1238 + 2 - (12 * l_1246) in
                    let y_1248 = 100 * (n_1234 - 49) + i_1236 + l_1246 in
                    let daytime_1249 = val_1231 - (val_1231 / 1440 * 1440) in
                    let {y_1251, m_1252, d_1253, h_1254, min_1255} =
                      if daytime_1249 = 720
                      then {y_1248, m_1247, d_1245, 12, 0}
                      else let tmp_lit_1250 = daytime_1249 - (daytime_1249 / 60
                                                              * 60) in
                           {y_1248, m_1247, d_1245, daytime_1249 / 60,
                            tmp_lit_1250} in
                    let m_1256 = m_1252 + nbmonths_1230 in
                    let val_1257 = m_1256 - 1 in
                    let tmp_bop_1258 = val_1257 - (val_1257 / 12 * 12) in
                    let {y_1259, m_1260} = {y_1251 + (m_1256 - 1) / 12,
                                            tmp_bop_1258 + 1} in
                    let {y_1261, m_1262} =
                      if m_1260 <= 0
                      then {y_1259 - 1, m_1260 + 12}
                      else {y_1259, m_1260} in
                    let tmp_bop_1263 = y_1261 - (y_1261 / 4 * 4) in
                    let tmp_bop_1264 = y_1261 - (y_1261 / 100 * 100) in
                    let tmp_bop_1265 = y_1261 - (y_1261 / 400 * 400) in
                    let tmp_and_1266 = tmp_bop_1263 = 0 && not (tmp_bop_1264
                                                                = 0)
                                       || tmp_bop_1265 = 0 in
                    let val_1267 =
                      if m_1262 = 2 && tmp_and_1266
                      then 29
                      else if m_1262 = 2
                           then 28
                           else if m_1262 = 4 || m_1262 = 6 || m_1262 = 9
                                || m_1262 = 11
                                then 30
                                else 31 in
                    let tmp_lit_1268 =
                      if d_1253 < val_1267
                      then d_1253
                      else val_1267 in
                    let ym_1269 =
                      if m_1262 = 1 || m_1262 = 2
                      then 1461 * (y_1261 + 4800 - 1) / 4 + 367 * (m_1262 + 10)
                           / 12 - (3 * (y_1261 + 4900 - 1) / 100 / 4)
                      else 1461 * (y_1261 + 4800) / 4 + 367 * (m_1262 - 2) / 12
                           - (3 * (y_1261 + 4900) / 100 / 4) in
                    let tmp_1270 = ym_1269 + tmp_lit_1268 - 32075 - 2444238 in
                    let resmin_1271 = tmp_1270 * 1440 + 720 in
                    let tmp_call_1272 = toReal(resmin_1271) in
                    {tmp_call_1229, tmp_call_1272},
                  iota(tmp_call_1185)) in
           let val_1275 = replicate(tmp_call_1185, 0.0) in
           let tmp_size_1276 = size(0, soac_v_1273) in
           let tmp_e_1277 = tmp_call_1185 = tmp_size_1276 in
           let zip_assert_1278 = assert(tmp_e_1277) in
           let tmp_size_1279 = size(0, soac_v_1273) in
           let tmp_size_1280 = size(0, soac_v_1274) in
           let tmp_e_1281 = tmp_size_1279 = tmp_size_1280 in
           let zip_assert_1282 = assert(tmp_e_1281) in
           let comb_cert_1283 = conjoin(zip_assert_1278, zip_assert_1282) in
           let {tmp_red2_1305, tmp_red2_1306, tmp_red2_1307} =
             <comb_cert_1283>
             reduceT(fn {real, real, real} (real arg_1284, real arg_1285,
                                            real arg_1286, real arg_1287,
                                            real arg_1288, real arg_1289) =>
                       let tmp_bop_1290 = (arg_1289 - 16834320.0) / 1440.0 in
                       let tmp_bop_1291 = tmp_bop_1290 / 365.0 in
                       let val_1292 = -(0.03 * tmp_bop_1291) in
                       let tmp_call_1294 = exp(val_1292) in
                       let tmp_bop_1295 = (arg_1289 - arg_1288) / 1440.0 in
                       let tmp_bop_1296 = tmp_bop_1295 / 365.0 in
                       let tmp_lit_1297 =
                         if arg_1285 < arg_1288
                         then arg_1285
                         else arg_1288 in
                       let tmp_lit_1298 =
                         if arg_1286 < arg_1289
                         then arg_1289
                         else arg_1286 in
                       let {tup_elem_1299, tup_elem_1300,
                            tup_elem_1301} = {arg_1284 + tmp_call_1294
                                              * tmp_bop_1296, tmp_lit_1297,
                                              tmp_lit_1298} in
                       {tup_elem_1299, tmp_lit_1297, tmp_lit_1298},
                     {0.0, 168307199.0, 3600.0}, val_1275, soac_v_1273,
                     soac_v_1274) in
           let tmp_bop_1308 = (tmp_red2_1306 - 16834320.0) / 1440.0 in
           let tmp_bop_1309 = tmp_bop_1308 / 365.0 in
           let val_1310 = -(0.03 * tmp_bop_1309) in
           let tmp_call_1311 = exp(val_1310) in
           let tmp_bop_1312 = (tmp_red2_1307 - 16834320.0) / 1440.0 in
           let tmp_bop_1313 = tmp_bop_1312 / 365.0 in
           let val_1314 = -(0.03 * tmp_bop_1313) in
           let tmp_call_1315 = exp(val_1314) in
           let strike_1316 = (tmp_call_1311 - tmp_call_1315) / tmp_red2_1305 in
           let tmp_bop_1317 = (tmp_call_1183 - 16834320.0) / 1440.0 in
           let sqrtt_1318 = tmp_bop_1317 / 365.0 in
           let tmp_size_1319 = size(0, soac_v_1273) in
           let val_1320 = replicate(tmp_size_1319, 0.0) in
           let tmp_size_1321 = size(0, soac_v_1273) in
           let tmp_e_1322 = tmp_size_1319 = tmp_size_1321 in
           let zip_assert_1323 = assert(tmp_e_1322) in
           let tmp_size_1324 = size(0, soac_v_1273) in
           let tmp_size_1325 = size(0, soac_v_1274) in
           let tmp_e_1326 = tmp_size_1324 = tmp_size_1325 in
           let zip_assert_1327 = assert(tmp_e_1326) in
           let comb_cert_1328 = conjoin(zip_assert_1323, zip_assert_1327) in
           let {tmp_red2_1347, tmp_red2_1348, tmp_red2_1349} =
             <comb_cert_1328>
             reduceT(fn {real, real, real} (real arg_1329, real arg_1330,
                                            real arg_1331, real arg_1332,
                                            real arg_1333, real arg_1334) =>
                       let tmp_bop_1335 = (arg_1334 - 16834320.0) / 1440.0 in
                       let tmp_bop_1336 = tmp_bop_1335 / 365.0 in
                       let val_1338 = -(0.03 * tmp_bop_1336) in
                       let tmp_call_1339 = exp(val_1338) in
                       let tmp_bop_1340 = (arg_1334 - arg_1333) / 1440.0 in
                       let tmp_bop_1341 = tmp_bop_1340 / 365.0 in
                       let tmp_lit_1342 =
                         if arg_1330 < arg_1333
                         then arg_1330
                         else arg_1333 in
                       let tmp_lit_1343 =
                         if arg_1331 < arg_1334
                         then arg_1334
                         else arg_1331 in
                       let {tup_elem_1344, tup_elem_1345,
                            tup_elem_1346} = {arg_1329 + tmp_call_1339
                                              * tmp_bop_1341, tmp_lit_1342,
                                              tmp_lit_1343} in
                       {tup_elem_1344, tmp_lit_1342, tmp_lit_1343},
                     {0.0, 168307199.0, 3600.0}, val_1320, soac_v_1273,
                     soac_v_1274) in
           let tmp_bop_1350 = (tmp_red2_1348 - 16834320.0) / 1440.0 in
           let tmp_bop_1351 = tmp_bop_1350 / 365.0 in
           let val_1352 = -(0.03 * tmp_bop_1351) in
           let tmp_call_1353 = exp(val_1352) in
           let tmp_bop_1354 = (tmp_red2_1349 - 16834320.0) / 1440.0 in
           let tmp_bop_1355 = tmp_bop_1354 / 365.0 in
           let val_1356 = -(0.03 * tmp_bop_1355) in
           let tmp_call_1357 = exp(val_1356) in
           let s0_1358 = (tmp_call_1353 - tmp_call_1357) / tmp_red2_1347 in
           let val_1359 = s0_1358 / strike_1316 in
           let tmp_call_1360 = log(val_1359) in
           let d1_1361 = tmp_call_1360 / (arg_13 * sqrtt_1318) + 0.5 * arg_13
                         * sqrtt_1318 in
           let d2_1364 = d1_1361 - (arg_13 * sqrtt_1318) in
           let u_1365 = d1_1361 / 1.4142135623730951 in
           let e_1383 =
             if u_1365 < 0.0
             then let val_1366 = -u_1365 in
                  let t_1367 = 1.0 / (1.0 + 0.3275911 * val_1366) in
                  let t2_1368 = t_1367 * t_1367 in
                  let t3_1369 = t_1367 * t2_1368 in
                  let t4_1370 = t2_1368 * t2_1368 in
                  let t5_1371 = t2_1368 * t3_1369 in
                  let val_1372 = -(val_1366 * val_1366) in
                  let tmp_call_1373 = exp(val_1372) in
                  let tmp_neg_1374 = 1.0 - ((0.254829592 * t_1367 + -0.284496736
                                             * t2_1368 + 1.421413741 * t3_1369
                                             + -1.453152027 * t4_1370
                                             + 1.061405429 * t5_1371)
                                            * tmp_call_1373) in
                  -tmp_neg_1374
             else let t_1375 = 1.0 / (1.0 + 0.3275911 * u_1365) in
                  let t2_1376 = t_1375 * t_1375 in
                  let t3_1377 = t_1375 * t2_1376 in
                  let t4_1378 = t2_1376 * t2_1376 in
                  let t5_1379 = t2_1376 * t3_1377 in
                  let val_1380 = -(u_1365 * u_1365) in
                  let tmp_call_1382 = exp(val_1380) in
                  1.0 - ((0.254829592 * t_1375 + -0.284496736 * t2_1376
                          + 1.421413741 * t3_1377 + -1.453152027 * t4_1378
                          + 1.061405429 * t5_1379) * tmp_call_1382) in
           let tmp_bop_1384 = 0.5 * (1.0 + e_1383) in
           let u_1385 = d2_1364 / 1.4142135623730951 in
           let e_1405 =
             if u_1385 < 0.0
             then let val_1386 = -u_1385 in
                  let t_1387 = 1.0 / (1.0 + 0.3275911 * val_1386) in
                  let t2_1391 = t_1387 * t_1387 in
                  let t3_1392 = t_1387 * t2_1391 in
                  let t4_1393 = t2_1391 * t2_1391 in
                  let t5_1394 = t2_1391 * t3_1392 in
                  let val_1395 = -(val_1386 * val_1386) in
                  let tmp_call_1396 = exp(val_1395) in
                  let tmp_neg_1397 = 1.0 - ((0.254829592 * t_1387 + -0.284496736
                                             * t2_1391 + 1.421413741 * t3_1392
                                             + -1.453152027 * t4_1393
                                             + 1.061405429 * t5_1394)
                                            * tmp_call_1396) in
                  -tmp_neg_1397
             else let t_1398 = 1.0 / (1.0 + 0.3275911 * u_1385) in
                  let t2_1399 = t_1398 * t_1398 in
                  let t3_1400 = t_1398 * t2_1399 in
                  let t4_1401 = t2_1399 * t2_1399 in
                  let t5_1402 = t2_1399 * t3_1400 in
                  let val_1403 = -(u_1385 * u_1385) in
                  let tmp_call_1404 = exp(val_1403) in
                  1.0 - ((0.254829592 * t_1398 + -0.284496736 * t2_1399
                          + 1.421413741 * t3_1400 + -1.453152027 * t4_1401
                          + 1.061405429 * t5_1402) * tmp_call_1404) in
           let tmp_bop_1406 = 0.5 * (1.0 + e_1405) in
           let market_price_1407 = tmp_red2_1347 * (s0_1358 * tmp_bop_1384
                                                    - (strike_1316
                                                       * tmp_bop_1406)) in
           let res_1408 = (g2pp_price_1164 - market_price_1407)
                          / market_price_1407 in
           let val_1409 = res_1408 * res_1408 in
           {val_1409},
         tup_arr_elem_2, tup_arr_elem_3, tup_arr_elem_6, tup_arr_elem_7) in
  let {untuple_1414} =
    reduceT(fn {real} (real x_1411, real y_1412) =>
              let val_1413 = x_1411 + y_1412 in
              {val_1413},
            {0.0}, untuple_1410) in
  let val_1415 = untuple_1414 / 196.0 in
  let tmp_call_1417 = sqrt(val_1415) in
  let rms_1418 = 100.0 * tmp_call_1417 in
  rms_1418
