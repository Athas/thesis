fun real main() =
  let {tup_arr_cert_0, tup_arr_elem_1, tup_arr_elem_2, tup_arr_elem_3,
       tup_arr_elem_4} =
    {Checked,
     [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0, 30.0,
      1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 25.0,
      30.0],
     [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0],
     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0,
      2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0,
      3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0,
      5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0,
      7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0,
      8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
      9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
      10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 15.0, 15.0, 15.0, 15.0, 15.0,
      15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 20.0, 20.0, 20.0,
      20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 25.0,
      25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,
      25.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0,
      30.0, 30.0, 30.0],
     [1.052, 0.81485, 0.6165, 0.46995, 0.38295, 0.3325, 0.3016, 0.2815, 0.26435,
      0.2496, 0.2516, 0.28835, 0.27155, 0.23465, 0.61445, 0.54805, 0.46795,
      0.3919, 0.3434, 0.3083, 0.28655, 0.2697, 0.25775, 0.2443, 0.26495,
      0.28195, 0.26845, 0.20995, 0.5835, 0.49255, 0.42825, 0.3695, 0.329,
      0.3022, 0.28165, 0.26615, 0.25485, 0.24375, 0.2718, 0.28135, 0.26865,
      0.2131, 0.5415, 0.46235, 0.403, 0.3559, 0.3232, 0.29675, 0.27715, 0.26385,
      0.254, 0.2454, 0.27845, 0.2821, 0.2678, 0.2131, 0.517, 0.446, 0.3903,
      0.34755, 0.3166, 0.29305, 0.2745, 0.2639, 0.2534, 0.2499, 0.28315, 0.2825,
      0.277, 0.21175, 0.478, 0.42105, 0.37715, 0.3378, 0.311, 0.2895, 0.2745,
      0.264, 0.2573, 0.25475, 0.28815, 0.28195, 0.26015, 0.2097, 0.452, 0.4074,
      0.368, 0.3307, 0.30645, 0.2877, 0.27475, 0.2664, 0.26155, 0.26035, 0.292,
      0.2825, 0.25685, 0.2081, 0.43395, 0.39445, 0.35885, 0.3281, 0.30395,
      0.28745, 0.2767, 0.27065, 0.26625, 0.26625, 0.2921, 0.2814, 0.25265,
      0.2083, 0.42285, 0.3857, 0.3521, 0.3239, 0.30285, 0.2895, 0.2799, 0.27485,
      0.2712, 0.27205, 0.29205, 0.27855, 0.24945, 0.219, 0.41765, 0.38095,
      0.34795, 0.3217, 0.30365, 0.2916, 0.2842, 0.27985, 0.2769, 0.2775, 0.306,
      0.2763, 0.2458, 0.22, 0.37905, 0.35465, 0.33505, 0.31725, 0.3008, 0.29075,
      0.28365, 0.2787, 0.27385, 0.2709, 0.2689, 0.24225, 0.2096, 0.18285,
      0.37975, 0.3605, 0.3407, 0.321, 0.3063, 0.29315, 0.28395, 0.2777, 0.27205,
      0.26675, 0.24875, 0.21735, 0.1939, 0.17205, 0.38115, 0.3627, 0.34425,
      0.3222, 0.3084, 0.2941, 0.28285, 0.2751, 0.2663, 0.26055, 0.2338, 0.20735,
      0.1823, 0.1686, 0.38285, 0.3633, 0.34125, 0.3188, 0.30305, 0.2888, 0.2748,
      0.26725, 0.25985, 0.25165, 0.2267, 0.1989, 0.18115, 0.16355]} in
  let tmp_lit_5 = [0.0, 0.6568095668820999, -0.6568095668820998,
                   -1.3265570844949335, 1.326557084494933, 2.025948015825757,
                   -2.025948015825756, -2.7832900997816497, 2.7832900997816474,
                   3.6684708465595857, -3.668470846559584] in
  let norm_6 = [0.6547592869145917, 0.6609604194409607, 0.6609604194409606,
                0.6812118810666693, 0.681211881066669, 0.7219536247283848,
                0.7219536247283852, 0.8025168688510406, 0.8025168688510397,
                1.0065267861723648, 1.0065267861723775] in
  let {untuple_1874} =
    redomapT(fn {real} (real x_7, real y_8) =>
               let val_9 = x_7 + y_8 in
               {val_9},
             fn {real} (real x_10, real arg_11, real arg_12, real arg_13,
                        real arg_14) =>
               let bop_15 = 12.0 * arg_14 in
               let val_16 = bop_15 / arg_13 in
               let tmp_call_17 = trunc(val_16) in
               let bop_18 = tmp_call_17 - 1 in
               let bop_19 = tmp_call_17 = 1 in
               let val_20 = arg_11 * 12.0 in
               let nbmonths_21 = trunc(val_20) in
               let m_22 = 1 + nbmonths_21 in
               let val_23 = m_22 - 1 in
               let bop_24 = val_23 / 12 in
               let bop_25 = bop_24 * 12 in
               let bop_26 = 2012 + bop_24 in
               let bop_27 = bop_26 - 1 in
               let tmp_bop_28 = val_23 - bop_25 in
               let bop_29 = tmp_bop_28 + 1 in
               let bop_30 = bop_29 <= 0 in
               let bop_31 = bop_29 + 12 in
               let {y_32, m_33} =
                 if bop_30
                 then {bop_27, bop_31}
                 else {bop_26, bop_29} in
               let bop_34 = y_32 / 4 in
               let bop_35 = bop_34 * 4 in
               let bop_36 = y_32 / 100 in
               let bop_37 = bop_36 * 100 in
               let bop_38 = y_32 / 400 in
               let bop_39 = bop_38 * 400 in
               let bop_40 = m_33 = 2 in
               let bop_41 = m_33 = 4 in
               let bop_42 = m_33 = 6 in
               let bop_43 = m_33 = 9 in
               let bop_44 = m_33 = 11 in
               let bop_45 = m_33 = 1 in
               let norm_46 = bop_45 || bop_40 in
               let bop_47 = y_32 + 4800 in
               let bop_48 = bop_47 - 1 in
               let bop_49 = 1461 * bop_48 in
               let bop_50 = bop_49 / 4 in
               let bop_51 = 1461 * bop_47 in
               let bop_52 = bop_51 / 4 in
               let bop_53 = m_33 + 10 in
               let bop_54 = 367 * bop_53 in
               let bop_55 = bop_54 / 12 in
               let bop_56 = bop_50 + bop_55 in
               let bop_57 = y_32 + 4900 in
               let bop_58 = bop_57 - 1 in
               let bop_59 = bop_58 / 100 in
               let bop_60 = 3 * bop_59 in
               let bop_61 = bop_60 / 4 in
               let bop_62 = bop_56 - bop_61 in
               let bop_63 = bop_57 / 100 in
               let bop_64 = 3 * bop_63 in
               let bop_65 = bop_64 / 4 in
               let bop_66 = m_33 - 2 in
               let bop_67 = 367 * bop_66 in
               let bop_68 = bop_67 / 12 in
               let bop_69 = bop_52 + bop_68 in
               let bop_70 = bop_69 - bop_65 in
               let ym_71 =
                 if norm_46
                 then bop_62
                 else bop_70 in
               let tmp_bop_72 = y_32 - bop_35 in
               let bop_73 = tmp_bop_72 = 0 in
               let tmp_bop_74 = y_32 - bop_37 in
               let bop_75 = tmp_bop_74 = 0 in
               let not_76 = not bop_75 in
               let tmp_bop_77 = y_32 - bop_39 in
               let bop_78 = tmp_bop_77 = 0 in
               let norm_79 = not_76 || bop_78 in
               let tmp_and_80 = bop_73 && norm_79 in
               let norm_81 = bop_40 && tmp_and_80 in
               let val_85 =
                 if norm_81
                 then 29
                 else if bop_40
                      then 28
                      else let norm_82 = bop_41 || bop_42 in
                           let norm_83 = norm_82 || bop_43 in
                           let norm_84 = norm_83 || bop_44 in
                           if norm_84
                           then 30
                           else 31 in
               let bop_86 = 1 < val_85 in
               let tmp_lit_87 =
                 if bop_86
                 then 1
                 else val_85 in
               let bop_88 = ym_71 + tmp_lit_87 in
               let bop_89 = bop_88 - 32075 in
               let tmp_90 = bop_89 - 2444238 in
               let bop_91 = tmp_90 * 1440 in
               let resmin_92 = bop_91 + 720 in
               let tmp_call_93 = toReal(resmin_92) in
               let bop_94 = tmp_call_93 - 16834320.0 in
               let tmp_bop_95 = bop_94 / 1440.0 in
               let tmat0_96 = tmp_bop_95 / 365.0 in
               let bop_97 = 0.02453 * tmat0_96 in
               let val_98 = -bop_97 in
               let tmp_call_99 = exp(val_98) in
               let bop_100 = 1.0 - tmp_call_99 in
               let bop_101 = 0.858792992801827 * bop_100 in
               let ba_102 = bop_100 / 0.02453 in
               let bop_103 = 81.53281695882593 * tmp_call_99 in
               let exp2xtau_104 = tmp_call_99 * tmp_call_99 in
               let bop_105 = 20.383204239706483 * exp2xtau_104 in
               let bop_106 = 0.98376 * tmat0_96 in
               let val_107 = -bop_106 in
               let tmp_call_108 = exp(val_107) in
               let bop_109 = 1.0 - tmp_call_108 in
               let bop_110 = -0.08240592094585045 * bop_109 in
               let bb_111 = bop_109 / 0.98376 in
               let bop_112 = 2.033016182808815 * tmp_call_108 in
               let exp2xtau_113 = tmp_call_108 * tmp_call_108 in
               let bop_114 = 0.5082540457022038 * exp2xtau_113 in
               let val_115 = val_107 - bop_97 in
               let tmp_call_116 = exp(val_115) in
               let val_117 = val_98 - bop_106 in
               let tmp_call_118 = exp(val_117) in
               let bop_119 = tmat0_96 + bop_103 in
               let bop_120 = bop_119 - bop_105 in
               let bop_121 = bop_120 - 61.149612719119446 in
               let t1_122 = 0.9556596754408898 * bop_121 in
               let bop_123 = tmat0_96 + bop_112 in
               let bop_124 = bop_123 - bop_114 in
               let bop_125 = bop_124 - 1.5247621371066113 in
               let t2_126 = 0.014460761693212401 * bop_125 in
               let bop_127 = t1_122 + t2_126 in
               let bop_128 = 1.00829 * tmat0_96 in
               let val_129 = -bop_128 in
               let tmp_call_130 = exp(val_129) in
               let bop_131 = 1.0 - tmp_call_130 in
               let tmp_bop_132 = bop_131 / 1.00829 in
               let bop_133 = tmat0_96 - ba_102 in
               let bop_134 = bop_133 - bb_111 in
               let bop_135 = bop_134 + tmp_bop_132 in
               let t3_136 = -0.19373336527812574 * bop_135 in
               let bop_137 = bop_127 + t3_136 in
               let bop_138 = 0.03 * tmat0_96 in
               let val_139 = -bop_138 in
               let tmp_call_140 = exp(val_139) in
               let bop_141 = 0.04906 * tmat0_96 in
               let val_142 = -bop_141 in
               let tmp_call_143 = exp(val_142) in
               let bop_144 = 1.0 - tmp_call_143 in
               let val_145 = bop_144 / 0.04906 in
               let tmp_call_146 = sqrt(val_145) in
               let sigmax_147 = 0.02398 * tmp_call_146 in
               let eps_148 = 0.5 * sigmax_147 in
               let sqrt2sigmax_149 = 1.4142135623730951 * sigmax_147 in
               let bop_150 = 1.96752 * tmat0_96 in
               let val_151 = -bop_150 in
               let tmp_call_152 = exp(val_151) in
               let bop_153 = 1.0 - tmp_call_152 in
               let val_154 = bop_153 / 1.96752 in
               let tmp_call_155 = sqrt(val_154) in
               let sigmay_156 = 0.1183 * tmp_call_155 in
               let bop_157 = sigmax_147 * sigmay_156 in
               let bop_158 = -0.0023375512159999998 / bop_157 in
               let rhoxy_159 = bop_158 * tmp_bop_132 in
               let bop_160 = rhoxy_159 * rhoxy_159 in
               let rhoxyc_161 = 1.0 - bop_160 in
               let bop_162 = 0.5 * rhoxyc_161 in
               let bop_163 = rhoxyc_161 / 0.98376 in
               let rhoxycs_164 = sqrt(rhoxyc_161) in
               let bop_165 = sigmax_147 * rhoxycs_164 in
               let bop_166 = -3.71901648545568 * rhoxycs_164 in
               let t2_167 = rhoxy_159 / bop_165 in
               let bop_168 = rhoxy_159 * sigmay_156 in
               let t4_169 = bop_168 / sigmax_147 in
               let bop_170 = bop_162 * sigmay_156 in
               let bop_171 = bop_170 * sigmay_156 in
               let sigmay_rhoxycs_172 = sigmay_156 * rhoxycs_164 in
               let bop_173 = tmat0_96 + tmat0_96 in
               let bop_174 = 0.02453 * bop_173 in
               let val_175 = -bop_174 in
               let tmp_call_176 = exp(val_175) in
               let bop_177 = 0.98376 * bop_173 in
               let val_178 = -bop_177 in
               let tmp_call_179 = exp(val_178) in
               let val_180 = trunc(tmp_call_93) in
               let jul_181 = val_180 / 1440 in
               let bop_182 = jul_181 + 68569 in
               let l_183 = bop_182 + 2444238 in
               let bop_184 = 4 * l_183 in
               let n_185 = bop_184 / 146097 in
               let bop_186 = 146097 * n_185 in
               let bop_187 = bop_186 + 3 in
               let bop_188 = bop_187 / 4 in
               let bop_189 = n_185 - 49 in
               let bop_190 = 100 * bop_189 in
               let l_191 = l_183 - bop_188 in
               let bop_192 = l_191 + 1 in
               let bop_193 = 4000 * bop_192 in
               let i_194 = bop_193 / 1461001 in
               let bop_195 = 1461 * i_194 in
               let bop_196 = bop_195 / 4 in
               let bop_197 = bop_190 + i_194 in
               let bop_198 = l_191 - bop_196 in
               let l_199 = bop_198 + 31 in
               let bop_200 = 80 * l_199 in
               let j_201 = bop_200 / 2447 in
               let bop_202 = 2447 * j_201 in
               let bop_203 = bop_202 / 80 in
               let bop_204 = j_201 + 2 in
               let l_205 = j_201 / 11 in
               let bop_206 = 12 * l_205 in
               let m_207 = bop_204 - bop_206 in
               let y_208 = bop_197 + l_205 in
               let d_209 = l_199 - bop_203 in
               let bop_210 = jul_181 * 1440 in
               let daytime_211 = val_180 - bop_210 in
               let bop_212 = daytime_211 = 720 in
               let bop_213 = daytime_211 / 60 in
               let bop_214 = bop_213 * 60 in
               let tmp_lit_215 = daytime_211 - bop_214 in
               let {y_216, m_217, d_218, h_219, min_220} =
                 if bop_212
                 then {y_208, m_207, d_209, 12, 0}
                 else {y_208, m_207, d_209, bop_213, tmp_lit_215} in
               let bop_221 = tmp_call_93 - tmp_call_93 in
               let tmp_bop_222 = bop_221 / 1440.0 in
               let tmatt_223 = tmp_bop_222 / 365.0 in
               let bop_224 = 0.02453 * tmatt_223 in
               let val_225 = -bop_224 in
               let tmp_call_226 = exp(val_225) in
               let tmp5_227 = tmp_call_226 - tmp_call_176 in
               let bop_228 = 0.4778298377204449 * tmp5_227 in
               let bop_229 = bop_101 - bop_228 in
               let tmp6_230 = tmp_call_226 - tmp_call_118 in
               let bop_231 = -0.09451007915679466 * tmp6_230 in
               let bop_232 = 0.98376 * tmatt_223 in
               let val_233 = -bop_232 in
               let tmp_call_234 = exp(val_233) in
               let tmp6_235 = tmp_call_234 - tmp_call_116 in
               let bop_236 = -0.0023566034822682085 * tmp6_235 in
               let tmp_neg_237 = bop_229 - bop_236 in
               let mux_238 = -tmp_neg_237 in
               let bop_239 = mux_238 * t4_169 in
               let bop_240 = mux_238 - mux_238 in
               let bop_241 = rhoxy_159 * bop_240 in
               let val_242 = mux_238 + eps_148 in
               let bop_243 = val_242 - mux_238 in
               let bop_244 = rhoxy_159 * bop_243 in
               let val_245 = mux_238 - eps_148 in
               let bop_246 = val_245 - mux_238 in
               let bop_247 = rhoxy_159 * bop_246 in
               let tmp5_248 = tmp_call_234 - tmp_call_179 in
               let bop_249 = 0.007230380846606201 * tmp5_248 in
               let bop_250 = bop_110 - bop_249 in
               let tmp_neg_251 = bop_250 - bop_231 in
               let muy_252 = -tmp_neg_251 in
               let val_256 =
                 if norm_81
                 then 29
                 else if bop_40
                      then 28
                      else let norm_253 = bop_41 || bop_42 in
                           let norm_254 = norm_253 || bop_43 in
                           let norm_255 = norm_254 || bop_44 in
                           if norm_255
                           then 30
                           else 31 in
               let bop_257 = 1 < val_256 in
               let tmp_lit_258 =
                 if bop_257
                 then 1
                 else val_256 in
               let bop_259 = ym_71 + tmp_lit_258 in
               let bop_260 = bop_259 - 32075 in
               let tmp_261 = bop_260 - 2444238 in
               let bop_262 = tmp_261 * 1440 in
               let resmin_263 = bop_262 + 720 in
               let tmp_call_264 = toReal(resmin_263) in
               let bop_265 = tmp_call_264 - 16834320.0 in
               let tmp_bop_266 = bop_265 / 1440.0 in
               let sqrtt_267 = tmp_bop_266 / 365.0 in
               let bop_268 = arg_12 * sqrtt_267 in
               let val_269 = trunc(tmp_call_264) in
               let jul_270 = val_269 / 1440 in
               let bop_271 = jul_270 + 68569 in
               let l_272 = bop_271 + 2444238 in
               let bop_273 = 4 * l_272 in
               let n_274 = bop_273 / 146097 in
               let bop_275 = 146097 * n_274 in
               let bop_276 = bop_275 + 3 in
               let bop_277 = bop_276 / 4 in
               let bop_278 = n_274 - 49 in
               let bop_279 = 100 * bop_278 in
               let l_280 = l_272 - bop_277 in
               let bop_281 = l_280 + 1 in
               let bop_282 = 4000 * bop_281 in
               let i_283 = bop_282 / 1461001 in
               let bop_284 = 1461 * i_283 in
               let bop_285 = bop_284 / 4 in
               let bop_286 = bop_279 + i_283 in
               let bop_287 = l_280 - bop_285 in
               let l_288 = bop_287 + 31 in
               let bop_289 = 80 * l_288 in
               let j_290 = bop_289 / 2447 in
               let bop_291 = 2447 * j_290 in
               let bop_292 = bop_291 / 80 in
               let bop_293 = j_290 + 2 in
               let l_294 = j_290 / 11 in
               let bop_295 = 12 * l_294 in
               let m_296 = bop_293 - bop_295 in
               let y_297 = bop_286 + l_294 in
               let d_298 = l_288 - bop_292 in
               let bop_299 = jul_270 * 1440 in
               let daytime_300 = val_269 - bop_299 in
               let bop_301 = daytime_300 = 720 in
               let bop_302 = daytime_300 / 60 in
               let bop_303 = bop_302 * 60 in
               let tmp_lit_304 = daytime_300 - bop_303 in
               let {y_305, m_306, d_307, h_308, min_309} =
                 if bop_301
                 then {y_297, m_296, d_298, 12, 0}
                 else {y_297, m_296, d_298, bop_302, tmp_lit_304} in
               let bop_310 = 0.5 * arg_12 in
               let bop_311 = bop_310 * sqrtt_267 in
               let nbmonths_312 = trunc(arg_13) in
               let {soac_v_502, soac_v_503} =
                 mapT(fn {real, real} (int i_313) =>
                        let tmp_call_314 = toReal(i_313) in
                        let val_315 = tmp_call_314 * arg_13 in
                        let nbmonths_316 = trunc(val_315) in
                        let m_317 = m_217 + nbmonths_316 in
                        let val_318 = m_317 - 1 in
                        let bop_319 = val_318 / 12 in
                        let bop_320 = bop_319 * 12 in
                        let bop_321 = y_216 + bop_319 in
                        let bop_322 = bop_321 - 1 in
                        let tmp_bop_323 = val_318 - bop_320 in
                        let bop_324 = tmp_bop_323 + 1 in
                        let bop_325 = bop_324 <= 0 in
                        let bop_326 = bop_324 + 12 in
                        let {y_327, m_328} =
                          if bop_325
                          then {bop_322, bop_326}
                          else {bop_321, bop_324} in
                        let bop_329 = y_327 / 4 in
                        let bop_330 = bop_329 * 4 in
                        let bop_331 = y_327 / 100 in
                        let bop_332 = bop_331 * 100 in
                        let bop_333 = y_327 / 400 in
                        let bop_334 = bop_333 * 400 in
                        let bop_335 = m_328 = 2 in
                        let bop_336 = m_328 = 4 in
                        let bop_337 = m_328 = 6 in
                        let bop_338 = m_328 = 9 in
                        let bop_339 = m_328 = 11 in
                        let bop_340 = m_328 = 1 in
                        let norm_341 = bop_340 || bop_335 in
                        let bop_342 = y_327 + 4800 in
                        let bop_343 = bop_342 - 1 in
                        let bop_344 = 1461 * bop_343 in
                        let bop_345 = bop_344 / 4 in
                        let bop_346 = 1461 * bop_342 in
                        let bop_347 = bop_346 / 4 in
                        let bop_348 = m_328 + 10 in
                        let bop_349 = 367 * bop_348 in
                        let bop_350 = bop_349 / 12 in
                        let bop_351 = bop_345 + bop_350 in
                        let bop_352 = y_327 + 4900 in
                        let bop_353 = bop_352 - 1 in
                        let bop_354 = bop_353 / 100 in
                        let bop_355 = 3 * bop_354 in
                        let bop_356 = bop_355 / 4 in
                        let bop_357 = bop_351 - bop_356 in
                        let bop_358 = bop_352 / 100 in
                        let bop_359 = 3 * bop_358 in
                        let bop_360 = bop_359 / 4 in
                        let bop_361 = m_328 - 2 in
                        let bop_362 = 367 * bop_361 in
                        let bop_363 = bop_362 / 12 in
                        let bop_364 = bop_347 + bop_363 in
                        let bop_365 = bop_364 - bop_360 in
                        let ym_366 =
                          if norm_341
                          then bop_357
                          else bop_365 in
                        let tmp_bop_367 = y_327 - bop_330 in
                        let bop_368 = tmp_bop_367 = 0 in
                        let tmp_bop_369 = y_327 - bop_332 in
                        let bop_370 = tmp_bop_369 = 0 in
                        let not_371 = not bop_370 in
                        let tmp_bop_372 = y_327 - bop_334 in
                        let bop_373 = tmp_bop_372 = 0 in
                        let norm_374 = not_371 || bop_373 in
                        let tmp_and_375 = bop_368 && norm_374 in
                        let norm_376 = bop_335 && tmp_and_375 in
                        let val_380 =
                          if norm_376
                          then 29
                          else if bop_335
                               then 28
                               else let norm_377 = bop_336 || bop_337 in
                                    let norm_378 = norm_377 || bop_338 in
                                    let norm_379 = norm_378 || bop_339 in
                                    if norm_379
                                    then 30
                                    else 31 in
                        let bop_381 = d_218 < val_380 in
                        let tmp_lit_382 =
                          if bop_381
                          then d_218
                          else val_380 in
                        let bop_383 = ym_366 + tmp_lit_382 in
                        let bop_384 = bop_383 - 32075 in
                        let tmp_385 = bop_384 - 2444238 in
                        let bop_386 = tmp_385 * 1440 in
                        let resmin_387 = bop_386 + 720 in
                        let tmp_call_388 = toReal(resmin_387) in
                        let val_389 = trunc(tmp_call_388) in
                        let jul_390 = val_389 / 1440 in
                        let bop_391 = jul_390 + 68569 in
                        let l_392 = bop_391 + 2444238 in
                        let bop_393 = 4 * l_392 in
                        let n_394 = bop_393 / 146097 in
                        let bop_395 = 146097 * n_394 in
                        let bop_396 = bop_395 + 3 in
                        let bop_397 = bop_396 / 4 in
                        let bop_398 = n_394 - 49 in
                        let bop_399 = 100 * bop_398 in
                        let l_400 = l_392 - bop_397 in
                        let bop_401 = l_400 + 1 in
                        let bop_402 = 4000 * bop_401 in
                        let i_403 = bop_402 / 1461001 in
                        let bop_404 = 1461 * i_403 in
                        let bop_405 = bop_404 / 4 in
                        let bop_406 = bop_399 + i_403 in
                        let bop_407 = l_400 - bop_405 in
                        let l_408 = bop_407 + 31 in
                        let bop_409 = 80 * l_408 in
                        let j_410 = bop_409 / 2447 in
                        let bop_411 = 2447 * j_410 in
                        let bop_412 = bop_411 / 80 in
                        let bop_413 = j_410 + 2 in
                        let l_414 = j_410 / 11 in
                        let bop_415 = 12 * l_414 in
                        let m_416 = bop_413 - bop_415 in
                        let y_417 = bop_406 + l_414 in
                        let d_418 = l_408 - bop_412 in
                        let bop_419 = jul_390 * 1440 in
                        let daytime_420 = val_389 - bop_419 in
                        let bop_421 = daytime_420 = 720 in
                        let bop_422 = daytime_420 / 60 in
                        let bop_423 = bop_422 * 60 in
                        let tmp_lit_424 = daytime_420 - bop_423 in
                        let {y_425, m_426, d_427, h_428, min_429} =
                          if bop_421
                          then {y_417, m_416, d_418, 12, 0}
                          else {y_417, m_416, d_418, bop_422, tmp_lit_424} in
                        let m_430 = m_426 + nbmonths_312 in
                        let val_431 = m_430 - 1 in
                        let bop_432 = val_431 / 12 in
                        let bop_433 = bop_432 * 12 in
                        let tmp_bop_434 = val_431 - bop_433 in
                        let bop_435 = tmp_bop_434 + 1 in
                        let bop_436 = bop_435 <= 0 in
                        let bop_437 = bop_435 + 12 in
                        let bop_438 = y_425 + bop_432 in
                        let bop_439 = bop_438 - 1 in
                        let {y_440, m_441} =
                          if bop_436
                          then {bop_439, bop_437}
                          else {bop_438, bop_435} in
                        let bop_442 = y_440 / 4 in
                        let bop_443 = bop_442 * 4 in
                        let bop_444 = y_440 / 100 in
                        let bop_445 = bop_444 * 100 in
                        let bop_446 = y_440 / 400 in
                        let bop_447 = bop_446 * 400 in
                        let bop_448 = m_441 = 2 in
                        let bop_449 = m_441 = 4 in
                        let bop_450 = m_441 = 6 in
                        let bop_451 = m_441 = 9 in
                        let bop_452 = m_441 = 11 in
                        let bop_453 = m_441 = 1 in
                        let norm_454 = bop_453 || bop_448 in
                        let bop_455 = y_440 + 4800 in
                        let bop_456 = bop_455 - 1 in
                        let bop_457 = 1461 * bop_456 in
                        let bop_458 = bop_457 / 4 in
                        let bop_459 = 1461 * bop_455 in
                        let bop_460 = bop_459 / 4 in
                        let bop_461 = m_441 + 10 in
                        let bop_462 = 367 * bop_461 in
                        let bop_463 = bop_462 / 12 in
                        let bop_464 = bop_458 + bop_463 in
                        let bop_465 = y_440 + 4900 in
                        let bop_466 = bop_465 - 1 in
                        let bop_467 = bop_466 / 100 in
                        let bop_468 = 3 * bop_467 in
                        let bop_469 = bop_468 / 4 in
                        let bop_470 = bop_464 - bop_469 in
                        let bop_471 = bop_465 / 100 in
                        let bop_472 = 3 * bop_471 in
                        let bop_473 = bop_472 / 4 in
                        let bop_474 = m_441 - 2 in
                        let bop_475 = 367 * bop_474 in
                        let bop_476 = bop_475 / 12 in
                        let bop_477 = bop_460 + bop_476 in
                        let bop_478 = bop_477 - bop_473 in
                        let ym_479 =
                          if norm_454
                          then bop_470
                          else bop_478 in
                        let tmp_bop_480 = y_440 - bop_443 in
                        let bop_481 = tmp_bop_480 = 0 in
                        let tmp_bop_482 = y_440 - bop_445 in
                        let bop_483 = tmp_bop_482 = 0 in
                        let not_484 = not bop_483 in
                        let tmp_bop_485 = y_440 - bop_447 in
                        let bop_486 = tmp_bop_485 = 0 in
                        let norm_487 = not_484 || bop_486 in
                        let tmp_and_488 = bop_481 && norm_487 in
                        let norm_489 = bop_448 && tmp_and_488 in
                        let val_493 =
                          if norm_489
                          then 29
                          else if bop_448
                               then 28
                               else let norm_490 = bop_449 || bop_450 in
                                    let norm_491 = norm_490 || bop_451 in
                                    let norm_492 = norm_491 || bop_452 in
                                    if norm_492
                                    then 30
                                    else 31 in
                        let bop_494 = d_427 < val_493 in
                        let tmp_lit_495 =
                          if bop_494
                          then d_427
                          else val_493 in
                        let bop_496 = ym_479 + tmp_lit_495 in
                        let bop_497 = bop_496 - 32075 in
                        let tmp_498 = bop_497 - 2444238 in
                        let bop_499 = tmp_498 * 1440 in
                        let resmin_500 = bop_499 + 720 in
                        let tmp_call_501 = toReal(resmin_500) in
                        {tmp_call_388, tmp_call_501},
                      iota(tmp_call_17)) in
               let {tmp_red2_545, tmp_red2_546, tmp_red2_547} =
                 redomapT(fn {real, real, real} (real arg_504, real arg_505,
                                                 real arg_506, real arg_507,
                                                 real arg_508, real arg_509) =>
                            let bop_510 = arg_509 - 16834320.0 in
                            let tmp_bop_511 = bop_510 / 1440.0 in
                            let tmp_bop_512 = tmp_bop_511 / 365.0 in
                            let bop_513 = 0.03 * tmp_bop_512 in
                            let val_514 = -bop_513 in
                            let tmp_call_515 = exp(val_514) in
                            let bop_516 = arg_509 - arg_508 in
                            let tmp_bop_517 = bop_516 / 1440.0 in
                            let tmp_bop_518 = tmp_bop_517 / 365.0 in
                            let bop_519 = tmp_call_515 * tmp_bop_518 in
                            let bop_520 = arg_504 + bop_519 in
                            let bop_521 = arg_505 < arg_508 in
                            let tmp_lit_522 =
                              if bop_521
                              then arg_505
                              else arg_508 in
                            let bop_523 = arg_506 < arg_509 in
                            let tmp_lit_524 =
                              if bop_523
                              then arg_509
                              else arg_506 in
                            {bop_520, tmp_lit_522, tmp_lit_524},
                          fn {real, real, real} (real arg_525, real arg_526,
                                                 real arg_527, real arg_528,
                                                 real arg_529) =>
                            let bop_530 = arg_528 - 16834320.0 in
                            let tmp_bop_531 = bop_530 / 1440.0 in
                            let tmp_bop_532 = tmp_bop_531 / 365.0 in
                            let bop_533 = 0.03 * tmp_bop_532 in
                            let val_534 = -bop_533 in
                            let tmp_call_535 = exp(val_534) in
                            let bop_536 = arg_528 - arg_529 in
                            let tmp_bop_537 = bop_536 / 1440.0 in
                            let tmp_bop_538 = tmp_bop_537 / 365.0 in
                            let bop_539 = tmp_call_535 * tmp_bop_538 in
                            let bop_540 = arg_525 + bop_539 in
                            let bop_541 = arg_526 < arg_529 in
                            let tmp_lit_542 =
                              if bop_541
                              then arg_526
                              else arg_529 in
                            let bop_543 = arg_527 < arg_528 in
                            let tmp_lit_544 =
                              if bop_543
                              then arg_528
                              else arg_527 in
                            {bop_540, tmp_lit_542, tmp_lit_544},
                          {0.0, 168307199.0, 3600.0}, soac_v_503, soac_v_502) in
               let bop_548 = tmp_red2_546 - 16834320.0 in
               let tmp_bop_549 = bop_548 / 1440.0 in
               let tmp_bop_550 = tmp_bop_549 / 365.0 in
               let bop_551 = 0.03 * tmp_bop_550 in
               let val_552 = -bop_551 in
               let tmp_call_553 = exp(val_552) in
               let bop_554 = tmp_red2_547 - 16834320.0 in
               let tmp_bop_555 = bop_554 / 1440.0 in
               let tmp_bop_556 = tmp_bop_555 / 365.0 in
               let bop_557 = 0.03 * tmp_bop_556 in
               let val_558 = -bop_557 in
               let tmp_call_559 = exp(val_558) in
               let bop_560 = tmp_call_553 - tmp_call_559 in
               let strike_561 = bop_560 / tmp_red2_545 in
               let {soac_v_667, soac_v_670, soac_v_671, soac_v_672, soac_v_673,
                    soac_v_674} =
                 mapT(fn {real, real, real, real, real, real} (real arg_562,
                                                               int i_563) =>
                        let bop_564 = soac_v_503[i_563] - soac_v_502[i_563] in
                        let tmp_bop_565 = bop_564 / 1440.0 in
                        let tau_566 = tmp_bop_565 / 365.0 in
                        let bop_567 = tau_566 * strike_561 in
                        let bop_568 = 1.0 + bop_567 in
                        let bop_569 = arg_562 - 16834320.0 in
                        let tmp_bop_570 = bop_569 / 1440.0 in
                        let val_571 = tmp_bop_570 / 365.0 in
                        let bop_572 = 0.02453 * val_571 in
                        let val_573 = -bop_572 in
                        let tmp_call_574 = exp(val_573) in
                        let bop_575 = 1.0 - tmp_call_574 in
                        let ba_576 = bop_575 / 0.02453 in
                        let bop_577 = 81.53281695882593 * tmp_call_574 in
                        let exp2xtau_578 = tmp_call_574 * tmp_call_574 in
                        let bop_579 = 20.383204239706483 * exp2xtau_578 in
                        let bop_580 = 0.98376 * val_571 in
                        let val_581 = -bop_580 in
                        let tmp_call_582 = exp(val_581) in
                        let bop_583 = 1.0 - tmp_call_582 in
                        let bb_584 = bop_583 / 0.98376 in
                        let bop_585 = 2.033016182808815 * tmp_call_582 in
                        let exp2xtau_586 = tmp_call_582 * tmp_call_582 in
                        let bop_587 = 0.5082540457022038 * exp2xtau_586 in
                        let bop_588 = 1.00829 * val_571 in
                        let val_589 = -bop_588 in
                        let tmp_call_590 = exp(val_589) in
                        let bop_591 = 1.0 - tmp_call_590 in
                        let tmp_bop_592 = bop_591 / 1.00829 in
                        let bop_593 = 0.03 * val_571 in
                        let val_594 = -bop_593 in
                        let tmp_call_595 = exp(val_594) in
                        let bop_596 = tmp_call_595 / tmp_call_140 in
                        let bop_597 = val_571 - ba_576 in
                        let bop_598 = bop_597 - bb_584 in
                        let bop_599 = bop_598 + tmp_bop_592 in
                        let t3_600 = -0.19373336527812574 * bop_599 in
                        let bop_601 = val_571 + bop_577 in
                        let bop_602 = bop_601 - bop_579 in
                        let bop_603 = bop_602 - 61.149612719119446 in
                        let t1_604 = 0.9556596754408898 * bop_603 in
                        let bop_605 = val_571 + bop_585 in
                        let bop_606 = bop_605 - bop_587 in
                        let bop_607 = bop_606 - 1.5247621371066113 in
                        let t2_608 = 0.014460761693212401 * bop_607 in
                        let bop_609 = t1_604 + t2_608 in
                        let bop_610 = bop_609 + t3_600 in
                        let bop_611 = arg_562 - tmp_call_93 in
                        let tmp_bop_612 = bop_611 / 1440.0 in
                        let val_613 = tmp_bop_612 / 365.0 in
                        let bop_614 = 0.02453 * val_613 in
                        let val_615 = -bop_614 in
                        let tmp_call_616 = exp(val_615) in
                        let bop_617 = 1.0 - tmp_call_616 in
                        let ba_618 = bop_617 / 0.02453 in
                        let bop_619 = 81.53281695882593 * tmp_call_616 in
                        let exp2xtau_620 = tmp_call_616 * tmp_call_616 in
                        let bop_621 = 20.383204239706483 * exp2xtau_620 in
                        let bop_622 = 0.98376 * val_613 in
                        let val_623 = -bop_622 in
                        let tmp_call_624 = exp(val_623) in
                        let bop_625 = 1.0 - tmp_call_624 in
                        let bb_626 = bop_625 / 0.98376 in
                        let bop_627 = bop_171 * bb_626 in
                        let t3_628 = muy_252 - bop_627 in
                        let bop_629 = bop_239 - t3_628 in
                        let bop_630 = bb_626 * t4_169 in
                        let bop_631 = ba_618 + bop_630 in
                        let scale_632 = -bop_631 in
                        let cst_633 = bb_626 * bop_629 in
                        let tmp_call_634 = exp(cst_633) in
                        let bop_635 = 2.033016182808815 * tmp_call_624 in
                        let exp2xtau_636 = tmp_call_624 * tmp_call_624 in
                        let bop_637 = 0.5082540457022038 * exp2xtau_636 in
                        let bop_638 = 1.00829 * val_613 in
                        let val_639 = -bop_638 in
                        let tmp_call_640 = exp(val_639) in
                        let bop_641 = 1.0 - tmp_call_640 in
                        let tmp_bop_642 = bop_641 / 1.00829 in
                        let bop_643 = val_613 - ba_618 in
                        let bop_644 = bop_643 - bb_626 in
                        let bop_645 = bop_644 + tmp_bop_642 in
                        let t3_646 = -0.19373336527812574 * bop_645 in
                        let bop_647 = val_613 + bop_619 in
                        let bop_648 = bop_647 - bop_621 in
                        let bop_649 = bop_648 - 61.149612719119446 in
                        let t1_650 = 0.9556596754408898 * bop_649 in
                        let bop_651 = val_613 + bop_635 in
                        let bop_652 = bop_651 - bop_637 in
                        let bop_653 = bop_652 - 1.5247621371066113 in
                        let t2_654 = 0.014460761693212401 * bop_653 in
                        let bop_655 = t1_650 + t2_654 in
                        let bop_656 = bop_655 + t3_646 in
                        let bop_657 = bop_656 - bop_610 in
                        let bop_658 = bop_657 + bop_137 in
                        let val_659 = 0.5 * bop_658 in
                        let tmp_call_660 = exp(val_659) in
                        let aa_661 = bop_596 * tmp_call_660 in
                        let bop_662 = i_563 = bop_18 in
                        let val_663 =
                          if bop_662
                          then bop_568
                          else bop_567 in
                        let aici_664 = val_663 * aa_661 in
                        let log_aici_665 = log(aici_664) in
                        let t1_cst_666 = aici_664 * tmp_call_634 in
                        {ba_618, bb_626, aici_664, log_aici_665, t1_cst_666,
                         scale_632},
                      soac_v_503, iota(tmp_call_17)) in
               let {soac_v_685, soac_v_686} =
                 mapT(fn {real, real} (real arg_675, real arg_676, real arg_677,
                                       real arg_678) =>
                        let baix_679 = arg_675 * mux_238 in
                        let val_680 = -baix_679 in
                        let tmp_call_681 = exp(val_680) in
                        let bop_682 = arg_677 * tmp_call_681 in
                        let bop_683 = arg_678 - baix_679 in
                        let bop_684 = bop_683 / arg_676 in
                        {bop_682, bop_684},
                      soac_v_667, soac_v_670, soac_v_671, soac_v_672) in
               let {untuple_690} =
                 reduceT(fn {real} (real x_687, real y_688) =>
                           let val_689 = x_687 + y_688 in
                           {val_689},
                         {0.0}, soac_v_685) in
               let {untuple_695} =
                 reduceT(fn {real} (real param_0_691, real param_1_692) =>
                           let bop_693 = param_0_691 < param_1_692 in
                           let val_694 =
                             if bop_693
                             then param_1_692
                             else param_0_691 in
                           {val_694},
                         {-10000000000000000000000000000000000000000000000000.0},
                         soac_v_686) in
               let yl_696 = untuple_695 - 0.00001 in
               let f_886 =
                 if bop_19
                 then untuple_695
                 else let bop_697 = bop_241 / sigmax_147 in
                      let bop_698 = bop_697 + bop_166 in
                      let bop_699 = sigmay_156 * bop_698 in
                      let bop_700 = bop_699 - bop_163 in
                      let y0_701 = bop_700 + muy_252 in
                      let bop_702 = y0_701 - 1.0 in
                      let bop_703 = yl_696 < y0_701 in
                      let bop_704 = bop_697 - bop_166 in
                      let bop_705 = sigmay_156 * bop_704 in
                      let y1_706 = bop_705 + muy_252 in
                      let bop_707 = y1_706 <= yl_696 in
                      let bop_709 = y1_706 + 1.0 in
                      let log_s_710 = log(untuple_690) in
                      let tmp_711 = log_s_710 / soac_v_670[bop_18] in
                      let bop_712 = tmp_711 <= 0.0 in
                      let up_715 =
                        if bop_712
                        then tmp_711
                        else let tmp_713 = log_s_710 / soac_v_670[0] in
                             let bop_714 = 0.0 <= tmp_713 in
                             if bop_714
                             then tmp_713
                             else -10000000000000000000000000000000000000000000000000.0 in
                      let yu_716 = up_715 + 0.00001 in
                      let bop_717 = yu_716 <= y0_701 in
                      let bop_718 = yu_716 < y1_706 in
                      if bop_707
                      then bop_709
                      else if bop_717
                           then bop_702
                           else let {untuple_726} =
                                  mapT(fn {real} (real arg_719, real arg_720) =>
                                         let bop_721 = arg_719 * mux_238 in
                                         let val_722 = -bop_721 in
                                         let tmp_call_723 = exp(val_722) in
                                         let val_725 = arg_720 * tmp_call_723 in
                                         {val_725},
                                       soac_v_667, soac_v_671) in
                                let root_lb_727 =
                                  if bop_703
                                  then y0_701
                                  else yl_696 in
                                let bop_728 = 0.0 <= root_lb_727 in
                                let {untuple_740} =
                                  redomapT(fn {real} (real x_729, real y_730) =>
                                             let val_731 = x_729 + y_730 in
                                             {val_731},
                                           fn {real} (real x_732, real arg_733,
                                                      real arg_734) =>
                                             let bop_735 = arg_733
                                                           * root_lb_727 in
                                             let val_736 = -bop_735 in
                                             let tmp_call_737 = exp(val_736) in
                                             let val_738 = arg_734
                                                           * tmp_call_737 in
                                             let val_739 = x_732 + val_738 in
                                             {val_739},
                                           {0.0}, soac_v_670, untuple_726) in
                                let tmp_lit_741 = untuple_740 - 1.0 in
                                let bop_742 = tmp_lit_741 < 0.0 in
                                let negate_743 = -tmp_lit_741 in
                                let root_ub_744 =
                                  if bop_718
                                  then yu_716
                                  else y1_706 in
                                let {untuple_756} =
                                  redomapT(fn {real} (real x_745, real y_746) =>
                                             let val_747 = x_745 + y_746 in
                                             {val_747},
                                           fn {real} (real x_748, real arg_749,
                                                      real arg_750) =>
                                             let bop_751 = arg_750
                                                           * root_ub_744 in
                                             let val_752 = -bop_751 in
                                             let tmp_call_753 = exp(val_752) in
                                             let val_754 = arg_749
                                                           * tmp_call_753 in
                                             let val_755 = x_748 + val_754 in
                                             {val_755},
                                           {0.0}, untuple_726, soac_v_670) in
                                let tmp_lit_757 = untuple_756 - 1.0 in
                                let bop_758 = tmp_lit_757 < 0.0 in
                                let negate_759 = -tmp_lit_757 in
                                let bop_760 = tmp_lit_741 * tmp_lit_757 in
                                let bop_761 = 0.0 <= bop_760 in
                                let {root_881, iteration_882, error_883} =
                                  if bop_761
                                  then if bop_728
                                       then {0.0, 0,
                                             10000000000000000000000000000000000000000000000000.0}
                                       else {0.0, 0,
                                             -10000000000000000000000000000000000000000000000000.0}
                                  else let tmp_bop_762 =
                                         if bop_742
                                         then negate_743
                                         else tmp_lit_741 in
                                       let tmp_bop_763 =
                                         if bop_758
                                         then negate_759
                                         else tmp_lit_757 in
                                       let bop_764 = tmp_bop_762
                                                     < tmp_bop_763 in
                                       let {fa_765, fb_766} =
                                         if bop_764
                                         then {tmp_lit_757, tmp_lit_741}
                                         else {tmp_lit_741, tmp_lit_757} in
                                       loop ({a_767, b_768, c_769, d_770,
                                              fa_771, fb_772, fc_773, mflag_774,
                                              it_775} = {root_lb_727,
                                                         root_ub_744,
                                                         root_lb_727, 0.0,
                                                         fa_765, fb_766, fa_765,
                                                         True,
                                                         0}) = for i_776 < 1000 do
                                         let bop_777 = fb_772 = 0.0 in
                                         let bop_778 = fa_771 = fc_773 in
                                         let bop_779 = fb_772 = fc_773 in
                                         let bop_780 = a_767 * fb_772 in
                                         let bop_781 = bop_780 * fc_773 in
                                         let bop_782 = fa_771 - fb_772 in
                                         let bop_783 = fa_771 - fc_773 in
                                         let bop_784 = bop_782 * bop_783 in
                                         let bop_785 = b_768 * fa_771 in
                                         let bop_786 = bop_785 * fc_773 in
                                         let bop_787 = fb_772 - fa_771 in
                                         let bop_788 = fb_772 - fc_773 in
                                         let bop_789 = bop_787 * bop_788 in
                                         let bop_790 = c_769 * fa_771 in
                                         let bop_791 = bop_790 * fb_772 in
                                         let bop_792 = fc_773 - fa_771 in
                                         let bop_793 = fc_773 - fb_772 in
                                         let bop_794 = bop_792 * bop_793 in
                                         let bop_795 = 3.0 * a_767 in
                                         let bop_796 = bop_795 + b_768 in
                                         let bop_797 = bop_796 / 4.0 in
                                         let not_798 = not mflag_774 in
                                         let bop_799 = a_767 + b_768 in
                                         let bop_800 = bop_799 / 2.0 in
                                         let val_801 = b_768 - a_767 in
                                         let bop_802 = fb_772 * val_801 in
                                         let negate_803 = -val_801 in
                                         let bop_804 = val_801 < 0.0 in
                                         let tmp_bop_805 =
                                           if bop_804
                                           then negate_803
                                           else val_801 in
                                         let bop_806 = tmp_bop_805 < 0.0001 in
                                         let norm_807 = bop_777 || bop_806 in
                                         let val_808 = b_768 - c_769 in
                                         let negate_809 = -val_808 in
                                         let bop_810 = val_808 < 0.0 in
                                         let val_811 = c_769 - d_770 in
                                         let negate_812 = -val_811 in
                                         let bop_813 = val_811 < 0.0 in
                                         if norm_807
                                         then {a_767, b_768, c_769, d_770,
                                               fa_771, fb_772, fc_773,
                                               mflag_774, it_775}
                                         else let tmp_bop_814 =
                                                if bop_810
                                                then negate_809
                                                else val_808 in
                                              let bop_815 = tmp_bop_814
                                                            <= 0.0001 in
                                              let norm_816 = mflag_774
                                                             && bop_815 in
                                              let bop_817 = tmp_bop_814 / 2.0 in
                                              let tmp_bop_818 =
                                                if bop_813
                                                then negate_812
                                                else val_811 in
                                              let bop_819 = tmp_bop_818
                                                            <= 0.0001 in
                                              let norm_820 = not_798
                                                             && bop_819 in
                                              let bop_821 = tmp_bop_818 / 2.0 in
                                              let norm_822 = bop_778
                                                             || bop_779 in
                                              let s_831 =
                                                if norm_822
                                                then let bop_823 = bop_802
                                                                   / bop_787 in
                                                     let bop_824 = b_768
                                                                   - bop_823 in
                                                     bop_824
                                                else let s1_825 = bop_781
                                                                  / bop_784 in
                                                     let s2_826 = bop_786
                                                                  / bop_789 in
                                                     let bop_827 = s1_825
                                                                   + s2_826 in
                                                     let s3_829 = bop_791
                                                                  / bop_794 in
                                                     let bop_830 = bop_827
                                                                   + s3_829 in
                                                     bop_830 in
                                              let bop_832 = bop_797 <= s_831 in
                                              let bop_834 = s_831 <= b_768 in
                                              let norm_835 = bop_832
                                                             && bop_834 in
                                              let not_836 = not norm_835 in
                                              let val_837 = s_831 - b_768 in
                                              let bop_838 = val_837 < 0.0 in
                                              let negate_839 = -val_837 in
                                              let tmp_bop_840 =
                                                if bop_838
                                                then negate_839
                                                else val_837 in
                                              let bop_841 = bop_821
                                                            <= tmp_bop_840 in
                                              let norm_842 = not_798
                                                             && bop_841 in
                                              let bop_843 = bop_817
                                                            <= tmp_bop_840 in
                                              let norm_844 = mflag_774
                                                             && bop_843 in
                                              let norm_845 = not_836
                                                             || norm_844 in
                                              let norm_846 = norm_845
                                                             || norm_842 in
                                              let norm_847 = norm_846
                                                             || norm_816 in
                                              let norm_848 = norm_847
                                                             || norm_820 in
                                              let {mflag_849, s_850} =
                                                if norm_848
                                                then {True, bop_800}
                                                else {False, s_831} in
                                              let {untuple_862} =
                                                redomapT(fn {real} (real x_851,
                                                                    real y_852) =>
                                                           let val_853 = x_851
                                                                         + y_852 in
                                                           {val_853},
                                                         fn {real} (real x_854,
                                                                    real arg_855,
                                                                    real arg_856) =>
                                                           let bop_857 = arg_855
                                                                         * s_850 in
                                                           let val_858 = -bop_857 in
                                                           let tmp_call_859 = exp(val_858) in
                                                           let val_860 = arg_856
                                                                         * tmp_call_859 in
                                                           let val_861 = x_854
                                                                         + val_860 in
                                                           {val_861},
                                                         {0.0}, soac_v_670,
                                                         untuple_726) in
                                              let fs_863 = untuple_862 - 1.0 in
                                              let bop_864 = fa_771 * fs_863 in
                                              let bop_865 = bop_864 < 0.0 in
                                              let {a_866, b_867, fa_868,
                                                   fb_869} =
                                                if bop_865
                                                then {a_767, s_850, fa_771,
                                                      fs_863}
                                                else {s_850, b_768, fs_863,
                                                      fb_772} in
                                              let bop_870 = fa_868 < 0.0 in
                                              let negate_871 = -fa_868 in
                                              let bop_872 = fb_869 < 0.0 in
                                              let negate_873 = -fb_869 in
                                              let tmp_bop_874 =
                                                if bop_872
                                                then negate_873
                                                else fb_869 in
                                              let tmp_bop_875 =
                                                if bop_870
                                                then negate_871
                                                else fa_868 in
                                              let bop_876 = tmp_bop_875
                                                            < tmp_bop_874 in
                                              let {a_877, b_878, fa_879,
                                                   fb_880} =
                                                if bop_876
                                                then {b_867, a_866, fb_869,
                                                      fa_868}
                                                else {a_866, b_867, fa_868,
                                                      fb_869} in
                                              {a_877, b_878, b_768, c_769,
                                               fa_879, fb_880, fb_772,
                                               mflag_849, i_776} in
                                       {b_768, it_775, fb_772} in
                                let bop_884 = error_883
                                              = -10000000000000000000000000000000000000000000000000.0 in
                                let bop_885 = error_883
                                              = 10000000000000000000000000000000000000000000000000.0 in
                                if bop_884
                                then bop_702
                                else if bop_885
                                     then bop_709
                                     else root_881 in
               let {soac_v_897, soac_v_898} =
                 mapT(fn {real, real} (real arg_887, real arg_888, real arg_889,
                                       real arg_890) =>
                        let baix_891 = arg_887 * val_242 in
                        let val_892 = -baix_891 in
                        let tmp_call_893 = exp(val_892) in
                        let bop_894 = arg_889 * tmp_call_893 in
                        let bop_895 = arg_890 - baix_891 in
                        let bop_896 = bop_895 / arg_888 in
                        {bop_894, bop_896},
                      soac_v_667, soac_v_670, soac_v_671, soac_v_672) in
               let {untuple_902} =
                 reduceT(fn {real} (real x_899, real y_900) =>
                           let val_901 = x_899 + y_900 in
                           {val_901},
                         {0.0}, soac_v_897) in
               let {untuple_907} =
                 reduceT(fn {real} (real param_0_903, real param_1_904) =>
                           let bop_905 = param_0_903 < param_1_904 in
                           let val_906 =
                             if bop_905
                             then param_1_904
                             else param_0_903 in
                           {val_906},
                         {-10000000000000000000000000000000000000000000000000.0},
                         soac_v_898) in
               let yl_908 = untuple_907 - 0.00001 in
               let g_1098 =
                 if bop_19
                 then untuple_907
                 else let bop_909 = bop_244 / sigmax_147 in
                      let bop_910 = bop_909 + bop_166 in
                      let bop_911 = sigmay_156 * bop_910 in
                      let bop_912 = bop_911 - bop_163 in
                      let y0_913 = bop_912 + muy_252 in
                      let bop_914 = y0_913 - 1.0 in
                      let bop_915 = yl_908 < y0_913 in
                      let bop_916 = bop_909 - bop_166 in
                      let bop_917 = sigmay_156 * bop_916 in
                      let y1_918 = bop_917 + muy_252 in
                      let bop_919 = y1_918 <= yl_908 in
                      let bop_921 = y1_918 + 1.0 in
                      let log_s_922 = log(untuple_902) in
                      let tmp_923 = log_s_922 / soac_v_670[bop_18] in
                      let bop_924 = tmp_923 <= 0.0 in
                      let up_927 =
                        if bop_924
                        then tmp_923
                        else let tmp_925 = log_s_922 / soac_v_670[0] in
                             let bop_926 = 0.0 <= tmp_925 in
                             if bop_926
                             then tmp_925
                             else -10000000000000000000000000000000000000000000000000.0 in
                      let yu_928 = up_927 + 0.00001 in
                      let bop_929 = yu_928 <= y0_913 in
                      let bop_930 = yu_928 < y1_918 in
                      if bop_919
                      then bop_921
                      else if bop_929
                           then bop_914
                           else let {untuple_938} =
                                  mapT(fn {real} (real arg_931, real arg_932) =>
                                         let bop_933 = arg_931 * val_242 in
                                         let val_934 = -bop_933 in
                                         let tmp_call_935 = exp(val_934) in
                                         let val_937 = arg_932 * tmp_call_935 in
                                         {val_937},
                                       soac_v_667, soac_v_671) in
                                let root_lb_939 =
                                  if bop_915
                                  then y0_913
                                  else yl_908 in
                                let bop_940 = 0.0 <= root_lb_939 in
                                let {untuple_952} =
                                  redomapT(fn {real} (real x_941, real y_942) =>
                                             let val_943 = x_941 + y_942 in
                                             {val_943},
                                           fn {real} (real x_944, real arg_945,
                                                      real arg_946) =>
                                             let bop_947 = arg_945
                                                           * root_lb_939 in
                                             let val_948 = -bop_947 in
                                             let tmp_call_949 = exp(val_948) in
                                             let val_950 = arg_946
                                                           * tmp_call_949 in
                                             let val_951 = x_944 + val_950 in
                                             {val_951},
                                           {0.0}, soac_v_670, untuple_938) in
                                let tmp_lit_953 = untuple_952 - 1.0 in
                                let bop_954 = tmp_lit_953 < 0.0 in
                                let negate_955 = -tmp_lit_953 in
                                let root_ub_956 =
                                  if bop_930
                                  then yu_928
                                  else y1_918 in
                                let {untuple_968} =
                                  redomapT(fn {real} (real x_957, real y_958) =>
                                             let val_959 = x_957 + y_958 in
                                             {val_959},
                                           fn {real} (real x_960, real arg_961,
                                                      real arg_962) =>
                                             let bop_963 = arg_962
                                                           * root_ub_956 in
                                             let val_964 = -bop_963 in
                                             let tmp_call_965 = exp(val_964) in
                                             let val_966 = arg_961
                                                           * tmp_call_965 in
                                             let val_967 = x_960 + val_966 in
                                             {val_967},
                                           {0.0}, untuple_938, soac_v_670) in
                                let tmp_lit_969 = untuple_968 - 1.0 in
                                let bop_970 = tmp_lit_969 < 0.0 in
                                let negate_971 = -tmp_lit_969 in
                                let bop_972 = tmp_lit_953 * tmp_lit_969 in
                                let bop_973 = 0.0 <= bop_972 in
                                let {root_1093, iteration_1094, error_1095} =
                                  if bop_973
                                  then if bop_940
                                       then {0.0, 0,
                                             10000000000000000000000000000000000000000000000000.0}
                                       else {0.0, 0,
                                             -10000000000000000000000000000000000000000000000000.0}
                                  else let tmp_bop_974 =
                                         if bop_954
                                         then negate_955
                                         else tmp_lit_953 in
                                       let tmp_bop_975 =
                                         if bop_970
                                         then negate_971
                                         else tmp_lit_969 in
                                       let bop_976 = tmp_bop_974
                                                     < tmp_bop_975 in
                                       let {fa_977, fb_978} =
                                         if bop_976
                                         then {tmp_lit_969, tmp_lit_953}
                                         else {tmp_lit_953, tmp_lit_969} in
                                       loop ({a_979, b_980, c_981, d_982,
                                              fa_983, fb_984, fc_985, mflag_986,
                                              it_987} = {root_lb_939,
                                                         root_ub_956,
                                                         root_lb_939, 0.0,
                                                         fa_977, fb_978, fa_977,
                                                         True,
                                                         0}) = for i_988 < 1000 do
                                         let bop_989 = fb_984 = 0.0 in
                                         let bop_990 = fa_983 = fc_985 in
                                         let bop_991 = fb_984 = fc_985 in
                                         let bop_992 = a_979 * fb_984 in
                                         let bop_993 = bop_992 * fc_985 in
                                         let bop_994 = fa_983 - fb_984 in
                                         let bop_995 = fa_983 - fc_985 in
                                         let bop_996 = bop_994 * bop_995 in
                                         let bop_997 = b_980 * fa_983 in
                                         let bop_998 = bop_997 * fc_985 in
                                         let bop_999 = fb_984 - fa_983 in
                                         let bop_1000 = fb_984 - fc_985 in
                                         let bop_1001 = bop_999 * bop_1000 in
                                         let bop_1002 = c_981 * fa_983 in
                                         let bop_1003 = bop_1002 * fb_984 in
                                         let bop_1004 = fc_985 - fa_983 in
                                         let bop_1005 = fc_985 - fb_984 in
                                         let bop_1006 = bop_1004 * bop_1005 in
                                         let bop_1007 = 3.0 * a_979 in
                                         let bop_1008 = bop_1007 + b_980 in
                                         let bop_1009 = bop_1008 / 4.0 in
                                         let not_1010 = not mflag_986 in
                                         let bop_1011 = a_979 + b_980 in
                                         let bop_1012 = bop_1011 / 2.0 in
                                         let val_1013 = b_980 - a_979 in
                                         let bop_1014 = fb_984 * val_1013 in
                                         let negate_1015 = -val_1013 in
                                         let bop_1016 = val_1013 < 0.0 in
                                         let tmp_bop_1017 =
                                           if bop_1016
                                           then negate_1015
                                           else val_1013 in
                                         let bop_1018 = tmp_bop_1017 < 0.0001 in
                                         let norm_1019 = bop_989 || bop_1018 in
                                         let val_1020 = b_980 - c_981 in
                                         let negate_1021 = -val_1020 in
                                         let bop_1022 = val_1020 < 0.0 in
                                         let val_1023 = c_981 - d_982 in
                                         let negate_1024 = -val_1023 in
                                         let bop_1025 = val_1023 < 0.0 in
                                         if norm_1019
                                         then {a_979, b_980, c_981, d_982,
                                               fa_983, fb_984, fc_985,
                                               mflag_986, it_987}
                                         else let tmp_bop_1026 =
                                                if bop_1022
                                                then negate_1021
                                                else val_1020 in
                                              let bop_1027 = tmp_bop_1026
                                                             <= 0.0001 in
                                              let norm_1028 = mflag_986
                                                              && bop_1027 in
                                              let bop_1029 = tmp_bop_1026
                                                             / 2.0 in
                                              let tmp_bop_1030 =
                                                if bop_1025
                                                then negate_1024
                                                else val_1023 in
                                              let bop_1031 = tmp_bop_1030
                                                             <= 0.0001 in
                                              let norm_1032 = not_1010
                                                              && bop_1031 in
                                              let bop_1033 = tmp_bop_1030
                                                             / 2.0 in
                                              let norm_1034 = bop_990
                                                              || bop_991 in
                                              let s_1043 =
                                                if norm_1034
                                                then let bop_1035 = bop_1014
                                                                    / bop_999 in
                                                     let bop_1036 = b_980
                                                                    - bop_1035 in
                                                     bop_1036
                                                else let s1_1037 = bop_993
                                                                   / bop_996 in
                                                     let s2_1038 = bop_998
                                                                   / bop_1001 in
                                                     let bop_1039 = s1_1037
                                                                    + s2_1038 in
                                                     let s3_1041 = bop_1003
                                                                   / bop_1006 in
                                                     let bop_1042 = bop_1039
                                                                    + s3_1041 in
                                                     bop_1042 in
                                              let bop_1044 = bop_1009
                                                             <= s_1043 in
                                              let bop_1046 = s_1043 <= b_980 in
                                              let norm_1047 = bop_1044
                                                              && bop_1046 in
                                              let not_1048 = not norm_1047 in
                                              let val_1049 = s_1043 - b_980 in
                                              let bop_1050 = val_1049 < 0.0 in
                                              let negate_1051 = -val_1049 in
                                              let tmp_bop_1052 =
                                                if bop_1050
                                                then negate_1051
                                                else val_1049 in
                                              let bop_1053 = bop_1033
                                                             <= tmp_bop_1052 in
                                              let norm_1054 = not_1010
                                                              && bop_1053 in
                                              let bop_1055 = bop_1029
                                                             <= tmp_bop_1052 in
                                              let norm_1056 = mflag_986
                                                              && bop_1055 in
                                              let norm_1057 = not_1048
                                                              || norm_1056 in
                                              let norm_1058 = norm_1057
                                                              || norm_1054 in
                                              let norm_1059 = norm_1058
                                                              || norm_1028 in
                                              let norm_1060 = norm_1059
                                                              || norm_1032 in
                                              let {mflag_1061, s_1062} =
                                                if norm_1060
                                                then {True, bop_1012}
                                                else {False, s_1043} in
                                              let {untuple_1074} =
                                                redomapT(fn {real} (real x_1063,
                                                                    real y_1064) =>
                                                           let val_1065 = x_1063
                                                                          + y_1064 in
                                                           {val_1065},
                                                         fn {real} (real x_1066,
                                                                    real arg_1067,
                                                                    real arg_1068) =>
                                                           let bop_1069 = arg_1068
                                                                          * s_1062 in
                                                           let val_1070 = -bop_1069 in
                                                           let tmp_call_1071 = exp(val_1070) in
                                                           let val_1072 = arg_1067
                                                                          * tmp_call_1071 in
                                                           let val_1073 = x_1066
                                                                          + val_1072 in
                                                           {val_1073},
                                                         {0.0}, untuple_938,
                                                         soac_v_670) in
                                              let fs_1075 = untuple_1074
                                                            - 1.0 in
                                              let bop_1076 = fa_983 * fs_1075 in
                                              let bop_1077 = bop_1076 < 0.0 in
                                              let {a_1078, b_1079, fa_1080,
                                                   fb_1081} =
                                                if bop_1077
                                                then {a_979, s_1062, fa_983,
                                                      fs_1075}
                                                else {s_1062, b_980, fs_1075,
                                                      fb_984} in
                                              let bop_1082 = fa_1080 < 0.0 in
                                              let negate_1083 = -fa_1080 in
                                              let bop_1084 = fb_1081 < 0.0 in
                                              let negate_1085 = -fb_1081 in
                                              let tmp_bop_1086 =
                                                if bop_1084
                                                then negate_1085
                                                else fb_1081 in
                                              let tmp_bop_1087 =
                                                if bop_1082
                                                then negate_1083
                                                else fa_1080 in
                                              let bop_1088 = tmp_bop_1087
                                                             < tmp_bop_1086 in
                                              let {a_1089, b_1090, fa_1091,
                                                   fb_1092} =
                                                if bop_1088
                                                then {b_1079, a_1078, fb_1081,
                                                      fa_1080}
                                                else {a_1078, b_1079, fa_1080,
                                                      fb_1081} in
                                              {a_1089, b_1090, b_980, c_981,
                                               fa_1091, fb_1092, fb_984,
                                               mflag_1061, i_988} in
                                       {b_980, it_987, fb_984} in
                                let bop_1096 = error_1095
                                               = -10000000000000000000000000000000000000000000000000.0 in
                                let bop_1097 = error_1095
                                               = 10000000000000000000000000000000000000000000000000.0 in
                                if bop_1096
                                then bop_914
                                else if bop_1097
                                     then bop_921
                                     else root_1093 in
               let {soac_v_1109, soac_v_1110} =
                 mapT(fn {real, real} (real arg_1099, real arg_1100,
                                       real arg_1101, real arg_1102) =>
                        let baix_1103 = arg_1099 * val_245 in
                        let val_1104 = -baix_1103 in
                        let tmp_call_1105 = exp(val_1104) in
                        let bop_1106 = arg_1101 * tmp_call_1105 in
                        let bop_1107 = arg_1102 - baix_1103 in
                        let bop_1108 = bop_1107 / arg_1100 in
                        {bop_1106, bop_1108},
                      soac_v_667, soac_v_670, soac_v_671, soac_v_672) in
               let {untuple_1114} =
                 reduceT(fn {real} (real x_1111, real y_1112) =>
                           let val_1113 = x_1111 + y_1112 in
                           {val_1113},
                         {0.0}, soac_v_1109) in
               let {untuple_1119} =
                 reduceT(fn {real} (real param_0_1115, real param_1_1116) =>
                           let bop_1117 = param_0_1115 < param_1_1116 in
                           let val_1118 =
                             if bop_1117
                             then param_1_1116
                             else param_0_1115 in
                           {val_1118},
                         {-10000000000000000000000000000000000000000000000000.0},
                         soac_v_1110) in
               let yl_1120 = untuple_1119 - 0.00001 in
               let h_1310 =
                 if bop_19
                 then untuple_1119
                 else let bop_1121 = bop_247 / sigmax_147 in
                      let bop_1122 = bop_1121 + bop_166 in
                      let bop_1123 = sigmay_156 * bop_1122 in
                      let bop_1124 = bop_1123 - bop_163 in
                      let y0_1125 = bop_1124 + muy_252 in
                      let bop_1126 = y0_1125 - 1.0 in
                      let bop_1127 = yl_1120 < y0_1125 in
                      let bop_1128 = bop_1121 - bop_166 in
                      let bop_1129 = sigmay_156 * bop_1128 in
                      let y1_1130 = bop_1129 + muy_252 in
                      let bop_1131 = y1_1130 <= yl_1120 in
                      let bop_1133 = y1_1130 + 1.0 in
                      let log_s_1134 = log(untuple_1114) in
                      let tmp_1135 = log_s_1134 / soac_v_670[bop_18] in
                      let bop_1136 = tmp_1135 <= 0.0 in
                      let up_1139 =
                        if bop_1136
                        then tmp_1135
                        else let tmp_1137 = log_s_1134 / soac_v_670[0] in
                             let bop_1138 = 0.0 <= tmp_1137 in
                             if bop_1138
                             then tmp_1137
                             else -10000000000000000000000000000000000000000000000000.0 in
                      let yu_1140 = up_1139 + 0.00001 in
                      let bop_1141 = yu_1140 <= y0_1125 in
                      let bop_1142 = yu_1140 < y1_1130 in
                      if bop_1131
                      then bop_1133
                      else if bop_1141
                           then bop_1126
                           else let {untuple_1150} =
                                  mapT(fn {real} (real arg_1143,
                                                  real arg_1144) =>
                                         let bop_1145 = arg_1143 * val_245 in
                                         let val_1146 = -bop_1145 in
                                         let tmp_call_1147 = exp(val_1146) in
                                         let val_1149 = arg_1144
                                                        * tmp_call_1147 in
                                         {val_1149},
                                       soac_v_667, soac_v_671) in
                                let root_lb_1151 =
                                  if bop_1127
                                  then y0_1125
                                  else yl_1120 in
                                let bop_1152 = 0.0 <= root_lb_1151 in
                                let {untuple_1164} =
                                  redomapT(fn {real} (real x_1153,
                                                      real y_1154) =>
                                             let val_1155 = x_1153 + y_1154 in
                                             {val_1155},
                                           fn {real} (real x_1156,
                                                      real arg_1157,
                                                      real arg_1158) =>
                                             let bop_1159 = arg_1157
                                                            * root_lb_1151 in
                                             let val_1160 = -bop_1159 in
                                             let tmp_call_1161 = exp(val_1160) in
                                             let val_1162 = arg_1158
                                                            * tmp_call_1161 in
                                             let val_1163 = x_1156 + val_1162 in
                                             {val_1163},
                                           {0.0}, soac_v_670, untuple_1150) in
                                let tmp_lit_1165 = untuple_1164 - 1.0 in
                                let bop_1166 = tmp_lit_1165 < 0.0 in
                                let negate_1167 = -tmp_lit_1165 in
                                let root_ub_1168 =
                                  if bop_1142
                                  then yu_1140
                                  else y1_1130 in
                                let {untuple_1180} =
                                  redomapT(fn {real} (real x_1169,
                                                      real y_1170) =>
                                             let val_1171 = x_1169 + y_1170 in
                                             {val_1171},
                                           fn {real} (real x_1172,
                                                      real arg_1173,
                                                      real arg_1174) =>
                                             let bop_1175 = arg_1174
                                                            * root_ub_1168 in
                                             let val_1176 = -bop_1175 in
                                             let tmp_call_1177 = exp(val_1176) in
                                             let val_1178 = arg_1173
                                                            * tmp_call_1177 in
                                             let val_1179 = x_1172 + val_1178 in
                                             {val_1179},
                                           {0.0}, untuple_1150, soac_v_670) in
                                let tmp_lit_1181 = untuple_1180 - 1.0 in
                                let bop_1182 = tmp_lit_1181 < 0.0 in
                                let negate_1183 = -tmp_lit_1181 in
                                let bop_1184 = tmp_lit_1165 * tmp_lit_1181 in
                                let bop_1185 = 0.0 <= bop_1184 in
                                let {root_1305, iteration_1306, error_1307} =
                                  if bop_1185
                                  then if bop_1152
                                       then {0.0, 0,
                                             10000000000000000000000000000000000000000000000000.0}
                                       else {0.0, 0,
                                             -10000000000000000000000000000000000000000000000000.0}
                                  else let tmp_bop_1186 =
                                         if bop_1166
                                         then negate_1167
                                         else tmp_lit_1165 in
                                       let tmp_bop_1187 =
                                         if bop_1182
                                         then negate_1183
                                         else tmp_lit_1181 in
                                       let bop_1188 = tmp_bop_1186
                                                      < tmp_bop_1187 in
                                       let {fa_1189, fb_1190} =
                                         if bop_1188
                                         then {tmp_lit_1181, tmp_lit_1165}
                                         else {tmp_lit_1165, tmp_lit_1181} in
                                       loop ({a_1191, b_1192, c_1193, d_1194,
                                              fa_1195, fb_1196, fc_1197,
                                              mflag_1198,
                                              it_1199} = {root_lb_1151,
                                                          root_ub_1168,
                                                          root_lb_1151, 0.0,
                                                          fa_1189, fb_1190,
                                                          fa_1189, True,
                                                          0}) = for i_1200 < 1000 do
                                         let bop_1201 = fb_1196 = 0.0 in
                                         let bop_1202 = fa_1195 = fc_1197 in
                                         let bop_1203 = fb_1196 = fc_1197 in
                                         let bop_1204 = a_1191 * fb_1196 in
                                         let bop_1205 = bop_1204 * fc_1197 in
                                         let bop_1206 = fa_1195 - fb_1196 in
                                         let bop_1207 = fa_1195 - fc_1197 in
                                         let bop_1208 = bop_1206 * bop_1207 in
                                         let bop_1209 = b_1192 * fa_1195 in
                                         let bop_1210 = bop_1209 * fc_1197 in
                                         let bop_1211 = fb_1196 - fa_1195 in
                                         let bop_1212 = fb_1196 - fc_1197 in
                                         let bop_1213 = bop_1211 * bop_1212 in
                                         let bop_1214 = c_1193 * fa_1195 in
                                         let bop_1215 = bop_1214 * fb_1196 in
                                         let bop_1216 = fc_1197 - fa_1195 in
                                         let bop_1217 = fc_1197 - fb_1196 in
                                         let bop_1218 = bop_1216 * bop_1217 in
                                         let bop_1219 = 3.0 * a_1191 in
                                         let bop_1220 = bop_1219 + b_1192 in
                                         let bop_1221 = bop_1220 / 4.0 in
                                         let not_1222 = not mflag_1198 in
                                         let bop_1223 = a_1191 + b_1192 in
                                         let bop_1224 = bop_1223 / 2.0 in
                                         let val_1225 = b_1192 - a_1191 in
                                         let bop_1226 = fb_1196 * val_1225 in
                                         let negate_1227 = -val_1225 in
                                         let bop_1228 = val_1225 < 0.0 in
                                         let tmp_bop_1229 =
                                           if bop_1228
                                           then negate_1227
                                           else val_1225 in
                                         let bop_1230 = tmp_bop_1229 < 0.0001 in
                                         let norm_1231 = bop_1201 || bop_1230 in
                                         let val_1232 = b_1192 - c_1193 in
                                         let negate_1233 = -val_1232 in
                                         let bop_1234 = val_1232 < 0.0 in
                                         let val_1235 = c_1193 - d_1194 in
                                         let negate_1236 = -val_1235 in
                                         let bop_1237 = val_1235 < 0.0 in
                                         if norm_1231
                                         then {a_1191, b_1192, c_1193, d_1194,
                                               fa_1195, fb_1196, fc_1197,
                                               mflag_1198, it_1199}
                                         else let tmp_bop_1238 =
                                                if bop_1234
                                                then negate_1233
                                                else val_1232 in
                                              let bop_1239 = tmp_bop_1238
                                                             <= 0.0001 in
                                              let norm_1240 = mflag_1198
                                                              && bop_1239 in
                                              let bop_1241 = tmp_bop_1238
                                                             / 2.0 in
                                              let tmp_bop_1242 =
                                                if bop_1237
                                                then negate_1236
                                                else val_1235 in
                                              let bop_1243 = tmp_bop_1242
                                                             <= 0.0001 in
                                              let norm_1244 = not_1222
                                                              && bop_1243 in
                                              let bop_1245 = tmp_bop_1242
                                                             / 2.0 in
                                              let norm_1246 = bop_1202
                                                              || bop_1203 in
                                              let s_1255 =
                                                if norm_1246
                                                then let bop_1247 = bop_1226
                                                                    / bop_1211 in
                                                     let bop_1248 = b_1192
                                                                    - bop_1247 in
                                                     bop_1248
                                                else let s1_1249 = bop_1205
                                                                   / bop_1208 in
                                                     let s2_1250 = bop_1210
                                                                   / bop_1213 in
                                                     let bop_1251 = s1_1249
                                                                    + s2_1250 in
                                                     let s3_1253 = bop_1215
                                                                   / bop_1218 in
                                                     let bop_1254 = bop_1251
                                                                    + s3_1253 in
                                                     bop_1254 in
                                              let bop_1256 = bop_1221
                                                             <= s_1255 in
                                              let bop_1258 = s_1255 <= b_1192 in
                                              let norm_1259 = bop_1256
                                                              && bop_1258 in
                                              let not_1260 = not norm_1259 in
                                              let val_1261 = s_1255 - b_1192 in
                                              let bop_1262 = val_1261 < 0.0 in
                                              let negate_1263 = -val_1261 in
                                              let tmp_bop_1264 =
                                                if bop_1262
                                                then negate_1263
                                                else val_1261 in
                                              let bop_1265 = bop_1245
                                                             <= tmp_bop_1264 in
                                              let norm_1266 = not_1222
                                                              && bop_1265 in
                                              let bop_1267 = bop_1241
                                                             <= tmp_bop_1264 in
                                              let norm_1268 = mflag_1198
                                                              && bop_1267 in
                                              let norm_1269 = not_1260
                                                              || norm_1268 in
                                              let norm_1270 = norm_1269
                                                              || norm_1266 in
                                              let norm_1271 = norm_1270
                                                              || norm_1240 in
                                              let norm_1272 = norm_1271
                                                              || norm_1244 in
                                              let {mflag_1273, s_1274} =
                                                if norm_1272
                                                then {True, bop_1224}
                                                else {False, s_1255} in
                                              let {untuple_1286} =
                                                redomapT(fn {real} (real x_1275,
                                                                    real y_1276) =>
                                                           let val_1277 = x_1275
                                                                          + y_1276 in
                                                           {val_1277},
                                                         fn {real} (real x_1278,
                                                                    real arg_1279,
                                                                    real arg_1280) =>
                                                           let bop_1281 = arg_1280
                                                                          * s_1274 in
                                                           let val_1282 = -bop_1281 in
                                                           let tmp_call_1283 = exp(val_1282) in
                                                           let val_1284 = arg_1279
                                                                          * tmp_call_1283 in
                                                           let val_1285 = x_1278
                                                                          + val_1284 in
                                                           {val_1285},
                                                         {0.0}, untuple_1150,
                                                         soac_v_670) in
                                              let fs_1287 = untuple_1286
                                                            - 1.0 in
                                              let bop_1288 = fa_1195
                                                             * fs_1287 in
                                              let bop_1289 = bop_1288 < 0.0 in
                                              let {a_1290, b_1291, fa_1292,
                                                   fb_1293} =
                                                if bop_1289
                                                then {a_1191, s_1274, fa_1195,
                                                      fs_1287}
                                                else {s_1274, b_1192, fs_1287,
                                                      fb_1196} in
                                              let bop_1294 = fa_1292 < 0.0 in
                                              let negate_1295 = -fa_1292 in
                                              let bop_1296 = fb_1293 < 0.0 in
                                              let negate_1297 = -fb_1293 in
                                              let tmp_bop_1298 =
                                                if bop_1296
                                                then negate_1297
                                                else fb_1293 in
                                              let tmp_bop_1299 =
                                                if bop_1294
                                                then negate_1295
                                                else fa_1292 in
                                              let bop_1300 = tmp_bop_1299
                                                             < tmp_bop_1298 in
                                              let {a_1301, b_1302, fa_1303,
                                                   fb_1304} =
                                                if bop_1300
                                                then {b_1291, a_1290, fb_1293,
                                                      fa_1292}
                                                else {a_1290, b_1291, fa_1292,
                                                      fb_1293} in
                                              {a_1301, b_1302, b_1192, c_1193,
                                               fa_1303, fb_1304, fb_1196,
                                               mflag_1273, i_1200} in
                                       {b_1192, it_1199, fb_1196} in
                                let bop_1308 = error_1307
                                               = -10000000000000000000000000000000000000000000000000.0 in
                                let bop_1309 = error_1307
                                               = 10000000000000000000000000000000000000000000000000.0 in
                                if bop_1308
                                then bop_1126
                                else if bop_1309
                                     then bop_1133
                                     else root_1305 in
               let bop_1311 = g_1098 - h_1310 in
               let bop_1312 = 0.5 * bop_1311 in
               let df_1313 = bop_1312 / eps_148 in
               let {untuple_1453} =
                 redomapT(fn {real} (real x_1314, real y_1315) =>
                            let val_1316 = x_1314 + y_1315 in
                            {val_1316},
                          fn {real} (real x_1317, real arg_1318,
                                     real arg_1319) =>
                            let bop_1320 = sqrt2sigmax_149 * arg_1318 in
                            let x_1321 = bop_1320 + mux_238 in
                            let bop_1322 = x_1321 - mux_238 in
                            let bop_1323 = df_1313 * bop_1322 in
                            let yhat_x_1324 = f_886 + bop_1323 in
                            let bop_1325 = yhat_x_1324 - muy_252 in
                            let bop_1326 = bop_1325 / sigmay_rhoxycs_172 in
                            let bop_1327 = t2_167 * bop_1322 in
                            let h1_1328 = bop_1326 - bop_1327 in
                            let val_1329 = -h1_1328 in
                            let u_1330 = val_1329 / 1.4142135623730951 in
                            let bop_1331 = u_1330 < 0.0 in
                            let bop_1332 = 0.3275911 * u_1330 in
                            let bop_1333 = 1.0 + bop_1332 in
                            let bop_1334 = u_1330 * u_1330 in
                            let val_1335 = -bop_1334 in
                            let val_1336 = -u_1330 in
                            let bop_1337 = 0.3275911 * val_1336 in
                            let bop_1338 = 1.0 + bop_1337 in
                            let bop_1339 = val_1336 * val_1336 in
                            let val_1340 = -bop_1339 in
                            let e_1376 =
                              if bop_1331
                              then let tmp_call_1341 = exp(val_1340) in
                                   let t_1342 = 1.0 / bop_1338 in
                                   let bop_1343 = 0.254829592 * t_1342 in
                                   let t2_1344 = t_1342 * t_1342 in
                                   let bop_1345 = -0.284496736 * t2_1344 in
                                   let bop_1346 = bop_1343 + bop_1345 in
                                   let t4_1347 = t2_1344 * t2_1344 in
                                   let bop_1348 = -1.453152027 * t4_1347 in
                                   let t3_1349 = t_1342 * t2_1344 in
                                   let bop_1350 = 1.421413741 * t3_1349 in
                                   let bop_1351 = bop_1346 + bop_1350 in
                                   let bop_1352 = bop_1351 + bop_1348 in
                                   let t5_1353 = t2_1344 * t3_1349 in
                                   let bop_1354 = 1.061405429 * t5_1353 in
                                   let bop_1355 = bop_1352 + bop_1354 in
                                   let bop_1356 = bop_1355 * tmp_call_1341 in
                                   let tmp_neg_1357 = 1.0 - bop_1356 in
                                   let negate_1358 = -tmp_neg_1357 in
                                   negate_1358
                              else let tmp_call_1359 = exp(val_1335) in
                                   let t_1360 = 1.0 / bop_1333 in
                                   let bop_1361 = 0.254829592 * t_1360 in
                                   let t2_1362 = t_1360 * t_1360 in
                                   let bop_1363 = -0.284496736 * t2_1362 in
                                   let bop_1364 = bop_1361 + bop_1363 in
                                   let t4_1365 = t2_1362 * t2_1362 in
                                   let bop_1366 = -1.453152027 * t4_1365 in
                                   let t3_1367 = t_1360 * t2_1362 in
                                   let bop_1368 = 1.421413741 * t3_1367 in
                                   let bop_1369 = bop_1364 + bop_1368 in
                                   let bop_1370 = bop_1369 + bop_1366 in
                                   let t5_1371 = t2_1362 * t3_1367 in
                                   let bop_1372 = 1.061405429 * t5_1371 in
                                   let bop_1373 = bop_1370 + bop_1372 in
                                   let bop_1374 = bop_1373 * tmp_call_1359 in
                                   let bop_1375 = 1.0 - bop_1374 in
                                   bop_1375 in
                            let bop_1377 = 1.0 + e_1376 in
                            let tmp_bop_1378 = 0.5 * bop_1377 in
                            let tmp_1379 = bop_1322 / sigmax_147 in
                            let bop_1380 = 0.5 * tmp_1379 in
                            let bop_1381 = bop_1380 * tmp_1379 in
                            let val_1382 = -bop_1381 in
                            let tmp_call_1383 = exp(val_1382) in
                            let {untuple_1448} =
                              redomapT(fn {real} (real x_1384, real y_1385) =>
                                         let val_1386 = x_1384 + y_1385 in
                                         {val_1386},
                                       fn {real} (real x_1387, real arg_1388,
                                                  real arg_1389,
                                                  real arg_1390) =>
                                         let bop_1391 = arg_1388
                                                        * sigmay_rhoxycs_172 in
                                         let h2_1392 = h1_1328 + bop_1391 in
                                         let val_1393 = -h2_1392 in
                                         let u_1394 = val_1393
                                                      / 1.4142135623730951 in
                                         let bop_1395 = u_1394 < 0.0 in
                                         let bop_1396 = 0.3275911 * u_1394 in
                                         let bop_1397 = 1.0 + bop_1396 in
                                         let bop_1398 = u_1394 * u_1394 in
                                         let val_1399 = -bop_1398 in
                                         let val_1400 = -u_1394 in
                                         let bop_1401 = 0.3275911 * val_1400 in
                                         let bop_1402 = 1.0 + bop_1401 in
                                         let bop_1403 = val_1400 * val_1400 in
                                         let val_1404 = -bop_1403 in
                                         let e_1440 =
                                           if bop_1395
                                           then let tmp_call_1405 = exp(val_1404) in
                                                let t_1406 = 1.0 / bop_1402 in
                                                let bop_1407 = 0.254829592
                                                               * t_1406 in
                                                let t2_1408 = t_1406 * t_1406 in
                                                let bop_1409 = -0.284496736
                                                               * t2_1408 in
                                                let bop_1410 = bop_1407
                                                               + bop_1409 in
                                                let t4_1411 = t2_1408
                                                              * t2_1408 in
                                                let bop_1412 = -1.453152027
                                                               * t4_1411 in
                                                let t3_1413 = t_1406
                                                              * t2_1408 in
                                                let bop_1414 = 1.421413741
                                                               * t3_1413 in
                                                let bop_1415 = bop_1410
                                                               + bop_1414 in
                                                let bop_1416 = bop_1415
                                                               + bop_1412 in
                                                let t5_1417 = t2_1408
                                                              * t3_1413 in
                                                let bop_1418 = 1.061405429
                                                               * t5_1417 in
                                                let bop_1419 = bop_1416
                                                               + bop_1418 in
                                                let bop_1420 = bop_1419
                                                               * tmp_call_1405 in
                                                let tmp_neg_1421 = 1.0
                                                                   - bop_1420 in
                                                let negate_1422 = -tmp_neg_1421 in
                                                negate_1422
                                           else let tmp_call_1423 = exp(val_1399) in
                                                let t_1424 = 1.0 / bop_1397 in
                                                let bop_1425 = 0.254829592
                                                               * t_1424 in
                                                let t2_1426 = t_1424 * t_1424 in
                                                let bop_1427 = -0.284496736
                                                               * t2_1426 in
                                                let bop_1428 = bop_1425
                                                               + bop_1427 in
                                                let t4_1429 = t2_1426
                                                              * t2_1426 in
                                                let bop_1430 = -1.453152027
                                                               * t4_1429 in
                                                let t3_1431 = t_1424
                                                              * t2_1426 in
                                                let bop_1432 = 1.421413741
                                                               * t3_1431 in
                                                let bop_1433 = bop_1428
                                                               + bop_1432 in
                                                let bop_1434 = bop_1433
                                                               + bop_1430 in
                                                let t5_1435 = t2_1426
                                                              * t3_1431 in
                                                let bop_1436 = 1.061405429
                                                               * t5_1435 in
                                                let bop_1437 = bop_1434
                                                               + bop_1436 in
                                                let bop_1438 = bop_1437
                                                               * tmp_call_1423 in
                                                let bop_1439 = 1.0 - bop_1438 in
                                                bop_1439 in
                                         let bop_1441 = 1.0 + e_1440 in
                                         let tmp_bop_1442 = 0.5 * bop_1441 in
                                         let val_1443 = arg_1390 * x_1321 in
                                         let tmp_call_1444 = exp(val_1443) in
                                         let bop_1445 = arg_1389
                                                        * tmp_call_1444 in
                                         let val_1446 = bop_1445
                                                        * tmp_bop_1442 in
                                         let val_1447 = x_1387 + val_1446 in
                                         {val_1447},
                                       {0.0}, soac_v_670, soac_v_673,
                                       soac_v_674) in
                            let bop_1449 = tmp_bop_1378 - untuple_1448 in
                            let integrand_res_1450 = tmp_call_1383 * bop_1449 in
                            let val_1451 = arg_1319 * integrand_res_1450 in
                            let val_1452 = x_1317 + val_1451 in
                            {val_1452},
                          {0.0}, tmp_lit_5, norm_6) in
               let bop_1454 = untuple_1453 / 1.7724538509055159 in
               let g2pp_price_1455 = tmp_call_140 * bop_1454 in
               let {soac_v_1645, soac_v_1646} =
                 mapT(fn {real, real} (int i_1456) =>
                        let tmp_call_1457 = toReal(i_1456) in
                        let val_1458 = tmp_call_1457 * arg_13 in
                        let nbmonths_1459 = trunc(val_1458) in
                        let m_1460 = m_306 + nbmonths_1459 in
                        let val_1461 = m_1460 - 1 in
                        let bop_1462 = val_1461 / 12 in
                        let bop_1463 = bop_1462 * 12 in
                        let bop_1464 = y_305 + bop_1462 in
                        let bop_1465 = bop_1464 - 1 in
                        let tmp_bop_1466 = val_1461 - bop_1463 in
                        let bop_1467 = tmp_bop_1466 + 1 in
                        let bop_1468 = bop_1467 <= 0 in
                        let bop_1469 = bop_1467 + 12 in
                        let {y_1470, m_1471} =
                          if bop_1468
                          then {bop_1465, bop_1469}
                          else {bop_1464, bop_1467} in
                        let bop_1472 = y_1470 / 4 in
                        let bop_1473 = bop_1472 * 4 in
                        let bop_1474 = y_1470 / 100 in
                        let bop_1475 = bop_1474 * 100 in
                        let bop_1476 = y_1470 / 400 in
                        let bop_1477 = bop_1476 * 400 in
                        let bop_1478 = m_1471 = 2 in
                        let bop_1479 = m_1471 = 4 in
                        let bop_1480 = m_1471 = 6 in
                        let bop_1481 = m_1471 = 9 in
                        let bop_1482 = m_1471 = 11 in
                        let bop_1483 = m_1471 = 1 in
                        let norm_1484 = bop_1483 || bop_1478 in
                        let bop_1485 = y_1470 + 4800 in
                        let bop_1486 = bop_1485 - 1 in
                        let bop_1487 = 1461 * bop_1486 in
                        let bop_1488 = bop_1487 / 4 in
                        let bop_1489 = 1461 * bop_1485 in
                        let bop_1490 = bop_1489 / 4 in
                        let bop_1491 = m_1471 + 10 in
                        let bop_1492 = 367 * bop_1491 in
                        let bop_1493 = bop_1492 / 12 in
                        let bop_1494 = bop_1488 + bop_1493 in
                        let bop_1495 = y_1470 + 4900 in
                        let bop_1496 = bop_1495 - 1 in
                        let bop_1497 = bop_1496 / 100 in
                        let bop_1498 = 3 * bop_1497 in
                        let bop_1499 = bop_1498 / 4 in
                        let bop_1500 = bop_1494 - bop_1499 in
                        let bop_1501 = bop_1495 / 100 in
                        let bop_1502 = 3 * bop_1501 in
                        let bop_1503 = bop_1502 / 4 in
                        let bop_1504 = m_1471 - 2 in
                        let bop_1505 = 367 * bop_1504 in
                        let bop_1506 = bop_1505 / 12 in
                        let bop_1507 = bop_1490 + bop_1506 in
                        let bop_1508 = bop_1507 - bop_1503 in
                        let ym_1509 =
                          if norm_1484
                          then bop_1500
                          else bop_1508 in
                        let tmp_bop_1510 = y_1470 - bop_1477 in
                        let bop_1511 = tmp_bop_1510 = 0 in
                        let tmp_bop_1512 = y_1470 - bop_1475 in
                        let bop_1513 = tmp_bop_1512 = 0 in
                        let not_1514 = not bop_1513 in
                        let norm_1515 = not_1514 || bop_1511 in
                        let tmp_bop_1516 = y_1470 - bop_1473 in
                        let bop_1517 = tmp_bop_1516 = 0 in
                        let tmp_and_1518 = bop_1517 && norm_1515 in
                        let norm_1519 = bop_1478 && tmp_and_1518 in
                        let val_1523 =
                          if norm_1519
                          then 29
                          else if bop_1478
                               then 28
                               else let norm_1520 = bop_1479 || bop_1480 in
                                    let norm_1521 = norm_1520 || bop_1481 in
                                    let norm_1522 = norm_1521 || bop_1482 in
                                    if norm_1522
                                    then 30
                                    else 31 in
                        let bop_1524 = d_307 < val_1523 in
                        let tmp_lit_1525 =
                          if bop_1524
                          then d_307
                          else val_1523 in
                        let bop_1526 = ym_1509 + tmp_lit_1525 in
                        let bop_1527 = bop_1526 - 32075 in
                        let tmp_1528 = bop_1527 - 2444238 in
                        let bop_1529 = tmp_1528 * 1440 in
                        let resmin_1530 = bop_1529 + 720 in
                        let tmp_call_1531 = toReal(resmin_1530) in
                        let val_1532 = trunc(tmp_call_1531) in
                        let jul_1533 = val_1532 / 1440 in
                        let bop_1534 = jul_1533 + 68569 in
                        let l_1535 = bop_1534 + 2444238 in
                        let bop_1536 = 4 * l_1535 in
                        let n_1537 = bop_1536 / 146097 in
                        let bop_1538 = 146097 * n_1537 in
                        let bop_1539 = bop_1538 + 3 in
                        let bop_1540 = bop_1539 / 4 in
                        let bop_1541 = n_1537 - 49 in
                        let bop_1542 = 100 * bop_1541 in
                        let l_1543 = l_1535 - bop_1540 in
                        let bop_1544 = l_1543 + 1 in
                        let bop_1545 = 4000 * bop_1544 in
                        let i_1546 = bop_1545 / 1461001 in
                        let bop_1547 = 1461 * i_1546 in
                        let bop_1548 = bop_1547 / 4 in
                        let bop_1549 = bop_1542 + i_1546 in
                        let bop_1550 = l_1543 - bop_1548 in
                        let l_1551 = bop_1550 + 31 in
                        let bop_1552 = 80 * l_1551 in
                        let j_1553 = bop_1552 / 2447 in
                        let bop_1554 = 2447 * j_1553 in
                        let bop_1555 = bop_1554 / 80 in
                        let bop_1556 = j_1553 + 2 in
                        let l_1557 = j_1553 / 11 in
                        let bop_1558 = 12 * l_1557 in
                        let m_1559 = bop_1556 - bop_1558 in
                        let y_1560 = bop_1549 + l_1557 in
                        let d_1561 = l_1551 - bop_1555 in
                        let bop_1562 = jul_1533 * 1440 in
                        let daytime_1563 = val_1532 - bop_1562 in
                        let bop_1564 = daytime_1563 = 720 in
                        let bop_1565 = daytime_1563 / 60 in
                        let bop_1566 = bop_1565 * 60 in
                        let tmp_lit_1567 = daytime_1563 - bop_1566 in
                        let {y_1568, m_1569, d_1570, h_1571, min_1572} =
                          if bop_1564
                          then {y_1560, m_1559, d_1561, 12, 0}
                          else {y_1560, m_1559, d_1561, bop_1565,
                                tmp_lit_1567} in
                        let m_1573 = m_1569 + nbmonths_312 in
                        let val_1574 = m_1573 - 1 in
                        let bop_1575 = val_1574 / 12 in
                        let bop_1576 = bop_1575 * 12 in
                        let tmp_bop_1577 = val_1574 - bop_1576 in
                        let bop_1578 = tmp_bop_1577 + 1 in
                        let bop_1579 = bop_1578 <= 0 in
                        let bop_1580 = bop_1578 + 12 in
                        let bop_1581 = y_1568 + bop_1575 in
                        let bop_1582 = bop_1581 - 1 in
                        let {y_1583, m_1584} =
                          if bop_1579
                          then {bop_1582, bop_1580}
                          else {bop_1581, bop_1578} in
                        let bop_1585 = y_1583 / 4 in
                        let bop_1586 = bop_1585 * 4 in
                        let bop_1587 = y_1583 / 100 in
                        let bop_1588 = bop_1587 * 100 in
                        let bop_1589 = y_1583 / 400 in
                        let bop_1590 = bop_1589 * 400 in
                        let bop_1591 = m_1584 = 2 in
                        let bop_1592 = m_1584 = 4 in
                        let bop_1593 = m_1584 = 6 in
                        let bop_1594 = m_1584 = 9 in
                        let bop_1595 = m_1584 = 11 in
                        let bop_1596 = m_1584 = 1 in
                        let norm_1597 = bop_1596 || bop_1591 in
                        let bop_1598 = y_1583 + 4800 in
                        let bop_1599 = bop_1598 - 1 in
                        let bop_1600 = 1461 * bop_1599 in
                        let bop_1601 = bop_1600 / 4 in
                        let bop_1602 = 1461 * bop_1598 in
                        let bop_1603 = bop_1602 / 4 in
                        let bop_1604 = m_1584 + 10 in
                        let bop_1605 = 367 * bop_1604 in
                        let bop_1606 = bop_1605 / 12 in
                        let bop_1607 = bop_1601 + bop_1606 in
                        let bop_1608 = y_1583 + 4900 in
                        let bop_1609 = bop_1608 - 1 in
                        let bop_1610 = bop_1609 / 100 in
                        let bop_1611 = 3 * bop_1610 in
                        let bop_1612 = bop_1611 / 4 in
                        let bop_1613 = bop_1607 - bop_1612 in
                        let bop_1614 = bop_1608 / 100 in
                        let bop_1615 = 3 * bop_1614 in
                        let bop_1616 = bop_1615 / 4 in
                        let bop_1617 = m_1584 - 2 in
                        let bop_1618 = 367 * bop_1617 in
                        let bop_1619 = bop_1618 / 12 in
                        let bop_1620 = bop_1603 + bop_1619 in
                        let bop_1621 = bop_1620 - bop_1616 in
                        let ym_1622 =
                          if norm_1597
                          then bop_1613
                          else bop_1621 in
                        let tmp_bop_1623 = y_1583 - bop_1590 in
                        let bop_1624 = tmp_bop_1623 = 0 in
                        let tmp_bop_1625 = y_1583 - bop_1588 in
                        let bop_1626 = tmp_bop_1625 = 0 in
                        let not_1627 = not bop_1626 in
                        let norm_1628 = not_1627 || bop_1624 in
                        let tmp_bop_1629 = y_1583 - bop_1586 in
                        let bop_1630 = tmp_bop_1629 = 0 in
                        let tmp_and_1631 = bop_1630 && norm_1628 in
                        let norm_1632 = bop_1591 && tmp_and_1631 in
                        let val_1636 =
                          if norm_1632
                          then 29
                          else if bop_1591
                               then 28
                               else let norm_1633 = bop_1592 || bop_1593 in
                                    let norm_1634 = norm_1633 || bop_1594 in
                                    let norm_1635 = norm_1634 || bop_1595 in
                                    if norm_1635
                                    then 30
                                    else 31 in
                        let bop_1637 = d_1570 < val_1636 in
                        let tmp_lit_1638 =
                          if bop_1637
                          then d_1570
                          else val_1636 in
                        let bop_1639 = ym_1622 + tmp_lit_1638 in
                        let bop_1640 = bop_1639 - 32075 in
                        let tmp_1641 = bop_1640 - 2444238 in
                        let bop_1642 = tmp_1641 * 1440 in
                        let resmin_1643 = bop_1642 + 720 in
                        let tmp_call_1644 = toReal(resmin_1643) in
                        {tmp_call_1531, tmp_call_1644},
                      iota(tmp_call_17)) in
               let {tmp_red2_1688, tmp_red2_1689, tmp_red2_1690} =
                 redomapT(fn {real, real, real} (real arg_1647, real arg_1648,
                                                 real arg_1649, real arg_1650,
                                                 real arg_1651,
                                                 real arg_1652) =>
                            let bop_1653 = arg_1652 - 16834320.0 in
                            let tmp_bop_1654 = bop_1653 / 1440.0 in
                            let tmp_bop_1655 = tmp_bop_1654 / 365.0 in
                            let bop_1656 = 0.03 * tmp_bop_1655 in
                            let val_1657 = -bop_1656 in
                            let tmp_call_1658 = exp(val_1657) in
                            let bop_1659 = arg_1652 - arg_1651 in
                            let tmp_bop_1660 = bop_1659 / 1440.0 in
                            let tmp_bop_1661 = tmp_bop_1660 / 365.0 in
                            let bop_1662 = tmp_call_1658 * tmp_bop_1661 in
                            let bop_1663 = arg_1647 + bop_1662 in
                            let bop_1664 = arg_1648 < arg_1651 in
                            let tmp_lit_1665 =
                              if bop_1664
                              then arg_1648
                              else arg_1651 in
                            let bop_1666 = arg_1649 < arg_1652 in
                            let tmp_lit_1667 =
                              if bop_1666
                              then arg_1652
                              else arg_1649 in
                            {bop_1663, tmp_lit_1665, tmp_lit_1667},
                          fn {real, real, real} (real arg_1668, real arg_1669,
                                                 real arg_1670, real arg_1671,
                                                 real arg_1672) =>
                            let bop_1673 = arg_1672 - 16834320.0 in
                            let tmp_bop_1674 = bop_1673 / 1440.0 in
                            let tmp_bop_1675 = tmp_bop_1674 / 365.0 in
                            let bop_1676 = 0.03 * tmp_bop_1675 in
                            let val_1677 = -bop_1676 in
                            let tmp_call_1678 = exp(val_1677) in
                            let bop_1679 = arg_1672 - arg_1671 in
                            let tmp_bop_1680 = bop_1679 / 1440.0 in
                            let tmp_bop_1681 = tmp_bop_1680 / 365.0 in
                            let bop_1682 = tmp_call_1678 * tmp_bop_1681 in
                            let bop_1683 = arg_1668 + bop_1682 in
                            let bop_1684 = arg_1669 < arg_1671 in
                            let tmp_lit_1685 =
                              if bop_1684
                              then arg_1669
                              else arg_1671 in
                            let bop_1686 = arg_1670 < arg_1672 in
                            let tmp_lit_1687 =
                              if bop_1686
                              then arg_1672
                              else arg_1670 in
                            {bop_1683, tmp_lit_1685, tmp_lit_1687},
                          {0.0, 168307199.0, 3600.0}, soac_v_1645,
                          soac_v_1646) in
               let bop_1691 = tmp_red2_1689 - 16834320.0 in
               let tmp_bop_1692 = bop_1691 / 1440.0 in
               let tmp_bop_1693 = tmp_bop_1692 / 365.0 in
               let bop_1694 = 0.03 * tmp_bop_1693 in
               let val_1695 = -bop_1694 in
               let tmp_call_1696 = exp(val_1695) in
               let bop_1697 = tmp_red2_1690 - 16834320.0 in
               let tmp_bop_1698 = bop_1697 / 1440.0 in
               let tmp_bop_1699 = tmp_bop_1698 / 365.0 in
               let bop_1700 = 0.03 * tmp_bop_1699 in
               let val_1701 = -bop_1700 in
               let tmp_call_1702 = exp(val_1701) in
               let bop_1703 = tmp_call_1696 - tmp_call_1702 in
               let strike_1704 = bop_1703 / tmp_red2_1688 in
               let {tmp_red2_1746, tmp_red2_1747, tmp_red2_1748} =
                 redomapT(fn {real, real, real} (real arg_1705, real arg_1706,
                                                 real arg_1707, real arg_1708,
                                                 real arg_1709,
                                                 real arg_1710) =>
                            let bop_1711 = arg_1710 - 16834320.0 in
                            let tmp_bop_1712 = bop_1711 / 1440.0 in
                            let tmp_bop_1713 = tmp_bop_1712 / 365.0 in
                            let bop_1714 = 0.03 * tmp_bop_1713 in
                            let val_1715 = -bop_1714 in
                            let tmp_call_1716 = exp(val_1715) in
                            let bop_1717 = arg_1710 - arg_1709 in
                            let tmp_bop_1718 = bop_1717 / 1440.0 in
                            let tmp_bop_1719 = tmp_bop_1718 / 365.0 in
                            let bop_1720 = tmp_call_1716 * tmp_bop_1719 in
                            let bop_1721 = arg_1705 + bop_1720 in
                            let bop_1722 = arg_1706 < arg_1709 in
                            let tmp_lit_1723 =
                              if bop_1722
                              then arg_1706
                              else arg_1709 in
                            let bop_1724 = arg_1707 < arg_1710 in
                            let tmp_lit_1725 =
                              if bop_1724
                              then arg_1710
                              else arg_1707 in
                            {bop_1721, tmp_lit_1723, tmp_lit_1725},
                          fn {real, real, real} (real arg_1726, real arg_1727,
                                                 real arg_1728, real arg_1729,
                                                 real arg_1730) =>
                            let bop_1731 = arg_1730 - 16834320.0 in
                            let tmp_bop_1732 = bop_1731 / 1440.0 in
                            let tmp_bop_1733 = tmp_bop_1732 / 365.0 in
                            let bop_1734 = 0.03 * tmp_bop_1733 in
                            let val_1735 = -bop_1734 in
                            let tmp_call_1736 = exp(val_1735) in
                            let bop_1737 = arg_1730 - arg_1729 in
                            let tmp_bop_1738 = bop_1737 / 1440.0 in
                            let tmp_bop_1739 = tmp_bop_1738 / 365.0 in
                            let bop_1740 = tmp_call_1736 * tmp_bop_1739 in
                            let bop_1741 = arg_1726 + bop_1740 in
                            let bop_1742 = arg_1727 < arg_1729 in
                            let tmp_lit_1743 =
                              if bop_1742
                              then arg_1727
                              else arg_1729 in
                            let bop_1744 = arg_1728 < arg_1730 in
                            let tmp_lit_1745 =
                              if bop_1744
                              then arg_1730
                              else arg_1728 in
                            {bop_1741, tmp_lit_1743, tmp_lit_1745},
                          {0.0, 168307199.0, 3600.0}, soac_v_1645,
                          soac_v_1646) in
               let bop_1749 = tmp_red2_1747 - 16834320.0 in
               let tmp_bop_1750 = bop_1749 / 1440.0 in
               let tmp_bop_1751 = tmp_bop_1750 / 365.0 in
               let bop_1752 = 0.03 * tmp_bop_1751 in
               let val_1753 = -bop_1752 in
               let tmp_call_1754 = exp(val_1753) in
               let bop_1755 = tmp_red2_1748 - 16834320.0 in
               let tmp_bop_1756 = bop_1755 / 1440.0 in
               let tmp_bop_1757 = tmp_bop_1756 / 365.0 in
               let bop_1758 = 0.03 * tmp_bop_1757 in
               let val_1759 = -bop_1758 in
               let tmp_call_1760 = exp(val_1759) in
               let bop_1761 = tmp_call_1754 - tmp_call_1760 in
               let s0_1762 = bop_1761 / tmp_red2_1746 in
               let val_1763 = s0_1762 / strike_1704 in
               let tmp_call_1764 = log(val_1763) in
               let bop_1765 = tmp_call_1764 / bop_268 in
               let d1_1766 = bop_1765 + bop_311 in
               let d2_1767 = d1_1766 - bop_268 in
               let u_1768 = d2_1767 / 1.4142135623730951 in
               let bop_1769 = u_1768 < 0.0 in
               let bop_1770 = 0.3275911 * u_1768 in
               let bop_1771 = 1.0 + bop_1770 in
               let bop_1772 = u_1768 * u_1768 in
               let val_1773 = -bop_1772 in
               let val_1774 = -u_1768 in
               let bop_1775 = 0.3275911 * val_1774 in
               let bop_1776 = 1.0 + bop_1775 in
               let bop_1777 = val_1774 * val_1774 in
               let val_1778 = -bop_1777 in
               let e_1814 =
                 if bop_1769
                 then let tmp_call_1779 = exp(val_1778) in
                      let t_1780 = 1.0 / bop_1776 in
                      let bop_1781 = 0.254829592 * t_1780 in
                      let t2_1782 = t_1780 * t_1780 in
                      let bop_1783 = -0.284496736 * t2_1782 in
                      let bop_1784 = bop_1781 + bop_1783 in
                      let t4_1785 = t2_1782 * t2_1782 in
                      let bop_1786 = -1.453152027 * t4_1785 in
                      let t3_1787 = t_1780 * t2_1782 in
                      let bop_1788 = 1.421413741 * t3_1787 in
                      let bop_1789 = bop_1784 + bop_1788 in
                      let bop_1790 = bop_1789 + bop_1786 in
                      let t5_1791 = t2_1782 * t3_1787 in
                      let bop_1792 = 1.061405429 * t5_1791 in
                      let bop_1793 = bop_1790 + bop_1792 in
                      let bop_1794 = bop_1793 * tmp_call_1779 in
                      let tmp_neg_1795 = 1.0 - bop_1794 in
                      let negate_1796 = -tmp_neg_1795 in
                      negate_1796
                 else let tmp_call_1797 = exp(val_1773) in
                      let t_1798 = 1.0 / bop_1771 in
                      let bop_1799 = 0.254829592 * t_1798 in
                      let t2_1800 = t_1798 * t_1798 in
                      let bop_1801 = -0.284496736 * t2_1800 in
                      let bop_1802 = bop_1799 + bop_1801 in
                      let t4_1803 = t2_1800 * t2_1800 in
                      let bop_1804 = -1.453152027 * t4_1803 in
                      let t3_1805 = t_1798 * t2_1800 in
                      let bop_1806 = 1.421413741 * t3_1805 in
                      let bop_1807 = bop_1802 + bop_1806 in
                      let bop_1808 = bop_1807 + bop_1804 in
                      let t5_1809 = t2_1800 * t3_1805 in
                      let bop_1810 = 1.061405429 * t5_1809 in
                      let bop_1811 = bop_1808 + bop_1810 in
                      let bop_1812 = bop_1811 * tmp_call_1797 in
                      let bop_1813 = 1.0 - bop_1812 in
                      bop_1813 in
               let bop_1815 = 1.0 + e_1814 in
               let tmp_bop_1816 = 0.5 * bop_1815 in
               let bop_1817 = strike_1704 * tmp_bop_1816 in
               let u_1818 = d1_1766 / 1.4142135623730951 in
               let bop_1819 = u_1818 < 0.0 in
               let bop_1820 = 0.3275911 * u_1818 in
               let bop_1821 = 1.0 + bop_1820 in
               let bop_1822 = u_1818 * u_1818 in
               let val_1823 = -bop_1822 in
               let val_1824 = -u_1818 in
               let bop_1825 = 0.3275911 * val_1824 in
               let bop_1826 = 1.0 + bop_1825 in
               let bop_1827 = val_1824 * val_1824 in
               let val_1828 = -bop_1827 in
               let e_1864 =
                 if bop_1819
                 then let tmp_call_1829 = exp(val_1828) in
                      let t_1830 = 1.0 / bop_1826 in
                      let bop_1831 = 0.254829592 * t_1830 in
                      let t2_1832 = t_1830 * t_1830 in
                      let bop_1833 = -0.284496736 * t2_1832 in
                      let bop_1834 = bop_1831 + bop_1833 in
                      let t4_1835 = t2_1832 * t2_1832 in
                      let bop_1836 = -1.453152027 * t4_1835 in
                      let t3_1837 = t_1830 * t2_1832 in
                      let bop_1838 = 1.421413741 * t3_1837 in
                      let bop_1839 = bop_1834 + bop_1838 in
                      let bop_1840 = bop_1839 + bop_1836 in
                      let t5_1841 = t2_1832 * t3_1837 in
                      let bop_1842 = 1.061405429 * t5_1841 in
                      let bop_1843 = bop_1840 + bop_1842 in
                      let bop_1844 = bop_1843 * tmp_call_1829 in
                      let tmp_neg_1845 = 1.0 - bop_1844 in
                      let negate_1846 = -tmp_neg_1845 in
                      negate_1846
                 else let tmp_call_1847 = exp(val_1823) in
                      let t_1848 = 1.0 / bop_1821 in
                      let bop_1849 = 0.254829592 * t_1848 in
                      let t2_1850 = t_1848 * t_1848 in
                      let bop_1851 = -0.284496736 * t2_1850 in
                      let bop_1852 = bop_1849 + bop_1851 in
                      let t4_1853 = t2_1850 * t2_1850 in
                      let bop_1854 = -1.453152027 * t4_1853 in
                      let t3_1855 = t_1848 * t2_1850 in
                      let bop_1856 = 1.421413741 * t3_1855 in
                      let bop_1857 = bop_1852 + bop_1856 in
                      let bop_1858 = bop_1857 + bop_1854 in
                      let t5_1859 = t2_1850 * t3_1855 in
                      let bop_1860 = 1.061405429 * t5_1859 in
                      let bop_1861 = bop_1858 + bop_1860 in
                      let bop_1862 = bop_1861 * tmp_call_1847 in
                      let bop_1863 = 1.0 - bop_1862 in
                      bop_1863 in
               let bop_1865 = 1.0 + e_1864 in
               let tmp_bop_1866 = 0.5 * bop_1865 in
               let bop_1867 = s0_1762 * tmp_bop_1866 in
               let bop_1868 = bop_1867 - bop_1817 in
               let market_price_1869 = tmp_red2_1746 * bop_1868 in
               let bop_1870 = g2pp_price_1455 - market_price_1869 in
               let res_1871 = bop_1870 / market_price_1869 in
               let val_1872 = res_1871 * res_1871 in
               let val_1873 = x_10 + val_1872 in
               {val_1873},
             {0.0}, tup_arr_elem_1, tup_arr_elem_4, tup_arr_elem_2,
             tup_arr_elem_3) in
  let val_1875 = untuple_1874 / 196.0 in
  let tmp_call_1876 = sqrt(val_1875) in
  let rms_1877 = 100.0 * tmp_call_1876 in
  rms_1877
