fun real main() =
  let norm_0 = [[1.0, 0.6, 0.8],
                [0.6, 0.8, 0.15],
                [0.8, 0.15, 0.5809475019311124]] in
  let norm_1 = [[0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15],
                [0.19, 0.19, 0.15]] in
  let norm_2 = [3758.05, 11840.0, 1200.0] in
  let {untuple_11} =
    mapT(fn {int} (int x_3) =>
           let val_10 = x_3 + 1 in
           {val_10},
         iota(1000)) in
  let {num_mc_it_12, num_dates_13, num_und_14, num_bits_15, dir_vs_16} =
    {1000,
     5,
     3,
     30,
     [[536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608,
       4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384,
       8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],
      [536870912, 805306368, 671088640, 1006632960, 570425344, 855638016,
       713031680, 1069547520, 538968064, 808452096, 673710080, 1010565120,
       572653568, 858980352, 715816960, 1073725440, 536879104, 805318656,
       671098880, 1006648320, 570434048, 855651072, 713042560, 1069563840,
       538976288, 808464432, 673720360, 1010580540, 572662306, 858993459],
      [536870912, 805306368, 402653184, 603979776, 973078528, 385875968,
       595591168, 826277888, 438304768, 657457152, 999817216, 358875136,
       538574848, 807862272, 406552576, 605372416, 975183872, 389033984,
       597170176, 828646400, 437926400, 656873216, 1002152832, 357921088,
       536885792, 805312304, 402662296, 603992420, 973085210, 385885991],
      [536870912, 805306368, 939524096, 335544320, 234881024, 721420288,
       411041792, 616562688, 920649728, 1062207488, 381157376, 258736128,
       771883008, 453181440, 545488896, 817971200, 954261504, 340963328,
       238651392, 732843008, 417426944, 609285376, 909831040, 1068349120,
       383778848, 256901168, 783810616, 460062740, 537001998, 805503019],
      [536870912, 805306368, 402653184, 1006632960, 167772160, 285212672,
       713031680, 566231040, 853540864, 489684992, 952631296, 208928768,
       316801024, 758317056, 550076416, 813154304, 417505280, 1009913856,
       172697600, 297131008, 704744960, 553894656, 847291520, 499194688,
       954376224, 204607536, 306915352, 766893116, 536972810, 805552913],
      [536870912, 805306368, 402653184, 469762048, 301989888, 721420288,
       92274688, 264241152, 941621248, 741343232, 169345024, 924581888,
       395444224, 619380736, 1034256384, 603963392, 838868992, 452997120,
       494934016, 331357184, 706744832, 120597248, 261621120, 953946048,
       800208928, 148581424, 935168536, 350484252, 630339474, 1072370923],
      [536870912, 805306368, 134217728, 1006632960, 503316480, 754974720,
       629145600, 440401920, 94371840, 711983104, 229113856, 374079488,
       330694656, 996212736, 907247616, 557531136, 867573760, 190918656,
       1041467392, 490437632, 766918144, 643898624, 462663040, 125527616,
       672545696, 202454896, 373006376, 288845836, 1000351766, 930090001],
      [536870912, 268435456, 402653184, 872415232, 838860800, 956301312,
       612368384, 717225984, 211812352, 386924544, 302514176, 688128000,
       1015414784, 516751360, 1051492352, 773734400, 914432000, 63877120,
       807741440, 165200896, 748683776, 118489344, 168296832, 486802240,
       243663648, 667747216, 439124552, 81674924, 975249610, 350138737],
      [536870912, 268435456, 671088640, 469762048, 973078528, 1023410176,
       713031680, 339738624, 912261120, 797966336, 176685056, 71565312,
       510263296, 865533952, 814120960, 961232896, 887136256, 668078080,
       116070400, 382772224, 1047134720, 597098752, 411468416, 625689024,
       249602976, 449975248, 745216680, 43033924, 134873446, 201786361],
      [536870912, 268435456, 402653184, 67108864, 704643072, 385875968,
       696254464, 205520896, 920649728, 946864128, 359137280, 859045888,
       302907392, 50659328, 462192640, 524599296, 895541248, 590794752,
       168810496, 118033408, 831447552, 138662144, 485185920, 796511296,
       1021313184, 1064304752, 619184920, 997458052, 250479054, 745865975],
      [536870912, 268435456, 939524096, 1006632960, 838860800, 889192448,
       645922816, 46137344, 476053504, 584056832, 210239488, 465829888,
       820903936, 689897472, 73695232, 249118720, 110075904, 315338752,
       610637824, 517665792, 1049494016, 785318144, 376210304, 735921088,
       402760480, 738505552, 168368744, 151499820, 344957894, 936096557],
      [536870912, 805306368, 939524096, 1006632960, 503316480, 922746880,
       41943040, 423624704, 228589568, 651165696, 195559424, 500957184,
       791019520, 261292032, 1040285696, 118407168, 982065152, 625250304,
       329533440, 298984448, 153690624, 76845824, 579619712, 692987840,
       900670432, 450334832, 363187112, 719119956, 765461306, 382730781],
      [536870912, 805306368, 402653184, 603979776, 838860800, 117440512,
       478150656, 658505728, 752877568, 1060110336, 141033472, 209453056,
       244187136, 272957440, 678068224, 1014546432, 377724928, 876875776,
       443160576, 998185984, 168665600, 318837504, 914397568, 71818816,
       40763680, 527762288, 939688008, 335855668, 705536494, 587273091],
      [536870912, 268435456, 671088640, 738197504, 637534208, 150994944,
       813694976, 943718400, 77594624, 179306496, 798490624, 967049216,
       134348800, 1006698496, 235044864, 620937216, 377643008, 826314752,
       874711040, 854819840, 725109248, 856992512, 664336768, 94804544,
       100663328, 419430416, 411041832, 339738668, 580911142, 61865993],
      [536870912, 805306368, 939524096, 603979776, 100663296, 452984832,
       998244352, 188743680, 866123776, 389021696, 287834112, 172228608,
       824836096, 977731584, 153714688, 507854848, 254402560, 88403968,
       883578880, 235160576, 118055424, 422917888, 371224704, 326210368,
       654926368, 691353392, 773877944, 930190180, 554263078, 842348331]]} in
  // untuple_37 aliases untuple_11
  let {untuple_37} =
    mapT(fn {[real]} (int param_0_17) =>
           let bop_18 = param_0_17 >> 1 in
           let val_19 = bop_18 ^ param_0_17 in
           let {untuple_32} =
             mapT(fn {int} ([int] param_0_20) =>
                    let {untuple_25} =
                      filterT(fn {bool} (int param_0_21) =>
                                let t_22 = 1 << param_0_21 in
                                let bop_23 = val_19 & t_22 in
                                let val_24 = bop_23 = t_22 in
                                {val_24},
                              iota(30)) in
                    let {untuple_27} =
                      mapT(fn {int} (int param_0_26) =>
                             {param_0_20[param_0_26]},
                           untuple_25) in
                    let {untuple_31} =
                      reduceT(fn {int} (int x_28, int y_29) =>
                                let val_30 = x_28 ^ y_29 in
                                {val_30},
                              {0}, untuple_27) in
                    {untuple_31},
                  dir_vs_16) in
           let {untuple_36} =
             mapT(fn {real} (int x_33) =>
                    let tmp_call_34 = toReal(x_33) in
                    let val_35 = tmp_call_34 / 1073741824.0 in
                    {val_35},
                  untuple_32) in
           {untuple_36},
         untuple_11) in
  // untuple_283 aliases untuple_37, untuple_11
  let {untuple_283} =
    mapT(fn {[real]} ([real] param_0_38) =>
           let {untuple_282} =
             mapT(fn {real} (real param_0_39) =>
                    let dp_40 = param_0_39 - 0.5 in
                    let bop_41 = 0.5 - dp_40 in
                    let bop_42 = dp_40 + 0.5 in
                    let bop_43 = dp_40 * dp_40 in
                    let val_44 = 0.180625 - bop_43 in
                    let bop_45 = val_44 * 2509.0809287301227 in
                    let bop_46 = bop_45 + 33430.57558358813 in
                    let bop_47 = val_44 * bop_46 in
                    let bop_48 = bop_47 + 67265.7709270087 in
                    let bop_49 = val_44 * bop_48 in
                    let bop_50 = bop_49 + 45921.95393154987 in
                    let bop_51 = val_44 * bop_50 in
                    let bop_52 = bop_51 + 13731.69376550946 in
                    let bop_53 = val_44 * bop_52 in
                    let bop_54 = bop_53 + 1971.5909503065513 in
                    let bop_55 = val_44 * bop_54 in
                    let bop_56 = bop_55 + 133.14166789178438 in
                    let bop_57 = val_44 * bop_56 in
                    let bop_58 = bop_57 + 3.3871328727963665 in
                    let bop_59 = val_44 * 5226.495278852854 in
                    let bop_60 = bop_59 + 28729.085735721943 in
                    let bop_62 = val_44 * bop_60 in
                    let bop_63 = bop_62 + 39307.89580009271 in
                    let bop_64 = val_44 * bop_63 in
                    let bop_65 = bop_64 + 21213.794301586597 in
                    let bop_66 = val_44 * bop_65 in
                    let bop_67 = bop_66 + 5394.196021424751 in
                    let bop_78 = val_44 * bop_67 in
                    let bop_86 = bop_78 + 687.1870074920579 in
                    let bop_93 = val_44 * bop_86 in
                    let bop_198 = bop_93 + 42.31333070160091 in
                    let bop_199 = val_44 * bop_198 in
                    let bop_200 = bop_199 + 1.0 in
                    let bop_201 = dp_40 <= 0.425 in
                    let bop_202 = 0.0 <= dp_40 in
                    let norm_203 = bop_202 && bop_201 in
                    let bop_204 = 0.0 - dp_40 in
                    let bop_205 = bop_204 <= 0.425 in
                    let bop_206 = dp_40 < 0.0 in
                    let norm_207 = bop_206 && bop_205 in
                    let norm_208 = norm_207 || norm_203 in
                    let val_281 =
                      if norm_208
                      then let tmp_bop_209 = bop_58 / bop_200 in
                           let bop_210 = dp_40 * tmp_bop_209 in
                           bop_210
                      else let pp_211 =
                             if bop_206
                             then bop_42
                             else bop_41 in
                           let tmp_call_212 = log(pp_211) in
                           let val_213 = -tmp_call_212 in
                           let tmp_call_214 = sqrt(val_213) in
                           let bop_216 = tmp_call_214 <= 5.0 in
                           let val_217 = tmp_call_214 - 1.6 in
                           let bop_218 = val_217 * 0.0007745450142783414 in
                           let bop_219 = bop_218 + 0.022723844989269184 in
                           let bop_220 = val_217 * bop_219 in
                           let bop_221 = bop_220 + 0.2417807251774506 in
                           let bop_222 = val_217 * bop_221 in
                           let bop_224 = bop_222 + 1.2704582524523684 in
                           let bop_225 = val_217 * bop_224 in
                           let bop_226 = bop_225 + 3.6478483247632045 in
                           let bop_227 = val_217 * bop_226 in
                           let bop_228 = bop_227 + 5.769497221460691 in
                           let bop_229 = val_217 * bop_228 in
                           let bop_231 = bop_229 + 4.630337846156546 in
                           let bop_232 = val_217 * bop_231 in
                           let bop_233 = bop_232 + 1.4234371107496835 in
                           let bop_234 = val_217
                                         * 0.0000000010507500716444169 in
                           let bop_235 = bop_234 + 0.0005475938084995345 in
                           let bop_236 = val_217 * bop_235 in
                           let bop_237 = bop_236 + 0.015198666563616457 in
                           let bop_238 = val_217 * bop_237 in
                           let bop_239 = bop_238 + 0.14810397642748008 in
                           let bop_240 = val_217 * bop_239 in
                           let bop_241 = bop_240 + 0.6897673349851 in
                           let bop_242 = val_217 * bop_241 in
                           let bop_243 = bop_242 + 1.6763848301838038 in
                           let bop_244 = val_217 * bop_243 in
                           let bop_245 = bop_244 + 2.053191626637759 in
                           let bop_246 = val_217 * bop_245 in
                           let bop_247 = bop_246 + 1.0 in
                           let val_248 = tmp_call_214 - 5.0 in
                           let bop_249 = val_248 * 0.00000020103343992922881 in
                           let bop_250 = bop_249 + 0.000027115555687434876 in
                           let bop_251 = val_248 * bop_250 in
                           let bop_252 = bop_251 + 0.0012426609473880784 in
                           let bop_253 = val_248 * bop_252 in
                           let bop_254 = bop_253 + 0.026532189526576124 in
                           let bop_255 = val_248 * bop_254 in
                           let bop_256 = bop_255 + 0.29656057182850487 in
                           let bop_257 = val_248 * bop_256 in
                           let bop_258 = bop_257 + 1.7848265399172913 in
                           let bop_259 = val_248 * bop_258 in
                           let bop_260 = bop_259 + 5.463784911164114 in
                           let bop_261 = val_248 * bop_260 in
                           let bop_262 = bop_261 + 6.657904643501103 in
                           let bop_263 = val_248 * 0.000020442631033899398 in
                           let bop_264 = bop_263 + 0.0000001421511758316446 in
                           let bop_265 = val_248 * bop_264 in
                           let bop_266 = bop_265 + 0.000018463183175100548 in
                           let bop_267 = val_248 * bop_266 in
                           let bop_268 = bop_267 + 0.0007868691311456133 in
                           let bop_269 = val_248 * bop_268 in
                           let bop_270 = bop_269 + 0.014875361290850615 in
                           let bop_271 = val_248 * bop_270 in
                           let bop_272 = bop_271 + 0.1369298809227358 in
                           let bop_273 = val_248 * bop_272 in
                           let bop_274 = bop_273 + 0.599832206555888 in
                           let bop_275 = val_248 * bop_274 in
                           let bop_276 = bop_275 + 1.0 in
                           let x_279 =
                             if bop_216
                             then let bop_277 = bop_233 / bop_247 in
                                  bop_277
                             else let bop_278 = bop_262 / bop_276 in
                                  bop_278 in
                           let bop_280 = 0.0 - x_279 in
                           if bop_206
                           then bop_280
                           else x_279 in
                    {val_281},
                  param_0_38) in
           {untuple_282},
         untuple_37) in
  let val_284 = [-0.0283491736871803, 0.0178771081725381, 0.0043096808044729] in
  let val_287 = [-0.0183841413744211, -0.0044530897672834,
                 0.0024263805987983] in
  let val_288 = [-0.0172686581005089, 0.0125638544546015, 0.0094452810918001] in
  let val_289 = [-0.0144179417871814, 0.0157411263968213, 0.0125315353728014] in
  let val_290 = [-0.0121497422218761, 0.0182904634062437, 0.0151125070556484] in
  // tmp_lit_291 aliases val_288, val_284, val_289, val_290, val_287
  let tmp_lit_291 = [val_284,
                     val_287,
                     val_288,
                     val_289,
                     val_290] in
  let tmp_size_292 = size(0, tmp_lit_291) in
  let tmp_e_293 = 5 = tmp_size_292 in
  let zip_assert_294 = assert(tmp_e_293) in
  let {bb_inds_295, bb_data_296} =
    {[[5, 2, 1, 3, 4],
      [0, 0, 0, 2, 3],
      [0, 5, 2, 5, 5]],
     [[2.237292884728058, 1.096095158985383, 0.7075902730592357,
       0.816682804349221, 0.7075902730592357],
      [0.0, 0.5998905309250137, 0.4993160054719562, 0.666970802919708,
       0.5006839945280438],
      [0.0, 0.4001094690749863, 0.5006839945280438, 0.3330291970802919,
       0.4993160054719562]]} in
  // untuple_331 aliases untuple_37, untuple_11, untuple_283
  let {untuple_331} =
    mapT(fn {[[real]]} ([real] param_0_297) =>
           // untuple_330 aliases param_0_297
           let {untuple_330} =
             mapT(fn {[real]} ([real] param_0_298) =>
                    let val_299 = 2.237292884728058 * param_0_298[0] in
                    let bbrow_300 = replicate(5, 0.0) in
                    let letwith_dst_8 = bbrow_300 with [4] <- val_299 in
                    // bbrow_304 aliases letwith_dst_8
                    loop (bbrow_304 = letwith_dst_8) = for i_314 < 4 do
                      let bop_315 = i_314 + 1 in
                      let bop_316 = bb_data_296[0, bop_315]
                                    * param_0_298[bop_315] in
                      let l_317 = bb_inds_295[0, bop_315] - 1 in
                      let k_318 = bb_inds_295[2, bop_315] - 1 in
                      let bop_319 = bb_data_296[2, bop_315]
                                    * bbrow_304[k_318] in
                      let tmp_320 = bop_319 + bop_316 in
                      let j_321 = bb_inds_295[1, bop_315] - 1 in
                      let bop_322 = j_321 + 1 in
                      let bop_323 = bop_322 = 0 in
                      let val_328 =
                        if bop_323
                        then tmp_320
                        else let bop_325 = bb_data_296[1, bop_315]
                                           * bbrow_304[j_321] in
                             let bop_327 = tmp_320 + bop_325 in
                             bop_327 in
                      let letwith_dst_9 = bbrow_304 with [l_317] <- val_328 in
                      letwith_dst_9 in
                    // bbrow_305 aliases bbrow_304
                    loop (bbrow_305 = bbrow_304) = for ii_306 < 4 do
                      let bop_307 = ii_306 + 1 in
                      let i_308 = 5 - bop_307 in
                      let bop_309 = i_308 - 1 in
                      let val_312 = bbrow_305[i_308] - bbrow_305[bop_309] in
                      let letwith_dst_61 = bbrow_305 with [i_308] <- val_312 in
                      letwith_dst_61 in
                    {bbrow_305},
                  transpose(reshape((5, 3), param_0_297))) in
           {transpose(untuple_330)},
         untuple_283) in
  let tmp_size_332 = size(1, untuple_331) in
  let tmp_e_335 = tmp_size_332 = 5 in
  let zip_assert_337 = assert(tmp_e_335) in
  let comb_cert_338 = conjoin(zip_assert_294, zip_assert_337) in
  let tmp_size_340 = <comb_cert_338>size(1, tmp_lit_291) in
  let tmp_e_341 = tmp_size_340 = 3 in
  let zip_assert_342 = assert(tmp_e_341) in
  // untuple_419 aliases untuple_37, untuple_331, untuple_11, untuple_283
  let {untuple_419} =
    mapT(fn {[[real]]} ([[real]] param_0_343) =>
           // untuple_377 aliases param_0_343
           let {untuple_377} =
             mapT(fn {[real]} ([real] param_0_344) =>
                    let {untuple_376} =
                      mapT(fn {real} (int j_345) =>
                             let val_348 = j_345 + 1 in
                             let {first_350, rest_351} = split(val_348,
                                                               param_0_344) in
                             let {first_353, rest_354} = split(val_348,
                                                               norm_0[j_345]) in
                             let {untuple_369} =
                               mapT(fn {real} (real arg_355, real arg_357,
                                               int arg_362) =>
                                      let val_365 = arg_355 * arg_357 in
                                      {val_365},
                                    first_350, first_353, iota(val_348)) in
                             let {untuple_375} =
                               reduceT(fn {real} (real x_370, real y_371) =>
                                         let val_372 = x_370 + y_371 in
                                         {val_372},
                                       {0.0}, untuple_369) in
                             {untuple_375},
                           iota(3)) in
                    {untuple_376},
                  param_0_343) in
           // untuple_396 aliases val_288, val_284, val_289, untuple_377, norm_1, val_290, tmp_lit_291, param_0_343, val_287
           let {untuple_396} =
             <comb_cert_338>
             mapT(fn {[real]} ([real] arg_378, [real] arg_379,
                               [real] arg_380) =>
                    let {untuple_389} =
                      mapT(fn {real} (real arg_381, real arg_384) =>
                             let val_385 = arg_381 * arg_384 in
                             {val_385},
                           arg_378, arg_379) in
                    let {untuple_394} =
                      <zip_assert_342>
                      mapT(fn {real} (real arg_390, real arg_391) =>
                             let val_392 = arg_390 + arg_391 in
                             {val_392},
                           arg_380, untuple_389) in
                    {untuple_394},
                  untuple_377, norm_1, tmp_lit_291) in
           // untuple_402 aliases val_288, untuple_396, val_284, val_289, untuple_377, norm_1, val_290, tmp_lit_291, param_0_343, val_287
           let {untuple_402} =
             mapT(fn {[real]} ([real] x_397) =>
                    let {untuple_400} =
                      mapT(fn {real} (real param_0_398) =>
                             let val_399 = exp(param_0_398) in
                             {val_399},
                           x_397) in
                    {untuple_400},
                  untuple_396) in
           let tmp_size_403 = size(1, untuple_396) in
           let tmp_e_404 = 3 = tmp_size_403 in
           let zip_assert_405 = assert(tmp_e_404) in
           // untuple_415 aliases val_288, untuple_396, val_284, val_289, untuple_377, norm_1, untuple_402, val_290, tmp_lit_291, param_0_343, val_287
           let {untuple_415} =
             scanT(fn {[real]} ([real] x_406, [real] y_407) =>
                     let {untuple_414} =
                       <zip_assert_405>
                       mapT(fn {real} (real arg_408, real arg_410) =>
                              let val_412 = arg_408 * arg_410 in
                              {val_412},
                            x_406, y_407) in
                     {untuple_414},
                   {norm_2}, untuple_402) in
           {untuple_415},
         untuple_331) in
  let divs_420 = [0.00026609544843735446, 0.00008445945945945946,
                  0.0008333333333333334] in
  let {untuple_487} =
    mapT(fn {real} ([[real]] param_0_424) =>
           // untuple_442 aliases param_0_424
           let {untuple_442} =
             mapT(fn {[real]} ([real] xs_426) =>
                    let {untuple_438} =
                      mapT(fn {real} (real arg_427, real arg_430) =>
                             let val_431 = arg_427 * arg_430 in
                             {val_431},
                           xs_426, divs_420) in
                    {untuple_438},
                  param_0_424) in
           let {untuple_465} =
             mapT(fn {real} ([real] param_0_443) =>
                    let {untuple_452} =
                      reduceT(fn {real} (real x_444, real y_445) =>
                                let bop_450 = x_444 < y_445 in
                                let val_451 =
                                  if bop_450
                                  then x_444
                                  else y_445 in
                                {val_451},
                              {param_0_443[0]}, param_0_443) in
                    {untuple_452},
                  untuple_442) in
           let bop_466 = 1.0 <= untuple_465[0] in
           let val_483 =
             if bop_466
             then 1126.754229107682
             else let bop_468 = 1.0 <= untuple_465[1] in
                  if bop_468
                  then 1235.7473027229837
                  else let bop_469 = 1.0 <= untuple_465[2] in
                       if bop_469
                       then 1336.1201435873802
                       else let bop_470 = 1.0 <= untuple_465[3] in
                            if bop_470
                            then 1425.0708889426294
                            else let val_471 = 1000.0 * untuple_465[4] in
                                 let bop_473 = val_471 * 0.8588567633110704 in
                                 let bop_474 = 0.75 < untuple_465[4] in
                                 let bop_475 = 1.0 <= untuple_465[4] in
                                 if bop_475
                                 then 1502.9993357943733
                                 else if bop_474
                                      then 858.8567633110704
                                      else bop_473 in
           {val_483},
         untuple_419) in
  let {untuple_492} =
    reduceT(fn {real} (real x_488, real y_490) =>
              let val_491 = x_488 + y_490 in
              {val_491},
            {0.0}, untuple_487) in
  let bop_493 = untuple_492 / 1000.0 in
  bop_493
